
FREERTOS_SAM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009a78  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409a78  00409a78  00019a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008ac  20400000  00409a80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000358  204008ac  0040a32c  000208ac  2**2
                  ALLOC
  4 .stack        00002004  20400c04  0040a684  000208ac  2**0
                  ALLOC
  5 .heap         00000200  20402c08  0040c688  000208ac  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000208ac  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208da  2**0
                  CONTENTS, READONLY
  8 .debug_info   00011a9c  00000000  00000000  00020933  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002b8b  00000000  00000000  000323cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008aaa  00000000  00000000  00034f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e10  00000000  00000000  0003da04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e90  00000000  00000000  0003e814  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020abf  00000000  00000000  0003f6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f78b  00000000  00000000  00060163  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00092c8d  00000000  00000000  0006f8ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031d8  00000000  00000000  0010257c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20402c08 	.word	0x20402c08
  400004:	0040082d 	.word	0x0040082d
  400008:	00400829 	.word	0x00400829
  40000c:	00400829 	.word	0x00400829
  400010:	00400829 	.word	0x00400829
  400014:	00400829 	.word	0x00400829
  400018:	00400829 	.word	0x00400829
	...
  40002c:	00400c1d 	.word	0x00400c1d
  400030:	00400829 	.word	0x00400829
  400034:	00000000 	.word	0x00000000
  400038:	00400cbd 	.word	0x00400cbd
  40003c:	00400d25 	.word	0x00400d25
  400040:	00400829 	.word	0x00400829
  400044:	00400829 	.word	0x00400829
  400048:	00400829 	.word	0x00400829
  40004c:	00400829 	.word	0x00400829
  400050:	00400829 	.word	0x00400829
  400054:	00400829 	.word	0x00400829
  400058:	00400829 	.word	0x00400829
  40005c:	00400829 	.word	0x00400829
  400060:	00400829 	.word	0x00400829
  400064:	00000000 	.word	0x00000000
  400068:	00400505 	.word	0x00400505
  40006c:	00400519 	.word	0x00400519
  400070:	0040052d 	.word	0x0040052d
  400074:	00400829 	.word	0x00400829
  400078:	00400829 	.word	0x00400829
  40007c:	00400829 	.word	0x00400829
  400080:	00400541 	.word	0x00400541
  400084:	00400555 	.word	0x00400555
  400088:	00400829 	.word	0x00400829
  40008c:	00400829 	.word	0x00400829
  400090:	00400829 	.word	0x00400829
  400094:	00400829 	.word	0x00400829
  400098:	00400829 	.word	0x00400829
  40009c:	00400829 	.word	0x00400829
  4000a0:	00400829 	.word	0x00400829
  4000a4:	00400829 	.word	0x00400829
  4000a8:	00400829 	.word	0x00400829
  4000ac:	00400829 	.word	0x00400829
  4000b0:	00400829 	.word	0x00400829
  4000b4:	00400829 	.word	0x00400829
  4000b8:	00400829 	.word	0x00400829
  4000bc:	00400829 	.word	0x00400829
  4000c0:	00400829 	.word	0x00400829
  4000c4:	00400829 	.word	0x00400829
  4000c8:	00400829 	.word	0x00400829
  4000cc:	00400829 	.word	0x00400829
  4000d0:	00000000 	.word	0x00000000
  4000d4:	00400829 	.word	0x00400829
  4000d8:	00000000 	.word	0x00000000
  4000dc:	00400829 	.word	0x00400829
  4000e0:	00400829 	.word	0x00400829
  4000e4:	00400829 	.word	0x00400829
  4000e8:	00400829 	.word	0x00400829
  4000ec:	00400829 	.word	0x00400829
  4000f0:	00400829 	.word	0x00400829
  4000f4:	00400829 	.word	0x00400829
  4000f8:	00400829 	.word	0x00400829
  4000fc:	00400829 	.word	0x00400829
  400100:	00400829 	.word	0x00400829
  400104:	00400829 	.word	0x00400829
  400108:	00400829 	.word	0x00400829
  40010c:	00400829 	.word	0x00400829
  400110:	00400829 	.word	0x00400829
	...
  400120:	00400829 	.word	0x00400829
  400124:	00400829 	.word	0x00400829
  400128:	00400829 	.word	0x00400829
  40012c:	00400829 	.word	0x00400829
  400130:	00400829 	.word	0x00400829
  400134:	00000000 	.word	0x00000000
  400138:	00400829 	.word	0x00400829
  40013c:	00400829 	.word	0x00400829

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204008ac 	.word	0x204008ac
  40015c:	00000000 	.word	0x00000000
  400160:	00409a80 	.word	0x00409a80

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	204008b0 	.word	0x204008b0
  400190:	00409a80 	.word	0x00409a80
  400194:	00409a80 	.word	0x00409a80
  400198:	00000000 	.word	0x00000000

0040019c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40019c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40019e:	4810      	ldr	r0, [pc, #64]	; (4001e0 <sysclk_init+0x44>)
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <sysclk_init+0x48>)
  4001a2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001a4:	213e      	movs	r1, #62	; 0x3e
  4001a6:	2000      	movs	r0, #0
  4001a8:	4b0f      	ldr	r3, [pc, #60]	; (4001e8 <sysclk_init+0x4c>)
  4001aa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001ac:	4c0f      	ldr	r4, [pc, #60]	; (4001ec <sysclk_init+0x50>)
  4001ae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001b0:	2800      	cmp	r0, #0
  4001b2:	d0fc      	beq.n	4001ae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001b4:	4b0e      	ldr	r3, [pc, #56]	; (4001f0 <sysclk_init+0x54>)
  4001b6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001b8:	4a0e      	ldr	r2, [pc, #56]	; (4001f4 <sysclk_init+0x58>)
  4001ba:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x5c>)
  4001bc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001be:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x60>)
  4001c0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001c2:	2800      	cmp	r0, #0
  4001c4:	d0fc      	beq.n	4001c0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001c6:	2002      	movs	r0, #2
  4001c8:	4b0d      	ldr	r3, [pc, #52]	; (400200 <sysclk_init+0x64>)
  4001ca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001cc:	2000      	movs	r0, #0
  4001ce:	4b0d      	ldr	r3, [pc, #52]	; (400204 <sysclk_init+0x68>)
  4001d0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001d2:	4b0d      	ldr	r3, [pc, #52]	; (400208 <sysclk_init+0x6c>)
  4001d4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001d6:	4802      	ldr	r0, [pc, #8]	; (4001e0 <sysclk_init+0x44>)
  4001d8:	4b02      	ldr	r3, [pc, #8]	; (4001e4 <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
  4001dc:	bd10      	pop	{r4, pc}
  4001de:	bf00      	nop
  4001e0:	11e1a300 	.word	0x11e1a300
  4001e4:	00400a19 	.word	0x00400a19
  4001e8:	0040060d 	.word	0x0040060d
  4001ec:	00400661 	.word	0x00400661
  4001f0:	00400671 	.word	0x00400671
  4001f4:	20183f01 	.word	0x20183f01
  4001f8:	400e0600 	.word	0x400e0600
  4001fc:	00400681 	.word	0x00400681
  400200:	00400569 	.word	0x00400569
  400204:	004005a5 	.word	0x004005a5
  400208:	00400909 	.word	0x00400909

0040020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  40020c:	b990      	cbnz	r0, 400234 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400212:	460c      	mov	r4, r1
  400214:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400216:	2a00      	cmp	r2, #0
  400218:	dd0f      	ble.n	40023a <_read+0x2e>
  40021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  40021c:	4e08      	ldr	r6, [pc, #32]	; (400240 <_read+0x34>)
  40021e:	4d09      	ldr	r5, [pc, #36]	; (400244 <_read+0x38>)
  400220:	6830      	ldr	r0, [r6, #0]
  400222:	4621      	mov	r1, r4
  400224:	682b      	ldr	r3, [r5, #0]
  400226:	4798      	blx	r3
		ptr++;
  400228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40022a:	42a7      	cmp	r7, r4
  40022c:	d1f8      	bne.n	400220 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40022e:	4640      	mov	r0, r8
  400230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400234:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400238:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40023a:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  40023c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400240:	20400bbc 	.word	0x20400bbc
  400244:	20400bb4 	.word	0x20400bb4

00400248 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400248:	3801      	subs	r0, #1
  40024a:	2802      	cmp	r0, #2
  40024c:	d815      	bhi.n	40027a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40024e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400252:	460e      	mov	r6, r1
  400254:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400256:	b19a      	cbz	r2, 400280 <_write+0x38>
  400258:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40025a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400294 <_write+0x4c>
  40025e:	4f0c      	ldr	r7, [pc, #48]	; (400290 <_write+0x48>)
  400260:	f8d8 0000 	ldr.w	r0, [r8]
  400264:	f815 1b01 	ldrb.w	r1, [r5], #1
  400268:	683b      	ldr	r3, [r7, #0]
  40026a:	4798      	blx	r3
  40026c:	2800      	cmp	r0, #0
  40026e:	db0a      	blt.n	400286 <_write+0x3e>
  400270:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400272:	3c01      	subs	r4, #1
  400274:	d1f4      	bne.n	400260 <_write+0x18>
  400276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  40027a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  40027e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  400280:	2000      	movs	r0, #0
  400282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  400286:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  40028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40028e:	bf00      	nop
  400290:	20400bb8 	.word	0x20400bb8
  400294:	20400bbc 	.word	0x20400bbc

00400298 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40029a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40029e:	4b57      	ldr	r3, [pc, #348]	; (4003fc <board_init+0x164>)
  4002a0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002a2:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002a6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4002aa:	4b55      	ldr	r3, [pc, #340]	; (400400 <board_init+0x168>)
  4002ac:	2200      	movs	r2, #0
  4002ae:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4002b2:	695a      	ldr	r2, [r3, #20]
  4002b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002b8:	615a      	str	r2, [r3, #20]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002ba:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4002be:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4002c2:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4002c6:	f3c6 354e 	ubfx	r5, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4002ca:	f006 0707 	and.w	r7, r6, #7
  4002ce:	3704      	adds	r7, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4002d0:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4002d4:	fab6 f086 	clz	r0, r6
    wshift  = __CLZ(ways) & 0x1f;
  4002d8:	f000 001f 	and.w	r0, r0, #31
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4002dc:	f3bf 8f4f 	dsb	sy

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4002e0:	461c      	mov	r4, r3
    wshift  = __CLZ(ways) & 0x1f;

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4002e2:	4633      	mov	r3, r6
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  4002e4:	fa05 f107 	lsl.w	r1, r5, r7
  4002e8:	fa03 f200 	lsl.w	r2, r3, r0
  4002ec:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  4002ee:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
            } while(tmpways--);
  4002f2:	3b01      	subs	r3, #1
  4002f4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4002f8:	d1f6      	bne.n	4002e8 <board_init+0x50>
        } while(sets--);
  4002fa:	3d01      	subs	r5, #1
  4002fc:	f1b5 3fff 	cmp.w	r5, #4294967295
  400300:	d1ef      	bne.n	4002e2 <board_init+0x4a>
  400302:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400306:	4b3e      	ldr	r3, [pc, #248]	; (400400 <board_init+0x168>)
  400308:	695a      	ldr	r2, [r3, #20]
  40030a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40030e:	615a      	str	r2, [r3, #20]
  400310:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400314:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400318:	4a3a      	ldr	r2, [pc, #232]	; (400404 <board_init+0x16c>)
  40031a:	493b      	ldr	r1, [pc, #236]	; (400408 <board_init+0x170>)
  40031c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40031e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400322:	6051      	str	r1, [r2, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400324:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400328:	f3bf 8f6f 	isb	sy
static inline void tcm_disable(void) 
{

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  40032c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400330:	f022 0201 	bic.w	r2, r2, #1
  400334:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400338:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  40033c:	f022 0201 	bic.w	r2, r2, #1
  400340:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400344:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  400348:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40034c:	200a      	movs	r0, #10
  40034e:	4c2f      	ldr	r4, [pc, #188]	; (40040c <board_init+0x174>)
  400350:	47a0      	blx	r4
  400352:	200b      	movs	r0, #11
  400354:	47a0      	blx	r4
  400356:	200c      	movs	r0, #12
  400358:	47a0      	blx	r4
  40035a:	2010      	movs	r0, #16
  40035c:	47a0      	blx	r4
  40035e:	2011      	movs	r0, #17
  400360:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400362:	4b2b      	ldr	r3, [pc, #172]	; (400410 <board_init+0x178>)
  400364:	f44f 7280 	mov.w	r2, #256	; 0x100
  400368:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40036a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40036e:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400370:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400374:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400378:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40037a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  40037e:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400384:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
  400386:	621a      	str	r2, [r3, #32]

	if (mode & IOPORT_MODE_DEBOUNCE) {
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40038c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40038e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400392:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400394:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400396:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40039a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40039c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003a0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003ac:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003b2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003b4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4003ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003bc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c0:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4003c2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003c4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4003c8:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003ca:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4003cc:	4a11      	ldr	r2, [pc, #68]	; (400414 <board_init+0x17c>)
  4003ce:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4003d2:	f043 0310 	orr.w	r3, r3, #16
  4003d6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4003da:	4b0f      	ldr	r3, [pc, #60]	; (400418 <board_init+0x180>)
  4003dc:	2210      	movs	r2, #16
  4003de:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4003e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4003e4:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4003e6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4003e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  4003ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003ee:	4311      	orrs	r1, r2
  4003f0:	6719      	str	r1, [r3, #112]	; 0x70
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
  4003f2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003f4:	4311      	orrs	r1, r2
  4003f6:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4003f8:	605a      	str	r2, [r3, #4]
  4003fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4003fc:	400e1850 	.word	0x400e1850
  400400:	e000ed00 	.word	0xe000ed00
  400404:	400e0c00 	.word	0x400e0c00
  400408:	5a00080c 	.word	0x5a00080c
  40040c:	00400691 	.word	0x00400691
  400410:	400e1200 	.word	0x400e1200
  400414:	40088000 	.word	0x40088000
  400418:	400e1000 	.word	0x400e1000

0040041c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40041c:	6301      	str	r1, [r0, #48]	; 0x30
  40041e:	4770      	bx	lr

00400420 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400420:	6341      	str	r1, [r0, #52]	; 0x34
  400422:	4770      	bx	lr

00400424 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400424:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400428:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40042c:	d101      	bne.n	400432 <pio_get+0xe>
		ul_reg = p_pio->PIO_ODSR;
  40042e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400430:	e000      	b.n	400434 <pio_get+0x10>
	} else {
		ul_reg = p_pio->PIO_PDSR;
  400432:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400434:	4213      	tst	r3, r2
	if ((ul_reg & ul_mask) == 0) {
		return 0;
	} else {
		return 1;
	}
}
  400436:	bf14      	ite	ne
  400438:	2001      	movne	r0, #1
  40043a:	2000      	moveq	r0, #0
  40043c:	4770      	bx	lr
  40043e:	bf00      	nop

00400440 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400440:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400442:	f012 0f01 	tst.w	r2, #1
  400446:	d001      	beq.n	40044c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  400448:	6641      	str	r1, [r0, #100]	; 0x64
  40044a:	e000      	b.n	40044e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40044c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40044e:	f012 0f0a 	tst.w	r2, #10
  400452:	d001      	beq.n	400458 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  400454:	6201      	str	r1, [r0, #32]
  400456:	e000      	b.n	40045a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400458:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40045a:	f012 0f02 	tst.w	r2, #2
  40045e:	d002      	beq.n	400466 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  400460:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400464:	e004      	b.n	400470 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400466:	f012 0f08 	tst.w	r2, #8
  40046a:	d001      	beq.n	400470 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40046c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  400470:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400472:	6001      	str	r1, [r0, #0]
  400474:	4770      	bx	lr
  400476:	bf00      	nop

00400478 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400478:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40047a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40047c:	9c01      	ldr	r4, [sp, #4]
  40047e:	b10c      	cbz	r4, 400484 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  400480:	6641      	str	r1, [r0, #100]	; 0x64
  400482:	e000      	b.n	400486 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400484:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  400486:	b10b      	cbz	r3, 40048c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  400488:	6501      	str	r1, [r0, #80]	; 0x50
  40048a:	e000      	b.n	40048e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40048c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40048e:	b10a      	cbz	r2, 400494 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  400490:	6301      	str	r1, [r0, #48]	; 0x30
  400492:	e000      	b.n	400496 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  400494:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  400496:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400498:	6001      	str	r1, [r0, #0]
}
  40049a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40049e:	4770      	bx	lr

004004a0 <pio_get_output_data_status>:
 * \retval 0 All PIOs are configured to output a low level.
 */
uint32_t pio_get_output_data_status(const Pio *p_pio,
		const uint32_t ul_mask)
{
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4004a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4004a2:	420b      	tst	r3, r1
		return 0;
	} else {
		return 1;
	}
}
  4004a4:	bf14      	ite	ne
  4004a6:	2001      	movne	r0, #1
  4004a8:	2000      	moveq	r0, #0
  4004aa:	4770      	bx	lr

004004ac <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004ac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4004ae:	4770      	bx	lr

004004b0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4004b0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4004b2:	4770      	bx	lr

004004b4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4004b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4004b8:	4604      	mov	r4, r0
  4004ba:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <pio_handler_process+0x44>)
  4004be:	4798      	blx	r3
  4004c0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4004c2:	4620      	mov	r0, r4
  4004c4:	4b0d      	ldr	r3, [pc, #52]	; (4004fc <pio_handler_process+0x48>)
  4004c6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4004c8:	4005      	ands	r5, r0
  4004ca:	d013      	beq.n	4004f4 <pio_handler_process+0x40>
  4004cc:	4c0c      	ldr	r4, [pc, #48]	; (400500 <pio_handler_process+0x4c>)
  4004ce:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4004d2:	6823      	ldr	r3, [r4, #0]
  4004d4:	4543      	cmp	r3, r8
  4004d6:	d108      	bne.n	4004ea <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4004d8:	6861      	ldr	r1, [r4, #4]
  4004da:	4229      	tst	r1, r5
  4004dc:	d005      	beq.n	4004ea <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4004de:	68e3      	ldr	r3, [r4, #12]
  4004e0:	4640      	mov	r0, r8
  4004e2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4004e4:	6863      	ldr	r3, [r4, #4]
  4004e6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4004ea:	42b4      	cmp	r4, r6
  4004ec:	d002      	beq.n	4004f4 <pio_handler_process+0x40>
  4004ee:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4004f0:	2d00      	cmp	r5, #0
  4004f2:	d1ee      	bne.n	4004d2 <pio_handler_process+0x1e>
  4004f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4004f8:	004004ad 	.word	0x004004ad
  4004fc:	004004b1 	.word	0x004004b1
  400500:	204008c8 	.word	0x204008c8

00400504 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400504:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400506:	210a      	movs	r1, #10
  400508:	4801      	ldr	r0, [pc, #4]	; (400510 <PIOA_Handler+0xc>)
  40050a:	4b02      	ldr	r3, [pc, #8]	; (400514 <PIOA_Handler+0x10>)
  40050c:	4798      	blx	r3
  40050e:	bd08      	pop	{r3, pc}
  400510:	400e0e00 	.word	0x400e0e00
  400514:	004004b5 	.word	0x004004b5

00400518 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400518:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40051a:	210b      	movs	r1, #11
  40051c:	4801      	ldr	r0, [pc, #4]	; (400524 <PIOB_Handler+0xc>)
  40051e:	4b02      	ldr	r3, [pc, #8]	; (400528 <PIOB_Handler+0x10>)
  400520:	4798      	blx	r3
  400522:	bd08      	pop	{r3, pc}
  400524:	400e1000 	.word	0x400e1000
  400528:	004004b5 	.word	0x004004b5

0040052c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40052c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40052e:	210c      	movs	r1, #12
  400530:	4801      	ldr	r0, [pc, #4]	; (400538 <PIOC_Handler+0xc>)
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <PIOC_Handler+0x10>)
  400534:	4798      	blx	r3
  400536:	bd08      	pop	{r3, pc}
  400538:	400e1200 	.word	0x400e1200
  40053c:	004004b5 	.word	0x004004b5

00400540 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400540:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400542:	2110      	movs	r1, #16
  400544:	4801      	ldr	r0, [pc, #4]	; (40054c <PIOD_Handler+0xc>)
  400546:	4b02      	ldr	r3, [pc, #8]	; (400550 <PIOD_Handler+0x10>)
  400548:	4798      	blx	r3
  40054a:	bd08      	pop	{r3, pc}
  40054c:	400e1400 	.word	0x400e1400
  400550:	004004b5 	.word	0x004004b5

00400554 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400554:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400556:	2111      	movs	r1, #17
  400558:	4801      	ldr	r0, [pc, #4]	; (400560 <PIOE_Handler+0xc>)
  40055a:	4b02      	ldr	r3, [pc, #8]	; (400564 <PIOE_Handler+0x10>)
  40055c:	4798      	blx	r3
  40055e:	bd08      	pop	{r3, pc}
  400560:	400e1600 	.word	0x400e1600
  400564:	004004b5 	.word	0x004004b5

00400568 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400568:	2803      	cmp	r0, #3
  40056a:	d007      	beq.n	40057c <pmc_mck_set_division+0x14>
  40056c:	2804      	cmp	r0, #4
  40056e:	d008      	beq.n	400582 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400570:	2802      	cmp	r0, #2
  400572:	bf0c      	ite	eq
  400574:	f44f 7280 	moveq.w	r2, #256	; 0x100
  400578:	2200      	movne	r2, #0
  40057a:	e004      	b.n	400586 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40057c:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  400580:	e001      	b.n	400586 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400582:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400586:	4906      	ldr	r1, [pc, #24]	; (4005a0 <pmc_mck_set_division+0x38>)
  400588:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40058a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40058e:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  400590:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400592:	460a      	mov	r2, r1
  400594:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400596:	f013 0f08 	tst.w	r3, #8
  40059a:	d0fb      	beq.n	400594 <pmc_mck_set_division+0x2c>
}
  40059c:	4770      	bx	lr
  40059e:	bf00      	nop
  4005a0:	400e0600 	.word	0x400e0600

004005a4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4005a4:	4a18      	ldr	r2, [pc, #96]	; (400608 <pmc_switch_mck_to_pllack+0x64>)
  4005a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4005ac:	4318      	orrs	r0, r3
  4005ae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005b2:	f013 0f08 	tst.w	r3, #8
  4005b6:	d003      	beq.n	4005c0 <pmc_switch_mck_to_pllack+0x1c>
  4005b8:	e009      	b.n	4005ce <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005ba:	3b01      	subs	r3, #1
  4005bc:	d103      	bne.n	4005c6 <pmc_switch_mck_to_pllack+0x22>
  4005be:	e01e      	b.n	4005fe <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005c4:	4910      	ldr	r1, [pc, #64]	; (400608 <pmc_switch_mck_to_pllack+0x64>)
  4005c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005c8:	f012 0f08 	tst.w	r2, #8
  4005cc:	d0f5      	beq.n	4005ba <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4005ce:	4a0e      	ldr	r2, [pc, #56]	; (400608 <pmc_switch_mck_to_pllack+0x64>)
  4005d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005d2:	f023 0303 	bic.w	r3, r3, #3
  4005d6:	f043 0302 	orr.w	r3, r3, #2
  4005da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005dc:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4005de:	f010 0008 	ands.w	r0, r0, #8
  4005e2:	d004      	beq.n	4005ee <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4005e4:	2000      	movs	r0, #0
  4005e6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4005e8:	3b01      	subs	r3, #1
  4005ea:	d103      	bne.n	4005f4 <pmc_switch_mck_to_pllack+0x50>
  4005ec:	e009      	b.n	400602 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4005f2:	4905      	ldr	r1, [pc, #20]	; (400608 <pmc_switch_mck_to_pllack+0x64>)
  4005f4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4005f6:	f012 0f08 	tst.w	r2, #8
  4005fa:	d0f5      	beq.n	4005e8 <pmc_switch_mck_to_pllack+0x44>
  4005fc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4005fe:	2001      	movs	r0, #1
  400600:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400602:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400604:	4770      	bx	lr
  400606:	bf00      	nop
  400608:	400e0600 	.word	0x400e0600

0040060c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40060c:	b138      	cbz	r0, 40061e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40060e:	490e      	ldr	r1, [pc, #56]	; (400648 <pmc_switch_mainck_to_xtal+0x3c>)
  400610:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400612:	4a0e      	ldr	r2, [pc, #56]	; (40064c <pmc_switch_mainck_to_xtal+0x40>)
  400614:	401a      	ands	r2, r3
  400616:	4b0e      	ldr	r3, [pc, #56]	; (400650 <pmc_switch_mainck_to_xtal+0x44>)
  400618:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40061a:	620b      	str	r3, [r1, #32]
  40061c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40061e:	480a      	ldr	r0, [pc, #40]	; (400648 <pmc_switch_mainck_to_xtal+0x3c>)
  400620:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400622:	0209      	lsls	r1, r1, #8
  400624:	b289      	uxth	r1, r1
  400626:	4a0b      	ldr	r2, [pc, #44]	; (400654 <pmc_switch_mainck_to_xtal+0x48>)
  400628:	401a      	ands	r2, r3
  40062a:	4b0b      	ldr	r3, [pc, #44]	; (400658 <pmc_switch_mainck_to_xtal+0x4c>)
  40062c:	4313      	orrs	r3, r2
  40062e:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400630:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400632:	4602      	mov	r2, r0
  400634:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400636:	f013 0f01 	tst.w	r3, #1
  40063a:	d0fb      	beq.n	400634 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40063c:	4a02      	ldr	r2, [pc, #8]	; (400648 <pmc_switch_mainck_to_xtal+0x3c>)
  40063e:	6a11      	ldr	r1, [r2, #32]
  400640:	4b06      	ldr	r3, [pc, #24]	; (40065c <pmc_switch_mainck_to_xtal+0x50>)
  400642:	430b      	orrs	r3, r1
  400644:	6213      	str	r3, [r2, #32]
  400646:	4770      	bx	lr
  400648:	400e0600 	.word	0x400e0600
  40064c:	fec8fffc 	.word	0xfec8fffc
  400650:	01370002 	.word	0x01370002
  400654:	ffc8fffc 	.word	0xffc8fffc
  400658:	00370001 	.word	0x00370001
  40065c:	01370000 	.word	0x01370000

00400660 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400660:	4b02      	ldr	r3, [pc, #8]	; (40066c <pmc_osc_is_ready_mainck+0xc>)
  400662:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400664:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400668:	4770      	bx	lr
  40066a:	bf00      	nop
  40066c:	400e0600 	.word	0x400e0600

00400670 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400670:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400674:	4b01      	ldr	r3, [pc, #4]	; (40067c <pmc_disable_pllack+0xc>)
  400676:	629a      	str	r2, [r3, #40]	; 0x28
  400678:	4770      	bx	lr
  40067a:	bf00      	nop
  40067c:	400e0600 	.word	0x400e0600

00400680 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400680:	4b02      	ldr	r3, [pc, #8]	; (40068c <pmc_is_locked_pllack+0xc>)
  400682:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400684:	f000 0002 	and.w	r0, r0, #2
  400688:	4770      	bx	lr
  40068a:	bf00      	nop
  40068c:	400e0600 	.word	0x400e0600

00400690 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400690:	283f      	cmp	r0, #63	; 0x3f
  400692:	d81e      	bhi.n	4006d2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400694:	281f      	cmp	r0, #31
  400696:	d80c      	bhi.n	4006b2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400698:	4b11      	ldr	r3, [pc, #68]	; (4006e0 <pmc_enable_periph_clk+0x50>)
  40069a:	699a      	ldr	r2, [r3, #24]
  40069c:	2301      	movs	r3, #1
  40069e:	4083      	lsls	r3, r0
  4006a0:	4393      	bics	r3, r2
  4006a2:	d018      	beq.n	4006d6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4006a4:	2301      	movs	r3, #1
  4006a6:	fa03 f000 	lsl.w	r0, r3, r0
  4006aa:	4b0d      	ldr	r3, [pc, #52]	; (4006e0 <pmc_enable_periph_clk+0x50>)
  4006ac:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006ae:	2000      	movs	r0, #0
  4006b0:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4006b2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4006b4:	4b0a      	ldr	r3, [pc, #40]	; (4006e0 <pmc_enable_periph_clk+0x50>)
  4006b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4006ba:	2301      	movs	r3, #1
  4006bc:	4083      	lsls	r3, r0
  4006be:	4393      	bics	r3, r2
  4006c0:	d00b      	beq.n	4006da <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4006c2:	2301      	movs	r3, #1
  4006c4:	fa03 f000 	lsl.w	r0, r3, r0
  4006c8:	4b05      	ldr	r3, [pc, #20]	; (4006e0 <pmc_enable_periph_clk+0x50>)
  4006ca:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4006ce:	2000      	movs	r0, #0
  4006d0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4006d2:	2001      	movs	r0, #1
  4006d4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4006d6:	2000      	movs	r0, #0
  4006d8:	4770      	bx	lr
  4006da:	2000      	movs	r0, #0
}
  4006dc:	4770      	bx	lr
  4006de:	bf00      	nop
  4006e0:	400e0600 	.word	0x400e0600

004006e4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4006e4:	6943      	ldr	r3, [r0, #20]
  4006e6:	f013 0f02 	tst.w	r3, #2
  4006ea:	d002      	beq.n	4006f2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4006ec:	61c1      	str	r1, [r0, #28]
	return 0;
  4006ee:	2000      	movs	r0, #0
  4006f0:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4006f2:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4006f4:	4770      	bx	lr
  4006f6:	bf00      	nop

004006f8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4006f8:	6943      	ldr	r3, [r0, #20]
  4006fa:	f013 0f01 	tst.w	r3, #1
  4006fe:	d003      	beq.n	400708 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400700:	6983      	ldr	r3, [r0, #24]
  400702:	700b      	strb	r3, [r1, #0]
	return 0;
  400704:	2000      	movs	r0, #0
  400706:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400708:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  40070a:	4770      	bx	lr

0040070c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40070c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40070e:	010c      	lsls	r4, r1, #4
  400710:	4294      	cmp	r4, r2
  400712:	d90f      	bls.n	400734 <usart_set_async_baudrate+0x28>
  400714:	e01a      	b.n	40074c <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400716:	6841      	ldr	r1, [r0, #4]
  400718:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40071c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40071e:	0412      	lsls	r2, r2, #16
  400720:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400724:	431a      	orrs	r2, r3
  400726:	6202      	str	r2, [r0, #32]

	return 0;
  400728:	2000      	movs	r0, #0
  40072a:	e01c      	b.n	400766 <usart_set_async_baudrate+0x5a>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  40072c:	2001      	movs	r0, #1
  40072e:	e01a      	b.n	400766 <usart_set_async_baudrate+0x5a>
  400730:	2001      	movs	r0, #1
  400732:	e018      	b.n	400766 <usart_set_async_baudrate+0x5a>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400734:	0863      	lsrs	r3, r4, #1
  400736:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40073a:	fbb2 f2f4 	udiv	r2, r2, r4
	cd = cd_fp >> 3;
  40073e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400740:	1e5c      	subs	r4, r3, #1
  400742:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400746:	428c      	cmp	r4, r1
  400748:	d9e9      	bls.n	40071e <usart_set_async_baudrate+0x12>
  40074a:	e7ef      	b.n	40072c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40074c:	00c9      	lsls	r1, r1, #3
  40074e:	084b      	lsrs	r3, r1, #1
  400750:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400754:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400758:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40075a:	1e5c      	subs	r4, r3, #1
  40075c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400760:	428c      	cmp	r4, r1
  400762:	d8e5      	bhi.n	400730 <usart_set_async_baudrate+0x24>
  400764:	e7d7      	b.n	400716 <usart_set_async_baudrate+0xa>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  400766:	f85d 4b04 	ldr.w	r4, [sp], #4
  40076a:	4770      	bx	lr

0040076c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  40076c:	4b08      	ldr	r3, [pc, #32]	; (400790 <usart_reset+0x24>)
  40076e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  400772:	2300      	movs	r3, #0
  400774:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400776:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400778:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40077a:	2388      	movs	r3, #136	; 0x88
  40077c:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40077e:	2324      	movs	r3, #36	; 0x24
  400780:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  400782:	f44f 7380 	mov.w	r3, #256	; 0x100
  400786:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  400788:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40078c:	6003      	str	r3, [r0, #0]
  40078e:	4770      	bx	lr
  400790:	55534100 	.word	0x55534100

00400794 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  400794:	b570      	push	{r4, r5, r6, lr}
  400796:	4605      	mov	r5, r0
  400798:	460c      	mov	r4, r1
  40079a:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  40079c:	4b0f      	ldr	r3, [pc, #60]	; (4007dc <usart_init_rs232+0x48>)
  40079e:	4798      	blx	r3

	ul_reg_val = 0;
  4007a0:	2200      	movs	r2, #0
  4007a2:	4b0f      	ldr	r3, [pc, #60]	; (4007e0 <usart_init_rs232+0x4c>)
  4007a4:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4007a6:	b19c      	cbz	r4, 4007d0 <usart_init_rs232+0x3c>
  4007a8:	4632      	mov	r2, r6
  4007aa:	6821      	ldr	r1, [r4, #0]
  4007ac:	4628      	mov	r0, r5
  4007ae:	4b0d      	ldr	r3, [pc, #52]	; (4007e4 <usart_init_rs232+0x50>)
  4007b0:	4798      	blx	r3
  4007b2:	4602      	mov	r2, r0
  4007b4:	b970      	cbnz	r0, 4007d4 <usart_init_rs232+0x40>
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4007b6:	6861      	ldr	r1, [r4, #4]
  4007b8:	68a3      	ldr	r3, [r4, #8]
  4007ba:	4319      	orrs	r1, r3
  4007bc:	6923      	ldr	r3, [r4, #16]
  4007be:	4319      	orrs	r1, r3
  4007c0:	68e3      	ldr	r3, [r4, #12]
  4007c2:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4007c4:	4906      	ldr	r1, [pc, #24]	; (4007e0 <usart_init_rs232+0x4c>)
  4007c6:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  4007c8:	6869      	ldr	r1, [r5, #4]
  4007ca:	430b      	orrs	r3, r1
  4007cc:	606b      	str	r3, [r5, #4]

	return 0;
  4007ce:	e002      	b.n	4007d6 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  4007d0:	2201      	movs	r2, #1
  4007d2:	e000      	b.n	4007d6 <usart_init_rs232+0x42>
  4007d4:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  4007d6:	4610      	mov	r0, r2
  4007d8:	bd70      	pop	{r4, r5, r6, pc}
  4007da:	bf00      	nop
  4007dc:	0040076d 	.word	0x0040076d
  4007e0:	20400938 	.word	0x20400938
  4007e4:	0040070d 	.word	0x0040070d

004007e8 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  4007e8:	2340      	movs	r3, #64	; 0x40
  4007ea:	6003      	str	r3, [r0, #0]
  4007ec:	4770      	bx	lr
  4007ee:	bf00      	nop

004007f0 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  4007f0:	2310      	movs	r3, #16
  4007f2:	6003      	str	r3, [r0, #0]
  4007f4:	4770      	bx	lr
  4007f6:	bf00      	nop

004007f8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4007f8:	6943      	ldr	r3, [r0, #20]
  4007fa:	f013 0f02 	tst.w	r3, #2
  4007fe:	d004      	beq.n	40080a <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  400800:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400804:	61c1      	str	r1, [r0, #28]
	return 0;
  400806:	2000      	movs	r0, #0
  400808:	4770      	bx	lr
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  40080a:	2001      	movs	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  40080c:	4770      	bx	lr
  40080e:	bf00      	nop

00400810 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400810:	6943      	ldr	r3, [r0, #20]
  400812:	f013 0f01 	tst.w	r3, #1
  400816:	d005      	beq.n	400824 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400818:	6983      	ldr	r3, [r0, #24]
  40081a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40081e:	600b      	str	r3, [r1, #0]

	return 0;
  400820:	2000      	movs	r0, #0
  400822:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  400824:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  400826:	4770      	bx	lr

00400828 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400828:	e7fe      	b.n	400828 <Dummy_Handler>
  40082a:	bf00      	nop

0040082c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40082c:	b500      	push	{lr}
  40082e:	b083      	sub	sp, #12

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  400830:	4b27      	ldr	r3, [pc, #156]	; (4008d0 <Reset_Handler+0xa4>)
  400832:	4a28      	ldr	r2, [pc, #160]	; (4008d4 <Reset_Handler+0xa8>)
  400834:	429a      	cmp	r2, r3
  400836:	d003      	beq.n	400840 <Reset_Handler+0x14>
                for (; pDest < &_erelocate;) {
  400838:	4b27      	ldr	r3, [pc, #156]	; (4008d8 <Reset_Handler+0xac>)
  40083a:	4a25      	ldr	r2, [pc, #148]	; (4008d0 <Reset_Handler+0xa4>)
  40083c:	429a      	cmp	r2, r3
  40083e:	d304      	bcc.n	40084a <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400840:	4b26      	ldr	r3, [pc, #152]	; (4008dc <Reset_Handler+0xb0>)
  400842:	4a27      	ldr	r2, [pc, #156]	; (4008e0 <Reset_Handler+0xb4>)
  400844:	429a      	cmp	r2, r3
  400846:	d30f      	bcc.n	400868 <Reset_Handler+0x3c>
  400848:	e01a      	b.n	400880 <Reset_Handler+0x54>
  40084a:	4921      	ldr	r1, [pc, #132]	; (4008d0 <Reset_Handler+0xa4>)
  40084c:	4b25      	ldr	r3, [pc, #148]	; (4008e4 <Reset_Handler+0xb8>)
  40084e:	1a5b      	subs	r3, r3, r1
  400850:	f023 0303 	bic.w	r3, r3, #3
  400854:	3304      	adds	r3, #4
  400856:	4a1f      	ldr	r2, [pc, #124]	; (4008d4 <Reset_Handler+0xa8>)
  400858:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  40085a:	f852 0b04 	ldr.w	r0, [r2], #4
  40085e:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  400862:	429a      	cmp	r2, r3
  400864:	d1f9      	bne.n	40085a <Reset_Handler+0x2e>
  400866:	e7eb      	b.n	400840 <Reset_Handler+0x14>
  400868:	4b1f      	ldr	r3, [pc, #124]	; (4008e8 <Reset_Handler+0xbc>)
  40086a:	4a20      	ldr	r2, [pc, #128]	; (4008ec <Reset_Handler+0xc0>)
  40086c:	1ad2      	subs	r2, r2, r3
  40086e:	f022 0203 	bic.w	r2, r2, #3
  400872:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400874:	3b04      	subs	r3, #4
                *pDest++ = 0;
  400876:	2100      	movs	r1, #0
  400878:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40087c:	4293      	cmp	r3, r2
  40087e:	d1fb      	bne.n	400878 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400880:	4a1b      	ldr	r2, [pc, #108]	; (4008f0 <Reset_Handler+0xc4>)
  400882:	4b1c      	ldr	r3, [pc, #112]	; (4008f4 <Reset_Handler+0xc8>)
  400884:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400888:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40088a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40088e:	fab3 f383 	clz	r3, r3
  400892:	095b      	lsrs	r3, r3, #5
  400894:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400896:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400898:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40089c:	2200      	movs	r2, #0
  40089e:	4b16      	ldr	r3, [pc, #88]	; (4008f8 <Reset_Handler+0xcc>)
  4008a0:	701a      	strb	r2, [r3, #0]
	return flags;
  4008a2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008a4:	4a15      	ldr	r2, [pc, #84]	; (4008fc <Reset_Handler+0xd0>)
  4008a6:	6813      	ldr	r3, [r2, #0]
  4008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008ac:	6013      	str	r3, [r2, #0]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008ae:	f3bf 8f4f 	dsb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
  4008b2:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008b6:	b129      	cbz	r1, 4008c4 <Reset_Handler+0x98>
		cpu_irq_enable();
  4008b8:	2201      	movs	r2, #1
  4008ba:	4b0f      	ldr	r3, [pc, #60]	; (4008f8 <Reset_Handler+0xcc>)
  4008bc:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4008be:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4008c2:	b662      	cpsie	i
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  4008c4:	4b0e      	ldr	r3, [pc, #56]	; (400900 <Reset_Handler+0xd4>)
  4008c6:	4798      	blx	r3

        /* Branch to main function */
        main();
  4008c8:	4b0e      	ldr	r3, [pc, #56]	; (400904 <Reset_Handler+0xd8>)
  4008ca:	4798      	blx	r3
  4008cc:	e7fe      	b.n	4008cc <Reset_Handler+0xa0>
  4008ce:	bf00      	nop
  4008d0:	20400000 	.word	0x20400000
  4008d4:	00409a80 	.word	0x00409a80
  4008d8:	204008ac 	.word	0x204008ac
  4008dc:	20400c04 	.word	0x20400c04
  4008e0:	204008ac 	.word	0x204008ac
  4008e4:	204008ab 	.word	0x204008ab
  4008e8:	204008b0 	.word	0x204008b0
  4008ec:	20400c07 	.word	0x20400c07
  4008f0:	e000ed00 	.word	0xe000ed00
  4008f4:	00400000 	.word	0x00400000
  4008f8:	20400000 	.word	0x20400000
  4008fc:	e000ed88 	.word	0xe000ed88
  400900:	00402f1d 	.word	0x00402f1d
  400904:	00402cf9 	.word	0x00402cf9

00400908 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400908:	4b3c      	ldr	r3, [pc, #240]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  40090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40090c:	f003 0303 	and.w	r3, r3, #3
  400910:	2b01      	cmp	r3, #1
  400912:	d00f      	beq.n	400934 <SystemCoreClockUpdate+0x2c>
  400914:	b113      	cbz	r3, 40091c <SystemCoreClockUpdate+0x14>
  400916:	2b02      	cmp	r3, #2
  400918:	d029      	beq.n	40096e <SystemCoreClockUpdate+0x66>
  40091a:	e057      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40091c:	4b38      	ldr	r3, [pc, #224]	; (400a00 <SystemCoreClockUpdate+0xf8>)
  40091e:	695b      	ldr	r3, [r3, #20]
  400920:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400924:	bf14      	ite	ne
  400926:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40092a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40092e:	4b35      	ldr	r3, [pc, #212]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400930:	601a      	str	r2, [r3, #0]
  400932:	e04b      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400934:	4b31      	ldr	r3, [pc, #196]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400936:	6a1b      	ldr	r3, [r3, #32]
  400938:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40093c:	d003      	beq.n	400946 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40093e:	4a32      	ldr	r2, [pc, #200]	; (400a08 <SystemCoreClockUpdate+0x100>)
  400940:	4b30      	ldr	r3, [pc, #192]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400942:	601a      	str	r2, [r3, #0]
  400944:	e042      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400946:	4a31      	ldr	r2, [pc, #196]	; (400a0c <SystemCoreClockUpdate+0x104>)
  400948:	4b2e      	ldr	r3, [pc, #184]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40094a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40094c:	4b2b      	ldr	r3, [pc, #172]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  40094e:	6a1b      	ldr	r3, [r3, #32]
  400950:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400954:	2b10      	cmp	r3, #16
  400956:	d002      	beq.n	40095e <SystemCoreClockUpdate+0x56>
  400958:	2b20      	cmp	r3, #32
  40095a:	d004      	beq.n	400966 <SystemCoreClockUpdate+0x5e>
  40095c:	e036      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  40095e:	4a2c      	ldr	r2, [pc, #176]	; (400a10 <SystemCoreClockUpdate+0x108>)
  400960:	4b28      	ldr	r3, [pc, #160]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400962:	601a      	str	r2, [r3, #0]
          break;
  400964:	e032      	b.n	4009cc <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  400966:	4a28      	ldr	r2, [pc, #160]	; (400a08 <SystemCoreClockUpdate+0x100>)
  400968:	4b26      	ldr	r3, [pc, #152]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40096a:	601a      	str	r2, [r3, #0]
          break;
  40096c:	e02e      	b.n	4009cc <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40096e:	4b23      	ldr	r3, [pc, #140]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400970:	6a1b      	ldr	r3, [r3, #32]
  400972:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400976:	d003      	beq.n	400980 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400978:	4a23      	ldr	r2, [pc, #140]	; (400a08 <SystemCoreClockUpdate+0x100>)
  40097a:	4b22      	ldr	r3, [pc, #136]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40097c:	601a      	str	r2, [r3, #0]
  40097e:	e012      	b.n	4009a6 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400980:	4a22      	ldr	r2, [pc, #136]	; (400a0c <SystemCoreClockUpdate+0x104>)
  400982:	4b20      	ldr	r3, [pc, #128]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400984:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400986:	4b1d      	ldr	r3, [pc, #116]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400988:	6a1b      	ldr	r3, [r3, #32]
  40098a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40098e:	2b10      	cmp	r3, #16
  400990:	d002      	beq.n	400998 <SystemCoreClockUpdate+0x90>
  400992:	2b20      	cmp	r3, #32
  400994:	d004      	beq.n	4009a0 <SystemCoreClockUpdate+0x98>
  400996:	e006      	b.n	4009a6 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  400998:	4a1d      	ldr	r2, [pc, #116]	; (400a10 <SystemCoreClockUpdate+0x108>)
  40099a:	4b1a      	ldr	r3, [pc, #104]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40099c:	601a      	str	r2, [r3, #0]
          break;
  40099e:	e002      	b.n	4009a6 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4009a0:	4a19      	ldr	r2, [pc, #100]	; (400a08 <SystemCoreClockUpdate+0x100>)
  4009a2:	4b18      	ldr	r3, [pc, #96]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009a4:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4009a6:	4b15      	ldr	r3, [pc, #84]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009aa:	f003 0303 	and.w	r3, r3, #3
  4009ae:	2b02      	cmp	r3, #2
  4009b0:	d10c      	bne.n	4009cc <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009b2:	4a12      	ldr	r2, [pc, #72]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4009b8:	4812      	ldr	r0, [pc, #72]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009ba:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4009be:	6803      	ldr	r3, [r0, #0]
  4009c0:	fb01 3303 	mla	r3, r1, r3, r3
  4009c4:	b2d2      	uxtb	r2, r2
  4009c6:	fbb3 f3f2 	udiv	r3, r3, r2
  4009ca:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4009cc:	4b0b      	ldr	r3, [pc, #44]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009d4:	2b70      	cmp	r3, #112	; 0x70
  4009d6:	d107      	bne.n	4009e8 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  4009d8:	4a0a      	ldr	r2, [pc, #40]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009da:	6813      	ldr	r3, [r2, #0]
  4009dc:	490d      	ldr	r1, [pc, #52]	; (400a14 <SystemCoreClockUpdate+0x10c>)
  4009de:	fba1 1303 	umull	r1, r3, r1, r3
  4009e2:	085b      	lsrs	r3, r3, #1
  4009e4:	6013      	str	r3, [r2, #0]
  4009e6:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4009e8:	4b04      	ldr	r3, [pc, #16]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4009ec:	4905      	ldr	r1, [pc, #20]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009ee:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4009f2:	680b      	ldr	r3, [r1, #0]
  4009f4:	40d3      	lsrs	r3, r2
  4009f6:	600b      	str	r3, [r1, #0]
  4009f8:	4770      	bx	lr
  4009fa:	bf00      	nop
  4009fc:	400e0600 	.word	0x400e0600
  400a00:	400e1810 	.word	0x400e1810
  400a04:	20400004 	.word	0x20400004
  400a08:	00b71b00 	.word	0x00b71b00
  400a0c:	003d0900 	.word	0x003d0900
  400a10:	007a1200 	.word	0x007a1200
  400a14:	aaaaaaab 	.word	0xaaaaaaab

00400a18 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400a18:	4b16      	ldr	r3, [pc, #88]	; (400a74 <system_init_flash+0x5c>)
  400a1a:	4298      	cmp	r0, r3
  400a1c:	d804      	bhi.n	400a28 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a22:	4b15      	ldr	r3, [pc, #84]	; (400a78 <system_init_flash+0x60>)
  400a24:	601a      	str	r2, [r3, #0]
  400a26:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400a28:	4b14      	ldr	r3, [pc, #80]	; (400a7c <system_init_flash+0x64>)
  400a2a:	4298      	cmp	r0, r3
  400a2c:	d803      	bhi.n	400a36 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a2e:	4a14      	ldr	r2, [pc, #80]	; (400a80 <system_init_flash+0x68>)
  400a30:	4b11      	ldr	r3, [pc, #68]	; (400a78 <system_init_flash+0x60>)
  400a32:	601a      	str	r2, [r3, #0]
  400a34:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400a36:	4b13      	ldr	r3, [pc, #76]	; (400a84 <system_init_flash+0x6c>)
  400a38:	4298      	cmp	r0, r3
  400a3a:	d803      	bhi.n	400a44 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a3c:	4a12      	ldr	r2, [pc, #72]	; (400a88 <system_init_flash+0x70>)
  400a3e:	4b0e      	ldr	r3, [pc, #56]	; (400a78 <system_init_flash+0x60>)
  400a40:	601a      	str	r2, [r3, #0]
  400a42:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a44:	4b11      	ldr	r3, [pc, #68]	; (400a8c <system_init_flash+0x74>)
  400a46:	4298      	cmp	r0, r3
  400a48:	d803      	bhi.n	400a52 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a4a:	4a11      	ldr	r2, [pc, #68]	; (400a90 <system_init_flash+0x78>)
  400a4c:	4b0a      	ldr	r3, [pc, #40]	; (400a78 <system_init_flash+0x60>)
  400a4e:	601a      	str	r2, [r3, #0]
  400a50:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a52:	4b10      	ldr	r3, [pc, #64]	; (400a94 <system_init_flash+0x7c>)
  400a54:	4298      	cmp	r0, r3
  400a56:	d804      	bhi.n	400a62 <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a58:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400a5c:	4b06      	ldr	r3, [pc, #24]	; (400a78 <system_init_flash+0x60>)
  400a5e:	601a      	str	r2, [r3, #0]
  400a60:	4770      	bx	lr
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400a62:	4b0d      	ldr	r3, [pc, #52]	; (400a98 <system_init_flash+0x80>)
  400a64:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a66:	bf94      	ite	ls
  400a68:	4a0c      	ldrls	r2, [pc, #48]	; (400a9c <system_init_flash+0x84>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400a6a:	4a0d      	ldrhi	r2, [pc, #52]	; (400aa0 <system_init_flash+0x88>)
  400a6c:	4b02      	ldr	r3, [pc, #8]	; (400a78 <system_init_flash+0x60>)
  400a6e:	601a      	str	r2, [r3, #0]
  400a70:	4770      	bx	lr
  400a72:	bf00      	nop
  400a74:	015ef3bf 	.word	0x015ef3bf
  400a78:	400e0c00 	.word	0x400e0c00
  400a7c:	02bde77f 	.word	0x02bde77f
  400a80:	04000100 	.word	0x04000100
  400a84:	041cdb3f 	.word	0x041cdb3f
  400a88:	04000200 	.word	0x04000200
  400a8c:	057bceff 	.word	0x057bceff
  400a90:	04000300 	.word	0x04000300
  400a94:	06dac2bf 	.word	0x06dac2bf
  400a98:	0839b67f 	.word	0x0839b67f
  400a9c:	04000500 	.word	0x04000500
  400aa0:	04000600 	.word	0x04000600

00400aa4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400aa4:	4b09      	ldr	r3, [pc, #36]	; (400acc <_sbrk+0x28>)
  400aa6:	681b      	ldr	r3, [r3, #0]
  400aa8:	b913      	cbnz	r3, 400ab0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400aaa:	4a09      	ldr	r2, [pc, #36]	; (400ad0 <_sbrk+0x2c>)
  400aac:	4b07      	ldr	r3, [pc, #28]	; (400acc <_sbrk+0x28>)
  400aae:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400ab0:	4b06      	ldr	r3, [pc, #24]	; (400acc <_sbrk+0x28>)
  400ab2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400ab4:	181a      	adds	r2, r3, r0
  400ab6:	4907      	ldr	r1, [pc, #28]	; (400ad4 <_sbrk+0x30>)
  400ab8:	4291      	cmp	r1, r2
  400aba:	db04      	blt.n	400ac6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400abc:	4610      	mov	r0, r2
  400abe:	4a03      	ldr	r2, [pc, #12]	; (400acc <_sbrk+0x28>)
  400ac0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400ac2:	4618      	mov	r0, r3
  400ac4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400ac6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400aca:	4770      	bx	lr
  400acc:	2040093c 	.word	0x2040093c
  400ad0:	20402e08 	.word	0x20402e08
  400ad4:	2045fffc 	.word	0x2045fffc

00400ad8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400ad8:	f04f 30ff 	mov.w	r0, #4294967295
  400adc:	4770      	bx	lr
  400ade:	bf00      	nop

00400ae0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400ae4:	604b      	str	r3, [r1, #4]

	return 0;
}
  400ae6:	2000      	movs	r0, #0
  400ae8:	4770      	bx	lr
  400aea:	bf00      	nop

00400aec <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400aec:	2001      	movs	r0, #1
  400aee:	4770      	bx	lr

00400af0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400af0:	2000      	movs	r0, #0
  400af2:	4770      	bx	lr

00400af4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400af4:	f100 0308 	add.w	r3, r0, #8
  400af8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400afa:	f04f 32ff 	mov.w	r2, #4294967295
  400afe:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b00:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b02:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400b04:	2300      	movs	r3, #0
  400b06:	6003      	str	r3, [r0, #0]
  400b08:	4770      	bx	lr
  400b0a:	bf00      	nop

00400b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400b0c:	2300      	movs	r3, #0
  400b0e:	6103      	str	r3, [r0, #16]
  400b10:	4770      	bx	lr
  400b12:	bf00      	nop

00400b14 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400b14:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400b16:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400b18:	689a      	ldr	r2, [r3, #8]
  400b1a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400b1c:	689a      	ldr	r2, [r3, #8]
  400b1e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400b20:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b22:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b24:	6803      	ldr	r3, [r0, #0]
  400b26:	3301      	adds	r3, #1
  400b28:	6003      	str	r3, [r0, #0]
  400b2a:	4770      	bx	lr

00400b2c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400b2c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400b2e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400b30:	f1b5 3fff 	cmp.w	r5, #4294967295
  400b34:	d101      	bne.n	400b3a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400b36:	6902      	ldr	r2, [r0, #16]
  400b38:	e007      	b.n	400b4a <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400b3a:	f100 0208 	add.w	r2, r0, #8
  400b3e:	e000      	b.n	400b42 <vListInsert+0x16>
  400b40:	461a      	mov	r2, r3
  400b42:	6853      	ldr	r3, [r2, #4]
  400b44:	681c      	ldr	r4, [r3, #0]
  400b46:	42a5      	cmp	r5, r4
  400b48:	d2fa      	bcs.n	400b40 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400b4a:	6853      	ldr	r3, [r2, #4]
  400b4c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400b4e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400b50:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400b52:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400b54:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400b56:	6803      	ldr	r3, [r0, #0]
  400b58:	3301      	adds	r3, #1
  400b5a:	6003      	str	r3, [r0, #0]
}
  400b5c:	bc30      	pop	{r4, r5}
  400b5e:	4770      	bx	lr

00400b60 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400b60:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400b62:	6842      	ldr	r2, [r0, #4]
  400b64:	6881      	ldr	r1, [r0, #8]
  400b66:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400b68:	6882      	ldr	r2, [r0, #8]
  400b6a:	6841      	ldr	r1, [r0, #4]
  400b6c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400b6e:	685a      	ldr	r2, [r3, #4]
  400b70:	4290      	cmp	r0, r2
  400b72:	d101      	bne.n	400b78 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400b74:	6882      	ldr	r2, [r0, #8]
  400b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400b78:	2200      	movs	r2, #0
  400b7a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400b7c:	6818      	ldr	r0, [r3, #0]
  400b7e:	3801      	subs	r0, #1
  400b80:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400b82:	4770      	bx	lr

00400b84 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400b84:	4b0d      	ldr	r3, [pc, #52]	; (400bbc <prvTaskExitError+0x38>)
  400b86:	681b      	ldr	r3, [r3, #0]
  400b88:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b8c:	d00a      	beq.n	400ba4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400b8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b92:	b672      	cpsid	i
  400b94:	f383 8811 	msr	BASEPRI, r3
  400b98:	f3bf 8f6f 	isb	sy
  400b9c:	f3bf 8f4f 	dsb	sy
  400ba0:	b662      	cpsie	i
  400ba2:	e7fe      	b.n	400ba2 <prvTaskExitError+0x1e>
  400ba4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ba8:	b672      	cpsid	i
  400baa:	f383 8811 	msr	BASEPRI, r3
  400bae:	f3bf 8f6f 	isb	sy
  400bb2:	f3bf 8f4f 	dsb	sy
  400bb6:	b662      	cpsie	i
  400bb8:	e7fe      	b.n	400bb8 <prvTaskExitError+0x34>
  400bba:	bf00      	nop
  400bbc:	20400008 	.word	0x20400008

00400bc0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400bc0:	4806      	ldr	r0, [pc, #24]	; (400bdc <prvPortStartFirstTask+0x1c>)
  400bc2:	6800      	ldr	r0, [r0, #0]
  400bc4:	6800      	ldr	r0, [r0, #0]
  400bc6:	f380 8808 	msr	MSP, r0
  400bca:	b662      	cpsie	i
  400bcc:	b661      	cpsie	f
  400bce:	f3bf 8f4f 	dsb	sy
  400bd2:	f3bf 8f6f 	isb	sy
  400bd6:	df00      	svc	0
  400bd8:	bf00      	nop
  400bda:	0000      	.short	0x0000
  400bdc:	e000ed08 	.word	0xe000ed08

00400be0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400be0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400bf0 <vPortEnableVFP+0x10>
  400be4:	6801      	ldr	r1, [r0, #0]
  400be6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400bea:	6001      	str	r1, [r0, #0]
  400bec:	4770      	bx	lr
  400bee:	0000      	.short	0x0000
  400bf0:	e000ed88 	.word	0xe000ed88

00400bf4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400bf8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400bfc:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400c00:	4b05      	ldr	r3, [pc, #20]	; (400c18 <pxPortInitialiseStack+0x24>)
  400c02:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400c06:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400c0a:	f06f 0302 	mvn.w	r3, #2
  400c0e:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  400c12:	3844      	subs	r0, #68	; 0x44
  400c14:	4770      	bx	lr
  400c16:	bf00      	nop
  400c18:	00400b85 	.word	0x00400b85

00400c1c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  400c1c:	4b06      	ldr	r3, [pc, #24]	; (400c38 <pxCurrentTCBConst2>)
  400c1e:	6819      	ldr	r1, [r3, #0]
  400c20:	6808      	ldr	r0, [r1, #0]
  400c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c26:	f380 8809 	msr	PSP, r0
  400c2a:	f3bf 8f6f 	isb	sy
  400c2e:	f04f 0000 	mov.w	r0, #0
  400c32:	f380 8811 	msr	BASEPRI, r0
  400c36:	4770      	bx	lr

00400c38 <pxCurrentTCBConst2>:
  400c38:	204009ec 	.word	0x204009ec
  400c3c:	4770      	bx	lr
  400c3e:	bf00      	nop

00400c40 <vPortEnterCritical>:
  400c40:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c44:	b672      	cpsid	i
  400c46:	f383 8811 	msr	BASEPRI, r3
  400c4a:	f3bf 8f6f 	isb	sy
  400c4e:	f3bf 8f4f 	dsb	sy
  400c52:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400c54:	4a0b      	ldr	r2, [pc, #44]	; (400c84 <vPortEnterCritical+0x44>)
  400c56:	6813      	ldr	r3, [r2, #0]
  400c58:	3301      	adds	r3, #1
  400c5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400c5c:	2b01      	cmp	r3, #1
  400c5e:	d10f      	bne.n	400c80 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400c60:	4b09      	ldr	r3, [pc, #36]	; (400c88 <vPortEnterCritical+0x48>)
  400c62:	681b      	ldr	r3, [r3, #0]
  400c64:	f013 0fff 	tst.w	r3, #255	; 0xff
  400c68:	d00a      	beq.n	400c80 <vPortEnterCritical+0x40>
  400c6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c6e:	b672      	cpsid	i
  400c70:	f383 8811 	msr	BASEPRI, r3
  400c74:	f3bf 8f6f 	isb	sy
  400c78:	f3bf 8f4f 	dsb	sy
  400c7c:	b662      	cpsie	i
  400c7e:	e7fe      	b.n	400c7e <vPortEnterCritical+0x3e>
  400c80:	4770      	bx	lr
  400c82:	bf00      	nop
  400c84:	20400008 	.word	0x20400008
  400c88:	e000ed04 	.word	0xe000ed04

00400c8c <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400c8c:	4b0a      	ldr	r3, [pc, #40]	; (400cb8 <vPortExitCritical+0x2c>)
  400c8e:	681b      	ldr	r3, [r3, #0]
  400c90:	b953      	cbnz	r3, 400ca8 <vPortExitCritical+0x1c>
  400c92:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c96:	b672      	cpsid	i
  400c98:	f383 8811 	msr	BASEPRI, r3
  400c9c:	f3bf 8f6f 	isb	sy
  400ca0:	f3bf 8f4f 	dsb	sy
  400ca4:	b662      	cpsie	i
  400ca6:	e7fe      	b.n	400ca6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400ca8:	3b01      	subs	r3, #1
  400caa:	4a03      	ldr	r2, [pc, #12]	; (400cb8 <vPortExitCritical+0x2c>)
  400cac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400cae:	b90b      	cbnz	r3, 400cb4 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400cb0:	f383 8811 	msr	BASEPRI, r3
  400cb4:	4770      	bx	lr
  400cb6:	bf00      	nop
  400cb8:	20400008 	.word	0x20400008

00400cbc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400cbc:	f3ef 8009 	mrs	r0, PSP
  400cc0:	f3bf 8f6f 	isb	sy
  400cc4:	4b15      	ldr	r3, [pc, #84]	; (400d1c <pxCurrentTCBConst>)
  400cc6:	681a      	ldr	r2, [r3, #0]
  400cc8:	f01e 0f10 	tst.w	lr, #16
  400ccc:	bf08      	it	eq
  400cce:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400cd2:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cd6:	6010      	str	r0, [r2, #0]
  400cd8:	f84d 3d04 	str.w	r3, [sp, #-4]!
  400cdc:	f04f 0080 	mov.w	r0, #128	; 0x80
  400ce0:	b672      	cpsid	i
  400ce2:	f380 8811 	msr	BASEPRI, r0
  400ce6:	f3bf 8f4f 	dsb	sy
  400cea:	f3bf 8f6f 	isb	sy
  400cee:	b662      	cpsie	i
  400cf0:	f001 f922 	bl	401f38 <vTaskSwitchContext>
  400cf4:	f04f 0000 	mov.w	r0, #0
  400cf8:	f380 8811 	msr	BASEPRI, r0
  400cfc:	bc08      	pop	{r3}
  400cfe:	6819      	ldr	r1, [r3, #0]
  400d00:	6808      	ldr	r0, [r1, #0]
  400d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d06:	f01e 0f10 	tst.w	lr, #16
  400d0a:	bf08      	it	eq
  400d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400d10:	f380 8809 	msr	PSP, r0
  400d14:	f3bf 8f6f 	isb	sy
  400d18:	4770      	bx	lr
  400d1a:	bf00      	nop

00400d1c <pxCurrentTCBConst>:
  400d1c:	204009ec 	.word	0x204009ec
  400d20:	4770      	bx	lr
  400d22:	bf00      	nop

00400d24 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400d24:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400d26:	f3ef 8311 	mrs	r3, BASEPRI
  400d2a:	f04f 0280 	mov.w	r2, #128	; 0x80
  400d2e:	b672      	cpsid	i
  400d30:	f382 8811 	msr	BASEPRI, r2
  400d34:	f3bf 8f6f 	isb	sy
  400d38:	f3bf 8f4f 	dsb	sy
  400d3c:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400d3e:	4b05      	ldr	r3, [pc, #20]	; (400d54 <SysTick_Handler+0x30>)
  400d40:	4798      	blx	r3
  400d42:	b118      	cbz	r0, 400d4c <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d48:	4b03      	ldr	r3, [pc, #12]	; (400d58 <SysTick_Handler+0x34>)
  400d4a:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400d4c:	2300      	movs	r3, #0
  400d4e:	f383 8811 	msr	BASEPRI, r3
  400d52:	bd08      	pop	{r3, pc}
  400d54:	00401b0d 	.word	0x00401b0d
  400d58:	e000ed04 	.word	0xe000ed04

00400d5c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400d5c:	4a03      	ldr	r2, [pc, #12]	; (400d6c <vPortSetupTimerInterrupt+0x10>)
  400d5e:	4b04      	ldr	r3, [pc, #16]	; (400d70 <vPortSetupTimerInterrupt+0x14>)
  400d60:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400d62:	2207      	movs	r2, #7
  400d64:	3b04      	subs	r3, #4
  400d66:	601a      	str	r2, [r3, #0]
  400d68:	4770      	bx	lr
  400d6a:	bf00      	nop
  400d6c:	000927bf 	.word	0x000927bf
  400d70:	e000e014 	.word	0xe000e014

00400d74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400d74:	b500      	push	{lr}
  400d76:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400d78:	4b25      	ldr	r3, [pc, #148]	; (400e10 <xPortStartScheduler+0x9c>)
  400d7a:	781a      	ldrb	r2, [r3, #0]
  400d7c:	b2d2      	uxtb	r2, r2
  400d7e:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400d80:	22ff      	movs	r2, #255	; 0xff
  400d82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400d84:	781b      	ldrb	r3, [r3, #0]
  400d86:	b2db      	uxtb	r3, r3
  400d88:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400d8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400d94:	4a1f      	ldr	r2, [pc, #124]	; (400e14 <xPortStartScheduler+0xa0>)
  400d96:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400d98:	2207      	movs	r2, #7
  400d9a:	4b1f      	ldr	r3, [pc, #124]	; (400e18 <xPortStartScheduler+0xa4>)
  400d9c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400d9e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400da2:	f013 0f80 	tst.w	r3, #128	; 0x80
  400da6:	d010      	beq.n	400dca <xPortStartScheduler+0x56>
  400da8:	2206      	movs	r2, #6
  400daa:	e000      	b.n	400dae <xPortStartScheduler+0x3a>
  400dac:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400dae:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400db2:	005b      	lsls	r3, r3, #1
  400db4:	b2db      	uxtb	r3, r3
  400db6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400dba:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400dbe:	1e51      	subs	r1, r2, #1
  400dc0:	f013 0f80 	tst.w	r3, #128	; 0x80
  400dc4:	d1f2      	bne.n	400dac <xPortStartScheduler+0x38>
  400dc6:	4b14      	ldr	r3, [pc, #80]	; (400e18 <xPortStartScheduler+0xa4>)
  400dc8:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400dca:	4a13      	ldr	r2, [pc, #76]	; (400e18 <xPortStartScheduler+0xa4>)
  400dcc:	6813      	ldr	r3, [r2, #0]
  400dce:	021b      	lsls	r3, r3, #8
  400dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400dd4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  400dd6:	9b01      	ldr	r3, [sp, #4]
  400dd8:	b2db      	uxtb	r3, r3
  400dda:	4a0d      	ldr	r2, [pc, #52]	; (400e10 <xPortStartScheduler+0x9c>)
  400ddc:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  400dde:	4b0f      	ldr	r3, [pc, #60]	; (400e1c <xPortStartScheduler+0xa8>)
  400de0:	681a      	ldr	r2, [r3, #0]
  400de2:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400de6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400de8:	681a      	ldr	r2, [r3, #0]
  400dea:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  400dee:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  400df0:	4b0b      	ldr	r3, [pc, #44]	; (400e20 <xPortStartScheduler+0xac>)
  400df2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400df4:	2200      	movs	r2, #0
  400df6:	4b0b      	ldr	r3, [pc, #44]	; (400e24 <xPortStartScheduler+0xb0>)
  400df8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400dfa:	4b0b      	ldr	r3, [pc, #44]	; (400e28 <xPortStartScheduler+0xb4>)
  400dfc:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  400dfe:	4a0b      	ldr	r2, [pc, #44]	; (400e2c <xPortStartScheduler+0xb8>)
  400e00:	6813      	ldr	r3, [r2, #0]
  400e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400e08:	4b09      	ldr	r3, [pc, #36]	; (400e30 <xPortStartScheduler+0xbc>)
  400e0a:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400e0c:	4b09      	ldr	r3, [pc, #36]	; (400e34 <xPortStartScheduler+0xc0>)
  400e0e:	4798      	blx	r3
  400e10:	e000e400 	.word	0xe000e400
  400e14:	20400940 	.word	0x20400940
  400e18:	20400944 	.word	0x20400944
  400e1c:	e000ed20 	.word	0xe000ed20
  400e20:	00400d5d 	.word	0x00400d5d
  400e24:	20400008 	.word	0x20400008
  400e28:	00400be1 	.word	0x00400be1
  400e2c:	e000ef34 	.word	0xe000ef34
  400e30:	00400bc1 	.word	0x00400bc1
  400e34:	00400b85 	.word	0x00400b85

00400e38 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400e38:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400e3c:	2b0f      	cmp	r3, #15
  400e3e:	d911      	bls.n	400e64 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400e40:	4a12      	ldr	r2, [pc, #72]	; (400e8c <vPortValidateInterruptPriority+0x54>)
  400e42:	5c9b      	ldrb	r3, [r3, r2]
  400e44:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400e46:	4a12      	ldr	r2, [pc, #72]	; (400e90 <vPortValidateInterruptPriority+0x58>)
  400e48:	7812      	ldrb	r2, [r2, #0]
  400e4a:	429a      	cmp	r2, r3
  400e4c:	d90a      	bls.n	400e64 <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400e4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e52:	b672      	cpsid	i
  400e54:	f383 8811 	msr	BASEPRI, r3
  400e58:	f3bf 8f6f 	isb	sy
  400e5c:	f3bf 8f4f 	dsb	sy
  400e60:	b662      	cpsie	i
  400e62:	e7fe      	b.n	400e62 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400e64:	4b0b      	ldr	r3, [pc, #44]	; (400e94 <vPortValidateInterruptPriority+0x5c>)
  400e66:	681b      	ldr	r3, [r3, #0]
  400e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400e6c:	4a0a      	ldr	r2, [pc, #40]	; (400e98 <vPortValidateInterruptPriority+0x60>)
  400e6e:	6812      	ldr	r2, [r2, #0]
  400e70:	4293      	cmp	r3, r2
  400e72:	d90a      	bls.n	400e8a <vPortValidateInterruptPriority+0x52>
  400e74:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e78:	b672      	cpsid	i
  400e7a:	f383 8811 	msr	BASEPRI, r3
  400e7e:	f3bf 8f6f 	isb	sy
  400e82:	f3bf 8f4f 	dsb	sy
  400e86:	b662      	cpsie	i
  400e88:	e7fe      	b.n	400e88 <vPortValidateInterruptPriority+0x50>
  400e8a:	4770      	bx	lr
  400e8c:	e000e3f0 	.word	0xe000e3f0
  400e90:	20400940 	.word	0x20400940
  400e94:	e000ed0c 	.word	0xe000ed0c
  400e98:	20400944 	.word	0x20400944

00400e9c <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400e9c:	b510      	push	{r4, lr}
  400e9e:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  400ea0:	4b06      	ldr	r3, [pc, #24]	; (400ebc <pvPortMalloc+0x20>)
  400ea2:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  400ea4:	4620      	mov	r0, r4
  400ea6:	4b06      	ldr	r3, [pc, #24]	; (400ec0 <pvPortMalloc+0x24>)
  400ea8:	4798      	blx	r3
  400eaa:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  400eac:	4b05      	ldr	r3, [pc, #20]	; (400ec4 <pvPortMalloc+0x28>)
  400eae:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400eb0:	b90c      	cbnz	r4, 400eb6 <pvPortMalloc+0x1a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
  400eb2:	4b05      	ldr	r3, [pc, #20]	; (400ec8 <pvPortMalloc+0x2c>)
  400eb4:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  400eb6:	4620      	mov	r0, r4
  400eb8:	bd10      	pop	{r4, pc}
  400eba:	bf00      	nop
  400ebc:	00401ae5 	.word	0x00401ae5
  400ec0:	00402f95 	.word	0x00402f95
  400ec4:	00401c55 	.word	0x00401c55
  400ec8:	00402ce1 	.word	0x00402ce1

00400ecc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  400ecc:	b148      	cbz	r0, 400ee2 <vPortFree+0x16>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400ece:	b510      	push	{r4, lr}
  400ed0:	4604      	mov	r4, r0
	if( pv )
	{
		vTaskSuspendAll();
  400ed2:	4b04      	ldr	r3, [pc, #16]	; (400ee4 <vPortFree+0x18>)
  400ed4:	4798      	blx	r3
		{
			free( pv );
  400ed6:	4620      	mov	r0, r4
  400ed8:	4b03      	ldr	r3, [pc, #12]	; (400ee8 <vPortFree+0x1c>)
  400eda:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  400edc:	4b03      	ldr	r3, [pc, #12]	; (400eec <vPortFree+0x20>)
  400ede:	4798      	blx	r3
  400ee0:	bd10      	pop	{r4, pc}
  400ee2:	4770      	bx	lr
  400ee4:	00401ae5 	.word	0x00401ae5
  400ee8:	00402fa5 	.word	0x00402fa5
  400eec:	00401c55 	.word	0x00401c55

00400ef0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400ef0:	b538      	push	{r3, r4, r5, lr}
  400ef2:	4604      	mov	r4, r0
  400ef4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400ef6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ef8:	b942      	cbnz	r2, 400f0c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400efa:	6803      	ldr	r3, [r0, #0]
  400efc:	2b00      	cmp	r3, #0
  400efe:	d12b      	bne.n	400f58 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400f00:	6840      	ldr	r0, [r0, #4]
  400f02:	4b1b      	ldr	r3, [pc, #108]	; (400f70 <prvCopyDataToQueue+0x80>)
  400f04:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400f06:	2300      	movs	r3, #0
  400f08:	6063      	str	r3, [r4, #4]
  400f0a:	e02c      	b.n	400f66 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400f0c:	b96d      	cbnz	r5, 400f2a <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400f0e:	6880      	ldr	r0, [r0, #8]
  400f10:	4b18      	ldr	r3, [pc, #96]	; (400f74 <prvCopyDataToQueue+0x84>)
  400f12:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400f14:	68a2      	ldr	r2, [r4, #8]
  400f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f18:	4413      	add	r3, r2
  400f1a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f1c:	6862      	ldr	r2, [r4, #4]
  400f1e:	4293      	cmp	r3, r2
  400f20:	d31c      	bcc.n	400f5c <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400f22:	6823      	ldr	r3, [r4, #0]
  400f24:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400f26:	2000      	movs	r0, #0
  400f28:	e01d      	b.n	400f66 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400f2a:	68c0      	ldr	r0, [r0, #12]
  400f2c:	4b11      	ldr	r3, [pc, #68]	; (400f74 <prvCopyDataToQueue+0x84>)
  400f2e:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400f32:	425b      	negs	r3, r3
  400f34:	68e2      	ldr	r2, [r4, #12]
  400f36:	441a      	add	r2, r3
  400f38:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400f3a:	6821      	ldr	r1, [r4, #0]
  400f3c:	428a      	cmp	r2, r1
  400f3e:	d202      	bcs.n	400f46 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400f40:	6862      	ldr	r2, [r4, #4]
  400f42:	4413      	add	r3, r2
  400f44:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  400f46:	2d02      	cmp	r5, #2
  400f48:	d10a      	bne.n	400f60 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f4c:	b153      	cbz	r3, 400f64 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f50:	3b01      	subs	r3, #1
  400f52:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400f54:	2000      	movs	r0, #0
  400f56:	e006      	b.n	400f66 <prvCopyDataToQueue+0x76>
  400f58:	2000      	movs	r0, #0
  400f5a:	e004      	b.n	400f66 <prvCopyDataToQueue+0x76>
  400f5c:	2000      	movs	r0, #0
  400f5e:	e002      	b.n	400f66 <prvCopyDataToQueue+0x76>
  400f60:	2000      	movs	r0, #0
  400f62:	e000      	b.n	400f66 <prvCopyDataToQueue+0x76>
  400f64:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f68:	3301      	adds	r3, #1
  400f6a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400f6c:	bd38      	pop	{r3, r4, r5, pc}
  400f6e:	bf00      	nop
  400f70:	00402339 	.word	0x00402339
  400f74:	00403525 	.word	0x00403525

00400f78 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400f78:	b530      	push	{r4, r5, lr}
  400f7a:	b083      	sub	sp, #12
  400f7c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400f7e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400f80:	b954      	cbnz	r4, 400f98 <prvNotifyQueueSetContainer+0x20>
  400f82:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f86:	b672      	cpsid	i
  400f88:	f383 8811 	msr	BASEPRI, r3
  400f8c:	f3bf 8f6f 	isb	sy
  400f90:	f3bf 8f4f 	dsb	sy
  400f94:	b662      	cpsie	i
  400f96:	e7fe      	b.n	400f96 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400f98:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f9a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f9c:	429a      	cmp	r2, r3
  400f9e:	d30a      	bcc.n	400fb6 <prvNotifyQueueSetContainer+0x3e>
  400fa0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fa4:	b672      	cpsid	i
  400fa6:	f383 8811 	msr	BASEPRI, r3
  400faa:	f3bf 8f6f 	isb	sy
  400fae:	f3bf 8f4f 	dsb	sy
  400fb2:	b662      	cpsie	i
  400fb4:	e7fe      	b.n	400fb4 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400fb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400fb8:	4293      	cmp	r3, r2
  400fba:	d917      	bls.n	400fec <prvNotifyQueueSetContainer+0x74>
  400fbc:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400fbe:	a901      	add	r1, sp, #4
  400fc0:	4620      	mov	r0, r4
  400fc2:	4b0c      	ldr	r3, [pc, #48]	; (400ff4 <prvNotifyQueueSetContainer+0x7c>)
  400fc4:	4798      	blx	r3
  400fc6:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400fc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fca:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fce:	d109      	bne.n	400fe4 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fd2:	b163      	cbz	r3, 400fee <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400fd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fd8:	4b07      	ldr	r3, [pc, #28]	; (400ff8 <prvNotifyQueueSetContainer+0x80>)
  400fda:	4798      	blx	r3
  400fdc:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400fde:	bf18      	it	ne
  400fe0:	2501      	movne	r5, #1
  400fe2:	e004      	b.n	400fee <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400fe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fe6:	3301      	adds	r3, #1
  400fe8:	64a3      	str	r3, [r4, #72]	; 0x48
  400fea:	e000      	b.n	400fee <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400fec:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400fee:	4628      	mov	r0, r5
  400ff0:	b003      	add	sp, #12
  400ff2:	bd30      	pop	{r4, r5, pc}
  400ff4:	00400ef1 	.word	0x00400ef1
  400ff8:	00402109 	.word	0x00402109

00400ffc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400ffc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ffe:	b172      	cbz	r2, 40101e <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  401000:	b510      	push	{r4, lr}
  401002:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401004:	68c4      	ldr	r4, [r0, #12]
  401006:	4414      	add	r4, r2
  401008:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40100a:	6840      	ldr	r0, [r0, #4]
  40100c:	4284      	cmp	r4, r0
  40100e:	d301      	bcc.n	401014 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401010:	6818      	ldr	r0, [r3, #0]
  401012:	60d8      	str	r0, [r3, #12]
  401014:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401016:	68d9      	ldr	r1, [r3, #12]
  401018:	4b01      	ldr	r3, [pc, #4]	; (401020 <prvCopyDataFromQueue+0x24>)
  40101a:	4798      	blx	r3
  40101c:	bd10      	pop	{r4, pc}
  40101e:	4770      	bx	lr
  401020:	00403525 	.word	0x00403525

00401024 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  401024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401026:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  401028:	4b20      	ldr	r3, [pc, #128]	; (4010ac <prvUnlockQueue+0x88>)
  40102a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40102c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40102e:	2b00      	cmp	r3, #0
  401030:	dd18      	ble.n	401064 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401032:	4d1f      	ldr	r5, [pc, #124]	; (4010b0 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401034:	4f1f      	ldr	r7, [pc, #124]	; (4010b4 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401036:	4e20      	ldr	r6, [pc, #128]	; (4010b8 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  401038:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40103a:	b133      	cbz	r3, 40104a <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40103c:	2100      	movs	r1, #0
  40103e:	4620      	mov	r0, r4
  401040:	47a8      	blx	r5
  401042:	2801      	cmp	r0, #1
  401044:	d108      	bne.n	401058 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  401046:	47b8      	blx	r7
  401048:	e006      	b.n	401058 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40104a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40104c:	b153      	cbz	r3, 401064 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40104e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401052:	47b0      	blx	r6
  401054:	b100      	cbz	r0, 401058 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  401056:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  401058:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40105a:	3b01      	subs	r3, #1
  40105c:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40105e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401060:	2b00      	cmp	r3, #0
  401062:	dce9      	bgt.n	401038 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  401064:	f04f 33ff 	mov.w	r3, #4294967295
  401068:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40106a:	4b14      	ldr	r3, [pc, #80]	; (4010bc <prvUnlockQueue+0x98>)
  40106c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  40106e:	4b0f      	ldr	r3, [pc, #60]	; (4010ac <prvUnlockQueue+0x88>)
  401070:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401072:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401074:	2b00      	cmp	r3, #0
  401076:	dd13      	ble.n	4010a0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401078:	6923      	ldr	r3, [r4, #16]
  40107a:	b91b      	cbnz	r3, 401084 <prvUnlockQueue+0x60>
  40107c:	e010      	b.n	4010a0 <prvUnlockQueue+0x7c>
  40107e:	6923      	ldr	r3, [r4, #16]
  401080:	b923      	cbnz	r3, 40108c <prvUnlockQueue+0x68>
  401082:	e00d      	b.n	4010a0 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401084:	f104 0610 	add.w	r6, r4, #16
  401088:	4d0b      	ldr	r5, [pc, #44]	; (4010b8 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  40108a:	4f0a      	ldr	r7, [pc, #40]	; (4010b4 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40108c:	4630      	mov	r0, r6
  40108e:	47a8      	blx	r5
  401090:	b100      	cbz	r0, 401094 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  401092:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  401094:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401096:	3b01      	subs	r3, #1
  401098:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40109a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40109c:	2b00      	cmp	r3, #0
  40109e:	dcee      	bgt.n	40107e <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  4010a0:	f04f 33ff 	mov.w	r3, #4294967295
  4010a4:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  4010a6:	4b05      	ldr	r3, [pc, #20]	; (4010bc <prvUnlockQueue+0x98>)
  4010a8:	4798      	blx	r3
  4010aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4010ac:	00400c41 	.word	0x00400c41
  4010b0:	00400f79 	.word	0x00400f79
  4010b4:	00402265 	.word	0x00402265
  4010b8:	00402109 	.word	0x00402109
  4010bc:	00400c8d 	.word	0x00400c8d

004010c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  4010c0:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4010c2:	b950      	cbnz	r0, 4010da <xQueueGenericReset+0x1a>
  4010c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010c8:	b672      	cpsid	i
  4010ca:	f383 8811 	msr	BASEPRI, r3
  4010ce:	f3bf 8f6f 	isb	sy
  4010d2:	f3bf 8f4f 	dsb	sy
  4010d6:	b662      	cpsie	i
  4010d8:	e7fe      	b.n	4010d8 <xQueueGenericReset+0x18>
  4010da:	4604      	mov	r4, r0
  4010dc:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4010de:	4b18      	ldr	r3, [pc, #96]	; (401140 <xQueueGenericReset+0x80>)
  4010e0:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4010e2:	6822      	ldr	r2, [r4, #0]
  4010e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4010e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4010e8:	fb03 f301 	mul.w	r3, r3, r1
  4010ec:	18d0      	adds	r0, r2, r3
  4010ee:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4010f0:	2000      	movs	r0, #0
  4010f2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4010f4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4010f6:	1a5b      	subs	r3, r3, r1
  4010f8:	4413      	add	r3, r2
  4010fa:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4010fc:	f04f 33ff 	mov.w	r3, #4294967295
  401100:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401102:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  401104:	b985      	cbnz	r5, 401128 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401106:	6923      	ldr	r3, [r4, #16]
  401108:	b1ab      	cbz	r3, 401136 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40110a:	f104 0010 	add.w	r0, r4, #16
  40110e:	4b0d      	ldr	r3, [pc, #52]	; (401144 <xQueueGenericReset+0x84>)
  401110:	4798      	blx	r3
  401112:	2801      	cmp	r0, #1
  401114:	d10f      	bne.n	401136 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  401116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40111a:	4b0b      	ldr	r3, [pc, #44]	; (401148 <xQueueGenericReset+0x88>)
  40111c:	601a      	str	r2, [r3, #0]
  40111e:	f3bf 8f4f 	dsb	sy
  401122:	f3bf 8f6f 	isb	sy
  401126:	e006      	b.n	401136 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401128:	f104 0010 	add.w	r0, r4, #16
  40112c:	4d07      	ldr	r5, [pc, #28]	; (40114c <xQueueGenericReset+0x8c>)
  40112e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401130:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401134:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  401136:	4b06      	ldr	r3, [pc, #24]	; (401150 <xQueueGenericReset+0x90>)
  401138:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  40113a:	2001      	movs	r0, #1
  40113c:	bd38      	pop	{r3, r4, r5, pc}
  40113e:	bf00      	nop
  401140:	00400c41 	.word	0x00400c41
  401144:	00402109 	.word	0x00402109
  401148:	e000ed04 	.word	0xe000ed04
  40114c:	00400af5 	.word	0x00400af5
  401150:	00400c8d 	.word	0x00400c8d

00401154 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  401154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401156:	b950      	cbnz	r0, 40116e <xQueueGenericCreate+0x1a>
  401158:	f04f 0380 	mov.w	r3, #128	; 0x80
  40115c:	b672      	cpsid	i
  40115e:	f383 8811 	msr	BASEPRI, r3
  401162:	f3bf 8f6f 	isb	sy
  401166:	f3bf 8f4f 	dsb	sy
  40116a:	b662      	cpsie	i
  40116c:	e7fe      	b.n	40116c <xQueueGenericCreate+0x18>
  40116e:	4606      	mov	r6, r0
  401170:	4617      	mov	r7, r2
  401172:	460d      	mov	r5, r1

	if( uxItemSize == ( UBaseType_t ) 0 )
  401174:	b1c1      	cbz	r1, 4011a8 <xQueueGenericCreate+0x54>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401176:	fb01 f000 	mul.w	r0, r1, r0
  40117a:	3059      	adds	r0, #89	; 0x59
  40117c:	4b14      	ldr	r3, [pc, #80]	; (4011d0 <xQueueGenericCreate+0x7c>)
  40117e:	4798      	blx	r3

	if( pxNewQueue != NULL )
  401180:	4604      	mov	r4, r0
  401182:	b910      	cbnz	r0, 40118a <xQueueGenericCreate+0x36>
  401184:	e005      	b.n	401192 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401186:	6024      	str	r4, [r4, #0]
  401188:	e015      	b.n	4011b6 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40118a:	f100 0358 	add.w	r3, r0, #88	; 0x58
  40118e:	6003      	str	r3, [r0, #0]
  401190:	e011      	b.n	4011b6 <xQueueGenericCreate+0x62>
  401192:	f04f 0380 	mov.w	r3, #128	; 0x80
  401196:	b672      	cpsid	i
  401198:	f383 8811 	msr	BASEPRI, r3
  40119c:	f3bf 8f6f 	isb	sy
  4011a0:	f3bf 8f4f 	dsb	sy
  4011a4:	b662      	cpsie	i
  4011a6:	e7fe      	b.n	4011a6 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4011a8:	2058      	movs	r0, #88	; 0x58
  4011aa:	4b09      	ldr	r3, [pc, #36]	; (4011d0 <xQueueGenericCreate+0x7c>)
  4011ac:	4798      	blx	r3

	if( pxNewQueue != NULL )
  4011ae:	4604      	mov	r4, r0
  4011b0:	2800      	cmp	r0, #0
  4011b2:	d1e8      	bne.n	401186 <xQueueGenericCreate+0x32>
  4011b4:	e7ed      	b.n	401192 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  4011b6:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4011b8:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4011ba:	2101      	movs	r1, #1
  4011bc:	4620      	mov	r0, r4
  4011be:	4b05      	ldr	r3, [pc, #20]	; (4011d4 <xQueueGenericCreate+0x80>)
  4011c0:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  4011c2:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  4011c6:	2300      	movs	r3, #0
  4011c8:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  4011ca:	4620      	mov	r0, r4
  4011cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4011ce:	bf00      	nop
  4011d0:	00400e9d 	.word	0x00400e9d
  4011d4:	004010c1 	.word	0x004010c1

004011d8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  4011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011dc:	b085      	sub	sp, #20
  4011de:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4011e0:	b950      	cbnz	r0, 4011f8 <xQueueGenericSend+0x20>
  4011e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011e6:	b672      	cpsid	i
  4011e8:	f383 8811 	msr	BASEPRI, r3
  4011ec:	f3bf 8f6f 	isb	sy
  4011f0:	f3bf 8f4f 	dsb	sy
  4011f4:	b662      	cpsie	i
  4011f6:	e7fe      	b.n	4011f6 <xQueueGenericSend+0x1e>
  4011f8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4011fa:	b961      	cbnz	r1, 401216 <xQueueGenericSend+0x3e>
  4011fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4011fe:	b152      	cbz	r2, 401216 <xQueueGenericSend+0x3e>
  401200:	f04f 0380 	mov.w	r3, #128	; 0x80
  401204:	b672      	cpsid	i
  401206:	f383 8811 	msr	BASEPRI, r3
  40120a:	f3bf 8f6f 	isb	sy
  40120e:	f3bf 8f4f 	dsb	sy
  401212:	b662      	cpsie	i
  401214:	e7fe      	b.n	401214 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401216:	2b02      	cmp	r3, #2
  401218:	d10d      	bne.n	401236 <xQueueGenericSend+0x5e>
  40121a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40121c:	2a01      	cmp	r2, #1
  40121e:	d00a      	beq.n	401236 <xQueueGenericSend+0x5e>
  401220:	f04f 0380 	mov.w	r3, #128	; 0x80
  401224:	b672      	cpsid	i
  401226:	f383 8811 	msr	BASEPRI, r3
  40122a:	f3bf 8f6f 	isb	sy
  40122e:	f3bf 8f4f 	dsb	sy
  401232:	b662      	cpsie	i
  401234:	e7fe      	b.n	401234 <xQueueGenericSend+0x5c>
  401236:	461d      	mov	r5, r3
  401238:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40123a:	4b51      	ldr	r3, [pc, #324]	; (401380 <xQueueGenericSend+0x1a8>)
  40123c:	4798      	blx	r3
  40123e:	b960      	cbnz	r0, 40125a <xQueueGenericSend+0x82>
  401240:	9b01      	ldr	r3, [sp, #4]
  401242:	b163      	cbz	r3, 40125e <xQueueGenericSend+0x86>
  401244:	f04f 0380 	mov.w	r3, #128	; 0x80
  401248:	b672      	cpsid	i
  40124a:	f383 8811 	msr	BASEPRI, r3
  40124e:	f3bf 8f6f 	isb	sy
  401252:	f3bf 8f4f 	dsb	sy
  401256:	b662      	cpsie	i
  401258:	e7fe      	b.n	401258 <xQueueGenericSend+0x80>
  40125a:	2700      	movs	r7, #0
  40125c:	e000      	b.n	401260 <xQueueGenericSend+0x88>
  40125e:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  401260:	4e48      	ldr	r6, [pc, #288]	; (401384 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401262:	f8df 914c 	ldr.w	r9, [pc, #332]	; 4013b0 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  401266:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401390 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40126a:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40126c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40126e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401270:	429a      	cmp	r2, r3
  401272:	d301      	bcc.n	401278 <xQueueGenericSend+0xa0>
  401274:	2d02      	cmp	r5, #2
  401276:	d133      	bne.n	4012e0 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401278:	462a      	mov	r2, r5
  40127a:	9900      	ldr	r1, [sp, #0]
  40127c:	4620      	mov	r0, r4
  40127e:	4b42      	ldr	r3, [pc, #264]	; (401388 <xQueueGenericSend+0x1b0>)
  401280:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  401282:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401284:	b173      	cbz	r3, 4012a4 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401286:	4629      	mov	r1, r5
  401288:	4620      	mov	r0, r4
  40128a:	4b40      	ldr	r3, [pc, #256]	; (40138c <xQueueGenericSend+0x1b4>)
  40128c:	4798      	blx	r3
  40128e:	2801      	cmp	r0, #1
  401290:	d122      	bne.n	4012d8 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  401292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401296:	4b3e      	ldr	r3, [pc, #248]	; (401390 <xQueueGenericSend+0x1b8>)
  401298:	601a      	str	r2, [r3, #0]
  40129a:	f3bf 8f4f 	dsb	sy
  40129e:	f3bf 8f6f 	isb	sy
  4012a2:	e019      	b.n	4012d8 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4012a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4012a6:	b173      	cbz	r3, 4012c6 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4012a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4012ac:	4b39      	ldr	r3, [pc, #228]	; (401394 <xQueueGenericSend+0x1bc>)
  4012ae:	4798      	blx	r3
  4012b0:	2801      	cmp	r0, #1
  4012b2:	d111      	bne.n	4012d8 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  4012b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012b8:	4b35      	ldr	r3, [pc, #212]	; (401390 <xQueueGenericSend+0x1b8>)
  4012ba:	601a      	str	r2, [r3, #0]
  4012bc:	f3bf 8f4f 	dsb	sy
  4012c0:	f3bf 8f6f 	isb	sy
  4012c4:	e008      	b.n	4012d8 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  4012c6:	b138      	cbz	r0, 4012d8 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  4012c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4012cc:	4b30      	ldr	r3, [pc, #192]	; (401390 <xQueueGenericSend+0x1b8>)
  4012ce:	601a      	str	r2, [r3, #0]
  4012d0:	f3bf 8f4f 	dsb	sy
  4012d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  4012d8:	4b2f      	ldr	r3, [pc, #188]	; (401398 <xQueueGenericSend+0x1c0>)
  4012da:	4798      	blx	r3
				return pdPASS;
  4012dc:	2001      	movs	r0, #1
  4012de:	e04b      	b.n	401378 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4012e0:	9b01      	ldr	r3, [sp, #4]
  4012e2:	b91b      	cbnz	r3, 4012ec <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4012e4:	4b2c      	ldr	r3, [pc, #176]	; (401398 <xQueueGenericSend+0x1c0>)
  4012e6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4012e8:	2000      	movs	r0, #0
  4012ea:	e045      	b.n	401378 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  4012ec:	b917      	cbnz	r7, 4012f4 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4012ee:	a802      	add	r0, sp, #8
  4012f0:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  4012f2:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4012f4:	4b28      	ldr	r3, [pc, #160]	; (401398 <xQueueGenericSend+0x1c0>)
  4012f6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4012f8:	4b28      	ldr	r3, [pc, #160]	; (40139c <xQueueGenericSend+0x1c4>)
  4012fa:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4012fc:	47b0      	blx	r6
  4012fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401300:	f1b3 3fff 	cmp.w	r3, #4294967295
  401304:	d101      	bne.n	40130a <xQueueGenericSend+0x132>
  401306:	2300      	movs	r3, #0
  401308:	6463      	str	r3, [r4, #68]	; 0x44
  40130a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40130c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401310:	d101      	bne.n	401316 <xQueueGenericSend+0x13e>
  401312:	2300      	movs	r3, #0
  401314:	64a3      	str	r3, [r4, #72]	; 0x48
  401316:	4b20      	ldr	r3, [pc, #128]	; (401398 <xQueueGenericSend+0x1c0>)
  401318:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40131a:	a901      	add	r1, sp, #4
  40131c:	a802      	add	r0, sp, #8
  40131e:	4b20      	ldr	r3, [pc, #128]	; (4013a0 <xQueueGenericSend+0x1c8>)
  401320:	4798      	blx	r3
  401322:	bb18      	cbnz	r0, 40136c <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401324:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401326:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  40132a:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40132e:	4b1a      	ldr	r3, [pc, #104]	; (401398 <xQueueGenericSend+0x1c0>)
  401330:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401332:	45d3      	cmp	fp, sl
  401334:	d114      	bne.n	401360 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401336:	9901      	ldr	r1, [sp, #4]
  401338:	f104 0010 	add.w	r0, r4, #16
  40133c:	4b19      	ldr	r3, [pc, #100]	; (4013a4 <xQueueGenericSend+0x1cc>)
  40133e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  401340:	4620      	mov	r0, r4
  401342:	4b19      	ldr	r3, [pc, #100]	; (4013a8 <xQueueGenericSend+0x1d0>)
  401344:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  401346:	4b19      	ldr	r3, [pc, #100]	; (4013ac <xQueueGenericSend+0x1d4>)
  401348:	4798      	blx	r3
  40134a:	2800      	cmp	r0, #0
  40134c:	d18d      	bne.n	40126a <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  40134e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401352:	f8c8 3000 	str.w	r3, [r8]
  401356:	f3bf 8f4f 	dsb	sy
  40135a:	f3bf 8f6f 	isb	sy
  40135e:	e784      	b.n	40126a <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401360:	4620      	mov	r0, r4
  401362:	4b11      	ldr	r3, [pc, #68]	; (4013a8 <xQueueGenericSend+0x1d0>)
  401364:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401366:	4b11      	ldr	r3, [pc, #68]	; (4013ac <xQueueGenericSend+0x1d4>)
  401368:	4798      	blx	r3
  40136a:	e77e      	b.n	40126a <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  40136c:	4620      	mov	r0, r4
  40136e:	4b0e      	ldr	r3, [pc, #56]	; (4013a8 <xQueueGenericSend+0x1d0>)
  401370:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401372:	4b0e      	ldr	r3, [pc, #56]	; (4013ac <xQueueGenericSend+0x1d4>)
  401374:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  401376:	2000      	movs	r0, #0
		}
	}
}
  401378:	b005      	add	sp, #20
  40137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40137e:	bf00      	nop
  401380:	00402271 	.word	0x00402271
  401384:	00400c41 	.word	0x00400c41
  401388:	00400ef1 	.word	0x00400ef1
  40138c:	00400f79 	.word	0x00400f79
  401390:	e000ed04 	.word	0xe000ed04
  401394:	00402109 	.word	0x00402109
  401398:	00400c8d 	.word	0x00400c8d
  40139c:	00401ae5 	.word	0x00401ae5
  4013a0:	004021d1 	.word	0x004021d1
  4013a4:	00402005 	.word	0x00402005
  4013a8:	00401025 	.word	0x00401025
  4013ac:	00401c55 	.word	0x00401c55
  4013b0:	004021a1 	.word	0x004021a1

004013b4 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4013b4:	b950      	cbnz	r0, 4013cc <xQueueGenericSendFromISR+0x18>
  4013b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013ba:	b672      	cpsid	i
  4013bc:	f383 8811 	msr	BASEPRI, r3
  4013c0:	f3bf 8f6f 	isb	sy
  4013c4:	f3bf 8f4f 	dsb	sy
  4013c8:	b662      	cpsie	i
  4013ca:	e7fe      	b.n	4013ca <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  4013cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013d0:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4013d2:	b961      	cbnz	r1, 4013ee <xQueueGenericSendFromISR+0x3a>
  4013d4:	6c00      	ldr	r0, [r0, #64]	; 0x40
  4013d6:	b150      	cbz	r0, 4013ee <xQueueGenericSendFromISR+0x3a>
  4013d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013dc:	b672      	cpsid	i
  4013de:	f383 8811 	msr	BASEPRI, r3
  4013e2:	f3bf 8f6f 	isb	sy
  4013e6:	f3bf 8f4f 	dsb	sy
  4013ea:	b662      	cpsie	i
  4013ec:	e7fe      	b.n	4013ec <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4013ee:	2b02      	cmp	r3, #2
  4013f0:	d10d      	bne.n	40140e <xQueueGenericSendFromISR+0x5a>
  4013f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  4013f4:	2801      	cmp	r0, #1
  4013f6:	d00a      	beq.n	40140e <xQueueGenericSendFromISR+0x5a>
  4013f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013fc:	b672      	cpsid	i
  4013fe:	f383 8811 	msr	BASEPRI, r3
  401402:	f3bf 8f6f 	isb	sy
  401406:	f3bf 8f4f 	dsb	sy
  40140a:	b662      	cpsie	i
  40140c:	e7fe      	b.n	40140c <xQueueGenericSendFromISR+0x58>
  40140e:	461e      	mov	r6, r3
  401410:	4615      	mov	r5, r2
  401412:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401414:	4b21      	ldr	r3, [pc, #132]	; (40149c <xQueueGenericSendFromISR+0xe8>)
  401416:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  401418:	f3ef 8711 	mrs	r7, BASEPRI
  40141c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401420:	b672      	cpsid	i
  401422:	f383 8811 	msr	BASEPRI, r3
  401426:	f3bf 8f6f 	isb	sy
  40142a:	f3bf 8f4f 	dsb	sy
  40142e:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401430:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401432:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401434:	429a      	cmp	r2, r3
  401436:	d301      	bcc.n	40143c <xQueueGenericSendFromISR+0x88>
  401438:	2e02      	cmp	r6, #2
  40143a:	d123      	bne.n	401484 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40143c:	4632      	mov	r2, r6
  40143e:	4641      	mov	r1, r8
  401440:	4620      	mov	r0, r4
  401442:	4b17      	ldr	r3, [pc, #92]	; (4014a0 <xQueueGenericSendFromISR+0xec>)
  401444:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401446:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401448:	f1b3 3fff 	cmp.w	r3, #4294967295
  40144c:	d115      	bne.n	40147a <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  40144e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401450:	b143      	cbz	r3, 401464 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401452:	4631      	mov	r1, r6
  401454:	4620      	mov	r0, r4
  401456:	4b13      	ldr	r3, [pc, #76]	; (4014a4 <xQueueGenericSendFromISR+0xf0>)
  401458:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  40145a:	b1ad      	cbz	r5, 401488 <xQueueGenericSendFromISR+0xd4>
  40145c:	2801      	cmp	r0, #1
  40145e:	d113      	bne.n	401488 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  401460:	6028      	str	r0, [r5, #0]
  401462:	e016      	b.n	401492 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401464:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401466:	b18b      	cbz	r3, 40148c <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401468:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40146c:	4b0e      	ldr	r3, [pc, #56]	; (4014a8 <xQueueGenericSendFromISR+0xf4>)
  40146e:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  401470:	b175      	cbz	r5, 401490 <xQueueGenericSendFromISR+0xdc>
  401472:	b168      	cbz	r0, 401490 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401474:	2001      	movs	r0, #1
  401476:	6028      	str	r0, [r5, #0]
  401478:	e00b      	b.n	401492 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  40147a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40147c:	3301      	adds	r3, #1
  40147e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  401480:	2001      	movs	r0, #1
  401482:	e006      	b.n	401492 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401484:	2000      	movs	r0, #0
  401486:	e004      	b.n	401492 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401488:	2001      	movs	r0, #1
  40148a:	e002      	b.n	401492 <xQueueGenericSendFromISR+0xde>
  40148c:	2001      	movs	r0, #1
  40148e:	e000      	b.n	401492 <xQueueGenericSendFromISR+0xde>
  401490:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401492:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  401496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40149a:	bf00      	nop
  40149c:	00400e39 	.word	0x00400e39
  4014a0:	00400ef1 	.word	0x00400ef1
  4014a4:	00400f79 	.word	0x00400f79
  4014a8:	00402109 	.word	0x00402109

004014ac <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  4014ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014b0:	b085      	sub	sp, #20
  4014b2:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4014b4:	b950      	cbnz	r0, 4014cc <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4014b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ba:	b672      	cpsid	i
  4014bc:	f383 8811 	msr	BASEPRI, r3
  4014c0:	f3bf 8f6f 	isb	sy
  4014c4:	f3bf 8f4f 	dsb	sy
  4014c8:	b662      	cpsie	i
  4014ca:	e7fe      	b.n	4014ca <xQueueGenericReceive+0x1e>
  4014cc:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4014ce:	b961      	cbnz	r1, 4014ea <xQueueGenericReceive+0x3e>
  4014d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014d2:	b152      	cbz	r2, 4014ea <xQueueGenericReceive+0x3e>
  4014d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d8:	b672      	cpsid	i
  4014da:	f383 8811 	msr	BASEPRI, r3
  4014de:	f3bf 8f6f 	isb	sy
  4014e2:	f3bf 8f4f 	dsb	sy
  4014e6:	b662      	cpsie	i
  4014e8:	e7fe      	b.n	4014e8 <xQueueGenericReceive+0x3c>
  4014ea:	4698      	mov	r8, r3
  4014ec:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4014ee:	4b52      	ldr	r3, [pc, #328]	; (401638 <xQueueGenericReceive+0x18c>)
  4014f0:	4798      	blx	r3
  4014f2:	b960      	cbnz	r0, 40150e <xQueueGenericReceive+0x62>
  4014f4:	9b01      	ldr	r3, [sp, #4]
  4014f6:	b163      	cbz	r3, 401512 <xQueueGenericReceive+0x66>
  4014f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014fc:	b672      	cpsid	i
  4014fe:	f383 8811 	msr	BASEPRI, r3
  401502:	f3bf 8f6f 	isb	sy
  401506:	f3bf 8f4f 	dsb	sy
  40150a:	b662      	cpsie	i
  40150c:	e7fe      	b.n	40150c <xQueueGenericReceive+0x60>
  40150e:	2600      	movs	r6, #0
  401510:	e000      	b.n	401514 <xQueueGenericReceive+0x68>
  401512:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401514:	4d49      	ldr	r5, [pc, #292]	; (40163c <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401516:	f8df a154 	ldr.w	sl, [pc, #340]	; 40166c <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40151a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 40164c <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40151e:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401522:	2b00      	cmp	r3, #0
  401524:	d034      	beq.n	401590 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401526:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401528:	4659      	mov	r1, fp
  40152a:	4620      	mov	r0, r4
  40152c:	4b44      	ldr	r3, [pc, #272]	; (401640 <xQueueGenericReceive+0x194>)
  40152e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401530:	f1b8 0f00 	cmp.w	r8, #0
  401534:	d118      	bne.n	401568 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  401536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401538:	3b01      	subs	r3, #1
  40153a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40153c:	6823      	ldr	r3, [r4, #0]
  40153e:	b913      	cbnz	r3, 401546 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401540:	4b40      	ldr	r3, [pc, #256]	; (401644 <xQueueGenericReceive+0x198>)
  401542:	4798      	blx	r3
  401544:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401546:	6923      	ldr	r3, [r4, #16]
  401548:	b1f3      	cbz	r3, 401588 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40154a:	f104 0010 	add.w	r0, r4, #16
  40154e:	4b3e      	ldr	r3, [pc, #248]	; (401648 <xQueueGenericReceive+0x19c>)
  401550:	4798      	blx	r3
  401552:	2801      	cmp	r0, #1
  401554:	d118      	bne.n	401588 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  401556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40155a:	4b3c      	ldr	r3, [pc, #240]	; (40164c <xQueueGenericReceive+0x1a0>)
  40155c:	601a      	str	r2, [r3, #0]
  40155e:	f3bf 8f4f 	dsb	sy
  401562:	f3bf 8f6f 	isb	sy
  401566:	e00f      	b.n	401588 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401568:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40156a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40156c:	b163      	cbz	r3, 401588 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40156e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401572:	4b35      	ldr	r3, [pc, #212]	; (401648 <xQueueGenericReceive+0x19c>)
  401574:	4798      	blx	r3
  401576:	b138      	cbz	r0, 401588 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  401578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40157c:	4b33      	ldr	r3, [pc, #204]	; (40164c <xQueueGenericReceive+0x1a0>)
  40157e:	601a      	str	r2, [r3, #0]
  401580:	f3bf 8f4f 	dsb	sy
  401584:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  401588:	4b31      	ldr	r3, [pc, #196]	; (401650 <xQueueGenericReceive+0x1a4>)
  40158a:	4798      	blx	r3
				return pdPASS;
  40158c:	2001      	movs	r0, #1
  40158e:	e04f      	b.n	401630 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401590:	9b01      	ldr	r3, [sp, #4]
  401592:	b91b      	cbnz	r3, 40159c <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401594:	4b2e      	ldr	r3, [pc, #184]	; (401650 <xQueueGenericReceive+0x1a4>)
  401596:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401598:	2000      	movs	r0, #0
  40159a:	e049      	b.n	401630 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  40159c:	b916      	cbnz	r6, 4015a4 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  40159e:	a802      	add	r0, sp, #8
  4015a0:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  4015a2:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4015a4:	4b2a      	ldr	r3, [pc, #168]	; (401650 <xQueueGenericReceive+0x1a4>)
  4015a6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4015a8:	4b2a      	ldr	r3, [pc, #168]	; (401654 <xQueueGenericReceive+0x1a8>)
  4015aa:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4015ac:	47a8      	blx	r5
  4015ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4015b0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015b4:	d101      	bne.n	4015ba <xQueueGenericReceive+0x10e>
  4015b6:	2300      	movs	r3, #0
  4015b8:	6463      	str	r3, [r4, #68]	; 0x44
  4015ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015c0:	d101      	bne.n	4015c6 <xQueueGenericReceive+0x11a>
  4015c2:	2300      	movs	r3, #0
  4015c4:	64a3      	str	r3, [r4, #72]	; 0x48
  4015c6:	4b22      	ldr	r3, [pc, #136]	; (401650 <xQueueGenericReceive+0x1a4>)
  4015c8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4015ca:	a901      	add	r1, sp, #4
  4015cc:	a802      	add	r0, sp, #8
  4015ce:	4b22      	ldr	r3, [pc, #136]	; (401658 <xQueueGenericReceive+0x1ac>)
  4015d0:	4798      	blx	r3
  4015d2:	bb38      	cbnz	r0, 401624 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4015d4:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  4015d6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4015d8:	4b1d      	ldr	r3, [pc, #116]	; (401650 <xQueueGenericReceive+0x1a4>)
  4015da:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4015dc:	b9e7      	cbnz	r7, 401618 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4015de:	6823      	ldr	r3, [r4, #0]
  4015e0:	b92b      	cbnz	r3, 4015ee <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  4015e2:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4015e4:	6860      	ldr	r0, [r4, #4]
  4015e6:	4b1d      	ldr	r3, [pc, #116]	; (40165c <xQueueGenericReceive+0x1b0>)
  4015e8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  4015ea:	4b19      	ldr	r3, [pc, #100]	; (401650 <xQueueGenericReceive+0x1a4>)
  4015ec:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4015ee:	9901      	ldr	r1, [sp, #4]
  4015f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015f4:	4b1a      	ldr	r3, [pc, #104]	; (401660 <xQueueGenericReceive+0x1b4>)
  4015f6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4015f8:	4620      	mov	r0, r4
  4015fa:	4b1a      	ldr	r3, [pc, #104]	; (401664 <xQueueGenericReceive+0x1b8>)
  4015fc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4015fe:	4b1a      	ldr	r3, [pc, #104]	; (401668 <xQueueGenericReceive+0x1bc>)
  401600:	4798      	blx	r3
  401602:	2800      	cmp	r0, #0
  401604:	d18b      	bne.n	40151e <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  401606:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40160a:	f8c9 3000 	str.w	r3, [r9]
  40160e:	f3bf 8f4f 	dsb	sy
  401612:	f3bf 8f6f 	isb	sy
  401616:	e782      	b.n	40151e <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401618:	4620      	mov	r0, r4
  40161a:	4b12      	ldr	r3, [pc, #72]	; (401664 <xQueueGenericReceive+0x1b8>)
  40161c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40161e:	4b12      	ldr	r3, [pc, #72]	; (401668 <xQueueGenericReceive+0x1bc>)
  401620:	4798      	blx	r3
  401622:	e77c      	b.n	40151e <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401624:	4620      	mov	r0, r4
  401626:	4b0f      	ldr	r3, [pc, #60]	; (401664 <xQueueGenericReceive+0x1b8>)
  401628:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40162a:	4b0f      	ldr	r3, [pc, #60]	; (401668 <xQueueGenericReceive+0x1bc>)
  40162c:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40162e:	2000      	movs	r0, #0
		}
	}
}
  401630:	b005      	add	sp, #20
  401632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401636:	bf00      	nop
  401638:	00402271 	.word	0x00402271
  40163c:	00400c41 	.word	0x00400c41
  401640:	00400ffd 	.word	0x00400ffd
  401644:	004024f9 	.word	0x004024f9
  401648:	00402109 	.word	0x00402109
  40164c:	e000ed04 	.word	0xe000ed04
  401650:	00400c8d 	.word	0x00400c8d
  401654:	00401ae5 	.word	0x00401ae5
  401658:	004021d1 	.word	0x004021d1
  40165c:	00402291 	.word	0x00402291
  401660:	00402005 	.word	0x00402005
  401664:	00401025 	.word	0x00401025
  401668:	00401c55 	.word	0x00401c55
  40166c:	004021a1 	.word	0x004021a1

00401670 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  401670:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401672:	4b0b      	ldr	r3, [pc, #44]	; (4016a0 <vQueueAddToRegistry+0x30>)
  401674:	681b      	ldr	r3, [r3, #0]
  401676:	b12b      	cbz	r3, 401684 <vQueueAddToRegistry+0x14>
  401678:	2301      	movs	r3, #1
  40167a:	4c09      	ldr	r4, [pc, #36]	; (4016a0 <vQueueAddToRegistry+0x30>)
  40167c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401680:	b942      	cbnz	r2, 401694 <vQueueAddToRegistry+0x24>
  401682:	e000      	b.n	401686 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401684:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401686:	4a06      	ldr	r2, [pc, #24]	; (4016a0 <vQueueAddToRegistry+0x30>)
  401688:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40168c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401690:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  401692:	e002      	b.n	40169a <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401694:	3301      	adds	r3, #1
  401696:	2b08      	cmp	r3, #8
  401698:	d1f0      	bne.n	40167c <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  40169a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40169e:	4770      	bx	lr
  4016a0:	20400bc0 	.word	0x20400bc0

004016a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  4016a4:	b570      	push	{r4, r5, r6, lr}
  4016a6:	4604      	mov	r4, r0
  4016a8:	460d      	mov	r5, r1
  4016aa:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  4016ac:	4b0d      	ldr	r3, [pc, #52]	; (4016e4 <vQueueWaitForMessageRestricted+0x40>)
  4016ae:	4798      	blx	r3
  4016b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4016b2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016b6:	d101      	bne.n	4016bc <vQueueWaitForMessageRestricted+0x18>
  4016b8:	2300      	movs	r3, #0
  4016ba:	6463      	str	r3, [r4, #68]	; 0x44
  4016bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4016be:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016c2:	d101      	bne.n	4016c8 <vQueueWaitForMessageRestricted+0x24>
  4016c4:	2300      	movs	r3, #0
  4016c6:	64a3      	str	r3, [r4, #72]	; 0x48
  4016c8:	4b07      	ldr	r3, [pc, #28]	; (4016e8 <vQueueWaitForMessageRestricted+0x44>)
  4016ca:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4016cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4016ce:	b92b      	cbnz	r3, 4016dc <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4016d0:	4632      	mov	r2, r6
  4016d2:	4629      	mov	r1, r5
  4016d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4016d8:	4b04      	ldr	r3, [pc, #16]	; (4016ec <vQueueWaitForMessageRestricted+0x48>)
  4016da:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  4016dc:	4620      	mov	r0, r4
  4016de:	4b04      	ldr	r3, [pc, #16]	; (4016f0 <vQueueWaitForMessageRestricted+0x4c>)
  4016e0:	4798      	blx	r3
  4016e2:	bd70      	pop	{r4, r5, r6, pc}
  4016e4:	00400c41 	.word	0x00400c41
  4016e8:	00400c8d 	.word	0x00400c8d
  4016ec:	00402089 	.word	0x00402089
  4016f0:	00401025 	.word	0x00401025

004016f4 <prvListTaskWithinSingleList>:
	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  4016f4:	680b      	ldr	r3, [r1, #0]
  4016f6:	2b00      	cmp	r3, #0
  4016f8:	d054      	beq.n	4017a4 <prvListTaskWithinSingleList+0xb0>
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
  4016fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  4016fe:	684b      	ldr	r3, [r1, #4]
  401700:	685b      	ldr	r3, [r3, #4]
  401702:	604b      	str	r3, [r1, #4]
  401704:	f101 0e08 	add.w	lr, r1, #8
  401708:	4573      	cmp	r3, lr
  40170a:	d101      	bne.n	401710 <prvListTaskWithinSingleList+0x1c>
  40170c:	685b      	ldr	r3, [r3, #4]
  40170e:	604b      	str	r3, [r1, #4]
  401710:	684b      	ldr	r3, [r1, #4]
  401712:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  401716:	f100 061c 	add.w	r6, r0, #28
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
  40171a:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
  40171c:	f04f 0802 	mov.w	r8, #2
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
  401720:	4607      	mov	r7, r0
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  401722:	684b      	ldr	r3, [r1, #4]
  401724:	685b      	ldr	r3, [r3, #4]
  401726:	604b      	str	r3, [r1, #4]
  401728:	459e      	cmp	lr, r3
  40172a:	d101      	bne.n	401730 <prvListTaskWithinSingleList+0x3c>
  40172c:	68cb      	ldr	r3, [r1, #12]
  40172e:	604b      	str	r3, [r1, #4]
  401730:	684b      	ldr	r3, [r1, #4]
  401732:	f8d3 900c 	ldr.w	r9, [r3, #12]
  401736:	46b2      	mov	sl, r6

				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
  401738:	f846 9c1c 	str.w	r9, [r6, #-28]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
  40173c:	f109 0334 	add.w	r3, r9, #52	; 0x34
  401740:	f846 3c18 	str.w	r3, [r6, #-24]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
  401744:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
  401748:	f846 3c14 	str.w	r3, [r6, #-20]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
  40174c:	f806 2c10 	strb.w	r2, [r6, #-16]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
  401750:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  401754:	f846 3c0c 	str.w	r3, [r6, #-12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a chance
					it is actually just blocked indefinitely - so really it should
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
  401758:	2a03      	cmp	r2, #3
  40175a:	d104      	bne.n	401766 <prvListTaskWithinSingleList+0x72>
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
  40175c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
  401760:	b10b      	cbz	r3, 401766 <prvListTaskWithinSingleList+0x72>
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
  401762:	f806 8c10 	strb.w	r8, [r6, #-16]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
  401766:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
  40176a:	f84a 3c08 	str.w	r3, [sl, #-8]
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
  40176e:	f84a 7c04 	str.w	r7, [sl, #-4]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
  401772:	f8d9 b030 	ldr.w	fp, [r9, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  401776:	f89b 3000 	ldrb.w	r3, [fp]
  40177a:	2ba5      	cmp	r3, #165	; 0xa5
  40177c:	d108      	bne.n	401790 <prvListTaskWithinSingleList+0x9c>
  40177e:	f10b 0301 	add.w	r3, fp, #1
  401782:	ebcb 0503 	rsb	r5, fp, r3
  401786:	f813 4b01 	ldrb.w	r4, [r3], #1
  40178a:	2ca5      	cmp	r4, #165	; 0xa5
  40178c:	d0f9      	beq.n	401782 <prvListTaskWithinSingleList+0x8e>
  40178e:	e000      	b.n	401792 <prvListTaskWithinSingleList+0x9e>

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
  401790:	463d      	mov	r5, r7
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
  401792:	08ad      	lsrs	r5, r5, #2
  401794:	f8aa 5000 	strh.w	r5, [sl]
				}
				#endif

				uxTask++;
  401798:	3001      	adds	r0, #1
  40179a:	3620      	adds	r6, #32

			} while( pxNextTCB != pxFirstTCB );
  40179c:	45cc      	cmp	ip, r9
  40179e:	d1c0      	bne.n	401722 <prvListTaskWithinSingleList+0x2e>
  4017a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
  4017a4:	2000      	movs	r0, #0
  4017a6:	4770      	bx	lr

004017a8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4017a8:	4b08      	ldr	r3, [pc, #32]	; (4017cc <prvResetNextTaskUnblockTime+0x24>)
  4017aa:	681b      	ldr	r3, [r3, #0]
  4017ac:	681b      	ldr	r3, [r3, #0]
  4017ae:	b923      	cbnz	r3, 4017ba <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  4017b0:	f04f 32ff 	mov.w	r2, #4294967295
  4017b4:	4b06      	ldr	r3, [pc, #24]	; (4017d0 <prvResetNextTaskUnblockTime+0x28>)
  4017b6:	601a      	str	r2, [r3, #0]
  4017b8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4017ba:	4b04      	ldr	r3, [pc, #16]	; (4017cc <prvResetNextTaskUnblockTime+0x24>)
  4017bc:	681b      	ldr	r3, [r3, #0]
  4017be:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4017c0:	68db      	ldr	r3, [r3, #12]
  4017c2:	685a      	ldr	r2, [r3, #4]
  4017c4:	4b02      	ldr	r3, [pc, #8]	; (4017d0 <prvResetNextTaskUnblockTime+0x28>)
  4017c6:	601a      	str	r2, [r3, #0]
  4017c8:	4770      	bx	lr
  4017ca:	bf00      	nop
  4017cc:	2040094c 	.word	0x2040094c
  4017d0:	20400a0c 	.word	0x20400a0c

004017d4 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  4017d4:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4017d6:	4b0f      	ldr	r3, [pc, #60]	; (401814 <prvAddCurrentTaskToDelayedList+0x40>)
  4017d8:	681b      	ldr	r3, [r3, #0]
  4017da:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4017dc:	4b0e      	ldr	r3, [pc, #56]	; (401818 <prvAddCurrentTaskToDelayedList+0x44>)
  4017de:	681b      	ldr	r3, [r3, #0]
  4017e0:	4298      	cmp	r0, r3
  4017e2:	d207      	bcs.n	4017f4 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017e4:	4b0d      	ldr	r3, [pc, #52]	; (40181c <prvAddCurrentTaskToDelayedList+0x48>)
  4017e6:	6818      	ldr	r0, [r3, #0]
  4017e8:	4b0a      	ldr	r3, [pc, #40]	; (401814 <prvAddCurrentTaskToDelayedList+0x40>)
  4017ea:	6819      	ldr	r1, [r3, #0]
  4017ec:	3104      	adds	r1, #4
  4017ee:	4b0c      	ldr	r3, [pc, #48]	; (401820 <prvAddCurrentTaskToDelayedList+0x4c>)
  4017f0:	4798      	blx	r3
  4017f2:	bd10      	pop	{r4, pc}
  4017f4:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017f6:	4b0b      	ldr	r3, [pc, #44]	; (401824 <prvAddCurrentTaskToDelayedList+0x50>)
  4017f8:	6818      	ldr	r0, [r3, #0]
  4017fa:	4b06      	ldr	r3, [pc, #24]	; (401814 <prvAddCurrentTaskToDelayedList+0x40>)
  4017fc:	6819      	ldr	r1, [r3, #0]
  4017fe:	3104      	adds	r1, #4
  401800:	4b07      	ldr	r3, [pc, #28]	; (401820 <prvAddCurrentTaskToDelayedList+0x4c>)
  401802:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  401804:	4b08      	ldr	r3, [pc, #32]	; (401828 <prvAddCurrentTaskToDelayedList+0x54>)
  401806:	681b      	ldr	r3, [r3, #0]
  401808:	429c      	cmp	r4, r3
  40180a:	d201      	bcs.n	401810 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  40180c:	4b06      	ldr	r3, [pc, #24]	; (401828 <prvAddCurrentTaskToDelayedList+0x54>)
  40180e:	601c      	str	r4, [r3, #0]
  401810:	bd10      	pop	{r4, pc}
  401812:	bf00      	nop
  401814:	204009ec 	.word	0x204009ec
  401818:	20400a08 	.word	0x20400a08
  40181c:	2040096c 	.word	0x2040096c
  401820:	00400b2d 	.word	0x00400b2d
  401824:	2040094c 	.word	0x2040094c
  401828:	20400a0c 	.word	0x20400a0c

0040182c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  40182c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401830:	b083      	sub	sp, #12
  401832:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401834:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401838:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  40183a:	b950      	cbnz	r0, 401852 <xTaskGenericCreate+0x26>
  40183c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401840:	b672      	cpsid	i
  401842:	f383 8811 	msr	BASEPRI, r3
  401846:	f3bf 8f6f 	isb	sy
  40184a:	f3bf 8f4f 	dsb	sy
  40184e:	b662      	cpsie	i
  401850:	e7fe      	b.n	401850 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401852:	2f04      	cmp	r7, #4
  401854:	d90a      	bls.n	40186c <xTaskGenericCreate+0x40>
  401856:	f04f 0380 	mov.w	r3, #128	; 0x80
  40185a:	b672      	cpsid	i
  40185c:	f383 8811 	msr	BASEPRI, r3
  401860:	f3bf 8f6f 	isb	sy
  401864:	f3bf 8f4f 	dsb	sy
  401868:	b662      	cpsie	i
  40186a:	e7fe      	b.n	40186a <xTaskGenericCreate+0x3e>
  40186c:	9001      	str	r0, [sp, #4]
  40186e:	9300      	str	r3, [sp, #0]
  401870:	4690      	mov	r8, r2
  401872:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401874:	b935      	cbnz	r5, 401884 <xTaskGenericCreate+0x58>
  401876:	0090      	lsls	r0, r2, #2
  401878:	4b5f      	ldr	r3, [pc, #380]	; (4019f8 <xTaskGenericCreate+0x1cc>)
  40187a:	4798      	blx	r3

		if( pxStack != NULL )
  40187c:	4605      	mov	r5, r0
  40187e:	2800      	cmp	r0, #0
  401880:	f000 80b4 	beq.w	4019ec <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401884:	2058      	movs	r0, #88	; 0x58
  401886:	4b5c      	ldr	r3, [pc, #368]	; (4019f8 <xTaskGenericCreate+0x1cc>)
  401888:	4798      	blx	r3

			if( pxNewTCB != NULL )
  40188a:	4604      	mov	r4, r0
  40188c:	b1a0      	cbz	r0, 4018b8 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40188e:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401890:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401894:	21a5      	movs	r1, #165	; 0xa5
  401896:	4628      	mov	r0, r5
  401898:	4b58      	ldr	r3, [pc, #352]	; (4019fc <xTaskGenericCreate+0x1d0>)
  40189a:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40189c:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  4018a0:	4445      	add	r5, r8
  4018a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4018a4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  4018a8:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018ac:	7833      	ldrb	r3, [r6, #0]
  4018ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018b2:	7833      	ldrb	r3, [r6, #0]
  4018b4:	b923      	cbnz	r3, 4018c0 <xTaskGenericCreate+0x94>
  4018b6:	e00f      	b.n	4018d8 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  4018b8:	4628      	mov	r0, r5
  4018ba:	4b51      	ldr	r3, [pc, #324]	; (401a00 <xTaskGenericCreate+0x1d4>)
  4018bc:	4798      	blx	r3
  4018be:	e095      	b.n	4019ec <xTaskGenericCreate+0x1c0>
  4018c0:	4633      	mov	r3, r6
  4018c2:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4018c6:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4018c8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4018cc:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4018d0:	7819      	ldrb	r1, [r3, #0]
  4018d2:	b109      	cbz	r1, 4018d8 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4018d4:	429e      	cmp	r6, r3
  4018d6:	d1f7      	bne.n	4018c8 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4018d8:	f04f 0800 	mov.w	r8, #0
  4018dc:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  4018e0:	463e      	mov	r6, r7
  4018e2:	2f04      	cmp	r7, #4
  4018e4:	bf28      	it	cs
  4018e6:	2604      	movcs	r6, #4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  4018e8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4018ea:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4018ec:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4018f0:	f104 0904 	add.w	r9, r4, #4
  4018f4:	4648      	mov	r0, r9
  4018f6:	f8df b154 	ldr.w	fp, [pc, #340]	; 401a4c <xTaskGenericCreate+0x220>
  4018fa:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4018fc:	f104 0018 	add.w	r0, r4, #24
  401900:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401902:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401904:	f1c6 0605 	rsb	r6, r6, #5
  401908:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40190a:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  40190c:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401910:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401914:	9a00      	ldr	r2, [sp, #0]
  401916:	9901      	ldr	r1, [sp, #4]
  401918:	4628      	mov	r0, r5
  40191a:	4b3a      	ldr	r3, [pc, #232]	; (401a04 <xTaskGenericCreate+0x1d8>)
  40191c:	4798      	blx	r3
  40191e:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  401920:	f1ba 0f00 	cmp.w	sl, #0
  401924:	d001      	beq.n	40192a <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401926:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  40192a:	4b37      	ldr	r3, [pc, #220]	; (401a08 <xTaskGenericCreate+0x1dc>)
  40192c:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  40192e:	4a37      	ldr	r2, [pc, #220]	; (401a0c <xTaskGenericCreate+0x1e0>)
  401930:	6813      	ldr	r3, [r2, #0]
  401932:	3301      	adds	r3, #1
  401934:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401936:	4b36      	ldr	r3, [pc, #216]	; (401a10 <xTaskGenericCreate+0x1e4>)
  401938:	681b      	ldr	r3, [r3, #0]
  40193a:	bb0b      	cbnz	r3, 401980 <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40193c:	4b34      	ldr	r3, [pc, #208]	; (401a10 <xTaskGenericCreate+0x1e4>)
  40193e:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401940:	6813      	ldr	r3, [r2, #0]
  401942:	2b01      	cmp	r3, #1
  401944:	d126      	bne.n	401994 <xTaskGenericCreate+0x168>
  401946:	4d33      	ldr	r5, [pc, #204]	; (401a14 <xTaskGenericCreate+0x1e8>)
  401948:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40194c:	4e32      	ldr	r6, [pc, #200]	; (401a18 <xTaskGenericCreate+0x1ec>)
  40194e:	4628      	mov	r0, r5
  401950:	47b0      	blx	r6
  401952:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401954:	4545      	cmp	r5, r8
  401956:	d1fa      	bne.n	40194e <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401958:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401a50 <xTaskGenericCreate+0x224>
  40195c:	4640      	mov	r0, r8
  40195e:	4d2e      	ldr	r5, [pc, #184]	; (401a18 <xTaskGenericCreate+0x1ec>)
  401960:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401962:	4e2e      	ldr	r6, [pc, #184]	; (401a1c <xTaskGenericCreate+0x1f0>)
  401964:	4630      	mov	r0, r6
  401966:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401968:	482d      	ldr	r0, [pc, #180]	; (401a20 <xTaskGenericCreate+0x1f4>)
  40196a:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  40196c:	482d      	ldr	r0, [pc, #180]	; (401a24 <xTaskGenericCreate+0x1f8>)
  40196e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  401970:	482d      	ldr	r0, [pc, #180]	; (401a28 <xTaskGenericCreate+0x1fc>)
  401972:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401974:	4b2d      	ldr	r3, [pc, #180]	; (401a2c <xTaskGenericCreate+0x200>)
  401976:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40197a:	4b2d      	ldr	r3, [pc, #180]	; (401a30 <xTaskGenericCreate+0x204>)
  40197c:	601e      	str	r6, [r3, #0]
  40197e:	e009      	b.n	401994 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  401980:	4b2c      	ldr	r3, [pc, #176]	; (401a34 <xTaskGenericCreate+0x208>)
  401982:	681b      	ldr	r3, [r3, #0]
  401984:	b933      	cbnz	r3, 401994 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401986:	4b22      	ldr	r3, [pc, #136]	; (401a10 <xTaskGenericCreate+0x1e4>)
  401988:	681b      	ldr	r3, [r3, #0]
  40198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40198c:	429f      	cmp	r7, r3
  40198e:	d301      	bcc.n	401994 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  401990:	4b1f      	ldr	r3, [pc, #124]	; (401a10 <xTaskGenericCreate+0x1e4>)
  401992:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401994:	4a28      	ldr	r2, [pc, #160]	; (401a38 <xTaskGenericCreate+0x20c>)
  401996:	6813      	ldr	r3, [r2, #0]
  401998:	3301      	adds	r3, #1
  40199a:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40199c:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40199e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4019a0:	4926      	ldr	r1, [pc, #152]	; (401a3c <xTaskGenericCreate+0x210>)
  4019a2:	680b      	ldr	r3, [r1, #0]
  4019a4:	2201      	movs	r2, #1
  4019a6:	4082      	lsls	r2, r0
  4019a8:	4313      	orrs	r3, r2
  4019aa:	600b      	str	r3, [r1, #0]
  4019ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4019b0:	4649      	mov	r1, r9
  4019b2:	4b18      	ldr	r3, [pc, #96]	; (401a14 <xTaskGenericCreate+0x1e8>)
  4019b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4019b8:	4b21      	ldr	r3, [pc, #132]	; (401a40 <xTaskGenericCreate+0x214>)
  4019ba:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4019bc:	4b21      	ldr	r3, [pc, #132]	; (401a44 <xTaskGenericCreate+0x218>)
  4019be:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  4019c0:	4b1c      	ldr	r3, [pc, #112]	; (401a34 <xTaskGenericCreate+0x208>)
  4019c2:	681b      	ldr	r3, [r3, #0]
  4019c4:	b173      	cbz	r3, 4019e4 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4019c6:	4b12      	ldr	r3, [pc, #72]	; (401a10 <xTaskGenericCreate+0x1e4>)
  4019c8:	681b      	ldr	r3, [r3, #0]
  4019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4019cc:	429f      	cmp	r7, r3
  4019ce:	d90b      	bls.n	4019e8 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  4019d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019d4:	4b1c      	ldr	r3, [pc, #112]	; (401a48 <xTaskGenericCreate+0x21c>)
  4019d6:	601a      	str	r2, [r3, #0]
  4019d8:	f3bf 8f4f 	dsb	sy
  4019dc:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4019e0:	2001      	movs	r0, #1
  4019e2:	e005      	b.n	4019f0 <xTaskGenericCreate+0x1c4>
  4019e4:	2001      	movs	r0, #1
  4019e6:	e003      	b.n	4019f0 <xTaskGenericCreate+0x1c4>
  4019e8:	2001      	movs	r0, #1
  4019ea:	e001      	b.n	4019f0 <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4019ec:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4019f0:	b003      	add	sp, #12
  4019f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019f6:	bf00      	nop
  4019f8:	00400e9d 	.word	0x00400e9d
  4019fc:	00403659 	.word	0x00403659
  401a00:	00400ecd 	.word	0x00400ecd
  401a04:	00400bf5 	.word	0x00400bf5
  401a08:	00400c41 	.word	0x00400c41
  401a0c:	20400a14 	.word	0x20400a14
  401a10:	204009ec 	.word	0x204009ec
  401a14:	20400974 	.word	0x20400974
  401a18:	00400af5 	.word	0x00400af5
  401a1c:	20400a18 	.word	0x20400a18
  401a20:	204009f0 	.word	0x204009f0
  401a24:	204009d8 	.word	0x204009d8
  401a28:	20400a2c 	.word	0x20400a2c
  401a2c:	2040094c 	.word	0x2040094c
  401a30:	2040096c 	.word	0x2040096c
  401a34:	20400950 	.word	0x20400950
  401a38:	20400a10 	.word	0x20400a10
  401a3c:	20400a40 	.word	0x20400a40
  401a40:	00400b15 	.word	0x00400b15
  401a44:	00400c8d 	.word	0x00400c8d
  401a48:	e000ed04 	.word	0xe000ed04
  401a4c:	00400b0d 	.word	0x00400b0d
  401a50:	20400958 	.word	0x20400958

00401a54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401a54:	b510      	push	{r4, lr}
  401a56:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401a58:	2300      	movs	r3, #0
  401a5a:	9303      	str	r3, [sp, #12]
  401a5c:	9302      	str	r3, [sp, #8]
  401a5e:	9301      	str	r3, [sp, #4]
  401a60:	9300      	str	r3, [sp, #0]
  401a62:	2282      	movs	r2, #130	; 0x82
  401a64:	4917      	ldr	r1, [pc, #92]	; (401ac4 <vTaskStartScheduler+0x70>)
  401a66:	4818      	ldr	r0, [pc, #96]	; (401ac8 <vTaskStartScheduler+0x74>)
  401a68:	4c18      	ldr	r4, [pc, #96]	; (401acc <vTaskStartScheduler+0x78>)
  401a6a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401a6c:	2801      	cmp	r0, #1
  401a6e:	d11a      	bne.n	401aa6 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401a70:	4b17      	ldr	r3, [pc, #92]	; (401ad0 <vTaskStartScheduler+0x7c>)
  401a72:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401a74:	2801      	cmp	r0, #1
  401a76:	d116      	bne.n	401aa6 <vTaskStartScheduler+0x52>
  401a78:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a7c:	b672      	cpsid	i
  401a7e:	f383 8811 	msr	BASEPRI, r3
  401a82:	f3bf 8f6f 	isb	sy
  401a86:	f3bf 8f4f 	dsb	sy
  401a8a:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401a8c:	f04f 32ff 	mov.w	r2, #4294967295
  401a90:	4b10      	ldr	r3, [pc, #64]	; (401ad4 <vTaskStartScheduler+0x80>)
  401a92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401a94:	2201      	movs	r2, #1
  401a96:	4b10      	ldr	r3, [pc, #64]	; (401ad8 <vTaskStartScheduler+0x84>)
  401a98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401a9a:	2200      	movs	r2, #0
  401a9c:	4b0f      	ldr	r3, [pc, #60]	; (401adc <vTaskStartScheduler+0x88>)
  401a9e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401aa0:	4b0f      	ldr	r3, [pc, #60]	; (401ae0 <vTaskStartScheduler+0x8c>)
  401aa2:	4798      	blx	r3
  401aa4:	e00b      	b.n	401abe <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401aa6:	b950      	cbnz	r0, 401abe <vTaskStartScheduler+0x6a>
  401aa8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aac:	b672      	cpsid	i
  401aae:	f383 8811 	msr	BASEPRI, r3
  401ab2:	f3bf 8f6f 	isb	sy
  401ab6:	f3bf 8f4f 	dsb	sy
  401aba:	b662      	cpsie	i
  401abc:	e7fe      	b.n	401abc <vTaskStartScheduler+0x68>
	}
}
  401abe:	b004      	add	sp, #16
  401ac0:	bd10      	pop	{r4, pc}
  401ac2:	bf00      	nop
  401ac4:	0040976c 	.word	0x0040976c
  401ac8:	00401dfd 	.word	0x00401dfd
  401acc:	0040182d 	.word	0x0040182d
  401ad0:	004025e1 	.word	0x004025e1
  401ad4:	20400a0c 	.word	0x20400a0c
  401ad8:	20400950 	.word	0x20400950
  401adc:	20400a08 	.word	0x20400a08
  401ae0:	00400d75 	.word	0x00400d75

00401ae4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401ae4:	4a02      	ldr	r2, [pc, #8]	; (401af0 <vTaskSuspendAll+0xc>)
  401ae6:	6813      	ldr	r3, [r2, #0]
  401ae8:	3301      	adds	r3, #1
  401aea:	6013      	str	r3, [r2, #0]
  401aec:	4770      	bx	lr
  401aee:	bf00      	nop
  401af0:	20400a04 	.word	0x20400a04

00401af4 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401af4:	4b01      	ldr	r3, [pc, #4]	; (401afc <xTaskGetTickCount+0x8>)
  401af6:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401af8:	4770      	bx	lr
  401afa:	bf00      	nop
  401afc:	20400a08 	.word	0x20400a08

00401b00 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
  401b00:	4b01      	ldr	r3, [pc, #4]	; (401b08 <uxTaskGetNumberOfTasks+0x8>)
  401b02:	6818      	ldr	r0, [r3, #0]
}
  401b04:	4770      	bx	lr
  401b06:	bf00      	nop
  401b08:	20400a14 	.word	0x20400a14

00401b0c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b10:	4b41      	ldr	r3, [pc, #260]	; (401c18 <xTaskIncrementTick+0x10c>)
  401b12:	681b      	ldr	r3, [r3, #0]
  401b14:	2b00      	cmp	r3, #0
  401b16:	d16f      	bne.n	401bf8 <xTaskIncrementTick+0xec>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401b18:	4b40      	ldr	r3, [pc, #256]	; (401c1c <xTaskIncrementTick+0x110>)
  401b1a:	681a      	ldr	r2, [r3, #0]
  401b1c:	3201      	adds	r2, #1
  401b1e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401b20:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401b22:	b9d6      	cbnz	r6, 401b5a <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401b24:	4b3e      	ldr	r3, [pc, #248]	; (401c20 <xTaskIncrementTick+0x114>)
  401b26:	681b      	ldr	r3, [r3, #0]
  401b28:	681b      	ldr	r3, [r3, #0]
  401b2a:	b153      	cbz	r3, 401b42 <xTaskIncrementTick+0x36>
  401b2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b30:	b672      	cpsid	i
  401b32:	f383 8811 	msr	BASEPRI, r3
  401b36:	f3bf 8f6f 	isb	sy
  401b3a:	f3bf 8f4f 	dsb	sy
  401b3e:	b662      	cpsie	i
  401b40:	e7fe      	b.n	401b40 <xTaskIncrementTick+0x34>
  401b42:	4a37      	ldr	r2, [pc, #220]	; (401c20 <xTaskIncrementTick+0x114>)
  401b44:	6811      	ldr	r1, [r2, #0]
  401b46:	4b37      	ldr	r3, [pc, #220]	; (401c24 <xTaskIncrementTick+0x118>)
  401b48:	6818      	ldr	r0, [r3, #0]
  401b4a:	6010      	str	r0, [r2, #0]
  401b4c:	6019      	str	r1, [r3, #0]
  401b4e:	4a36      	ldr	r2, [pc, #216]	; (401c28 <xTaskIncrementTick+0x11c>)
  401b50:	6813      	ldr	r3, [r2, #0]
  401b52:	3301      	adds	r3, #1
  401b54:	6013      	str	r3, [r2, #0]
  401b56:	4b35      	ldr	r3, [pc, #212]	; (401c2c <xTaskIncrementTick+0x120>)
  401b58:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  401b5a:	4b35      	ldr	r3, [pc, #212]	; (401c30 <xTaskIncrementTick+0x124>)
  401b5c:	681b      	ldr	r3, [r3, #0]
  401b5e:	429e      	cmp	r6, r3
  401b60:	d201      	bcs.n	401b66 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401b62:	2400      	movs	r4, #0
  401b64:	e037      	b.n	401bd6 <xTaskIncrementTick+0xca>
  401b66:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b68:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 401c20 <xTaskIncrementTick+0x114>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b6c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 401c50 <xTaskIncrementTick+0x144>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401b70:	4f30      	ldr	r7, [pc, #192]	; (401c34 <xTaskIncrementTick+0x128>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b72:	f8d9 3000 	ldr.w	r3, [r9]
  401b76:	681b      	ldr	r3, [r3, #0]
  401b78:	b923      	cbnz	r3, 401b84 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401b7a:	f04f 32ff 	mov.w	r2, #4294967295
  401b7e:	4b2c      	ldr	r3, [pc, #176]	; (401c30 <xTaskIncrementTick+0x124>)
  401b80:	601a      	str	r2, [r3, #0]
						break;
  401b82:	e028      	b.n	401bd6 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401b84:	f8d9 3000 	ldr.w	r3, [r9]
  401b88:	68db      	ldr	r3, [r3, #12]
  401b8a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401b8c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401b8e:	429e      	cmp	r6, r3
  401b90:	d202      	bcs.n	401b98 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401b92:	4a27      	ldr	r2, [pc, #156]	; (401c30 <xTaskIncrementTick+0x124>)
  401b94:	6013      	str	r3, [r2, #0]
							break;
  401b96:	e01e      	b.n	401bd6 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401b98:	f105 0a04 	add.w	sl, r5, #4
  401b9c:	4650      	mov	r0, sl
  401b9e:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401ba0:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401ba2:	b113      	cbz	r3, 401baa <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401ba4:	f105 0018 	add.w	r0, r5, #24
  401ba8:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401baa:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401bac:	683b      	ldr	r3, [r7, #0]
  401bae:	2201      	movs	r2, #1
  401bb0:	4082      	lsls	r2, r0
  401bb2:	4313      	orrs	r3, r2
  401bb4:	603b      	str	r3, [r7, #0]
  401bb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401bba:	4651      	mov	r1, sl
  401bbc:	4b1e      	ldr	r3, [pc, #120]	; (401c38 <xTaskIncrementTick+0x12c>)
  401bbe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401bc2:	4b1e      	ldr	r3, [pc, #120]	; (401c3c <xTaskIncrementTick+0x130>)
  401bc4:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401bc6:	4b1e      	ldr	r3, [pc, #120]	; (401c40 <xTaskIncrementTick+0x134>)
  401bc8:	681b      	ldr	r3, [r3, #0]
  401bca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  401bce:	429a      	cmp	r2, r3
  401bd0:	bf28      	it	cs
  401bd2:	2401      	movcs	r4, #1
  401bd4:	e7cd      	b.n	401b72 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401bd6:	4b1a      	ldr	r3, [pc, #104]	; (401c40 <xTaskIncrementTick+0x134>)
  401bd8:	681b      	ldr	r3, [r3, #0]
  401bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401bdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401be0:	4a15      	ldr	r2, [pc, #84]	; (401c38 <xTaskIncrementTick+0x12c>)
  401be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401be6:	2b02      	cmp	r3, #2
  401be8:	bf28      	it	cs
  401bea:	2401      	movcs	r4, #1

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401bec:	4b15      	ldr	r3, [pc, #84]	; (401c44 <xTaskIncrementTick+0x138>)
  401bee:	681b      	ldr	r3, [r3, #0]
  401bf0:	b94b      	cbnz	r3, 401c06 <xTaskIncrementTick+0xfa>
			{
				vApplicationTickHook();
  401bf2:	4b15      	ldr	r3, [pc, #84]	; (401c48 <xTaskIncrementTick+0x13c>)
  401bf4:	4798      	blx	r3
  401bf6:	e006      	b.n	401c06 <xTaskIncrementTick+0xfa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  401bf8:	4a12      	ldr	r2, [pc, #72]	; (401c44 <xTaskIncrementTick+0x138>)
  401bfa:	6813      	ldr	r3, [r2, #0]
  401bfc:	3301      	adds	r3, #1
  401bfe:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
  401c00:	4b11      	ldr	r3, [pc, #68]	; (401c48 <xTaskIncrementTick+0x13c>)
  401c02:	4798      	blx	r3

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401c04:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401c06:	4b11      	ldr	r3, [pc, #68]	; (401c4c <xTaskIncrementTick+0x140>)
  401c08:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401c0a:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  401c0c:	bf0c      	ite	eq
  401c0e:	4620      	moveq	r0, r4
  401c10:	2001      	movne	r0, #1
  401c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c16:	bf00      	nop
  401c18:	20400a04 	.word	0x20400a04
  401c1c:	20400a08 	.word	0x20400a08
  401c20:	2040094c 	.word	0x2040094c
  401c24:	2040096c 	.word	0x2040096c
  401c28:	20400948 	.word	0x20400948
  401c2c:	004017a9 	.word	0x004017a9
  401c30:	20400a0c 	.word	0x20400a0c
  401c34:	20400a40 	.word	0x20400a40
  401c38:	20400974 	.word	0x20400974
  401c3c:	00400b15 	.word	0x00400b15
  401c40:	204009ec 	.word	0x204009ec
  401c44:	20400970 	.word	0x20400970
  401c48:	00402cdd 	.word	0x00402cdd
  401c4c:	20400a44 	.word	0x20400a44
  401c50:	00400b61 	.word	0x00400b61

00401c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401c58:	4b36      	ldr	r3, [pc, #216]	; (401d34 <xTaskResumeAll+0xe0>)
  401c5a:	681b      	ldr	r3, [r3, #0]
  401c5c:	b953      	cbnz	r3, 401c74 <xTaskResumeAll+0x20>
  401c5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c62:	b672      	cpsid	i
  401c64:	f383 8811 	msr	BASEPRI, r3
  401c68:	f3bf 8f6f 	isb	sy
  401c6c:	f3bf 8f4f 	dsb	sy
  401c70:	b662      	cpsie	i
  401c72:	e7fe      	b.n	401c72 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401c74:	4b30      	ldr	r3, [pc, #192]	; (401d38 <xTaskResumeAll+0xe4>)
  401c76:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401c78:	4b2e      	ldr	r3, [pc, #184]	; (401d34 <xTaskResumeAll+0xe0>)
  401c7a:	681a      	ldr	r2, [r3, #0]
  401c7c:	3a01      	subs	r2, #1
  401c7e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c80:	681b      	ldr	r3, [r3, #0]
  401c82:	2b00      	cmp	r3, #0
  401c84:	d14d      	bne.n	401d22 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401c86:	4b2d      	ldr	r3, [pc, #180]	; (401d3c <xTaskResumeAll+0xe8>)
  401c88:	681b      	ldr	r3, [r3, #0]
  401c8a:	bb0b      	cbnz	r3, 401cd0 <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401c8c:	2400      	movs	r4, #0
  401c8e:	e04b      	b.n	401d28 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401c90:	68fb      	ldr	r3, [r7, #12]
  401c92:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401c94:	f104 0018 	add.w	r0, r4, #24
  401c98:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401c9a:	f104 0804 	add.w	r8, r4, #4
  401c9e:	4640      	mov	r0, r8
  401ca0:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401ca2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ca4:	682b      	ldr	r3, [r5, #0]
  401ca6:	2201      	movs	r2, #1
  401ca8:	4082      	lsls	r2, r0
  401caa:	4313      	orrs	r3, r2
  401cac:	602b      	str	r3, [r5, #0]
  401cae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401cb2:	4641      	mov	r1, r8
  401cb4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401cb8:	4b21      	ldr	r3, [pc, #132]	; (401d40 <xTaskResumeAll+0xec>)
  401cba:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401cbc:	4b21      	ldr	r3, [pc, #132]	; (401d44 <xTaskResumeAll+0xf0>)
  401cbe:	681b      	ldr	r3, [r3, #0]
  401cc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401cc4:	429a      	cmp	r2, r3
  401cc6:	d308      	bcc.n	401cda <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401cc8:	2201      	movs	r2, #1
  401cca:	4b1f      	ldr	r3, [pc, #124]	; (401d48 <xTaskResumeAll+0xf4>)
  401ccc:	601a      	str	r2, [r3, #0]
  401cce:	e004      	b.n	401cda <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cd0:	4f1e      	ldr	r7, [pc, #120]	; (401d4c <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401cd2:	4e1f      	ldr	r6, [pc, #124]	; (401d50 <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401cd4:	4d1f      	ldr	r5, [pc, #124]	; (401d54 <xTaskResumeAll+0x100>)
  401cd6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401d68 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401cda:	683b      	ldr	r3, [r7, #0]
  401cdc:	2b00      	cmp	r3, #0
  401cde:	d1d7      	bne.n	401c90 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401ce0:	4b1d      	ldr	r3, [pc, #116]	; (401d58 <xTaskResumeAll+0x104>)
  401ce2:	681b      	ldr	r3, [r3, #0]
  401ce4:	b17b      	cbz	r3, 401d06 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401ce6:	4b1c      	ldr	r3, [pc, #112]	; (401d58 <xTaskResumeAll+0x104>)
  401ce8:	681b      	ldr	r3, [r3, #0]
  401cea:	b163      	cbz	r3, 401d06 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cec:	4e1b      	ldr	r6, [pc, #108]	; (401d5c <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401cee:	4d16      	ldr	r5, [pc, #88]	; (401d48 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401cf0:	4c19      	ldr	r4, [pc, #100]	; (401d58 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  401cf2:	47b0      	blx	r6
  401cf4:	b108      	cbz	r0, 401cfa <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401cf6:	2301      	movs	r3, #1
  401cf8:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401cfa:	6823      	ldr	r3, [r4, #0]
  401cfc:	3b01      	subs	r3, #1
  401cfe:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401d00:	6823      	ldr	r3, [r4, #0]
  401d02:	2b00      	cmp	r3, #0
  401d04:	d1f5      	bne.n	401cf2 <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401d06:	4b10      	ldr	r3, [pc, #64]	; (401d48 <xTaskResumeAll+0xf4>)
  401d08:	681b      	ldr	r3, [r3, #0]
  401d0a:	2b01      	cmp	r3, #1
  401d0c:	d10b      	bne.n	401d26 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d12:	4b13      	ldr	r3, [pc, #76]	; (401d60 <xTaskResumeAll+0x10c>)
  401d14:	601a      	str	r2, [r3, #0]
  401d16:	f3bf 8f4f 	dsb	sy
  401d1a:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401d1e:	2401      	movs	r4, #1
  401d20:	e002      	b.n	401d28 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401d22:	2400      	movs	r4, #0
  401d24:	e000      	b.n	401d28 <xTaskResumeAll+0xd4>
  401d26:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401d28:	4b0e      	ldr	r3, [pc, #56]	; (401d64 <xTaskResumeAll+0x110>)
  401d2a:	4798      	blx	r3

	return xAlreadyYielded;
}
  401d2c:	4620      	mov	r0, r4
  401d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401d32:	bf00      	nop
  401d34:	20400a04 	.word	0x20400a04
  401d38:	00400c41 	.word	0x00400c41
  401d3c:	20400a14 	.word	0x20400a14
  401d40:	00400b15 	.word	0x00400b15
  401d44:	204009ec 	.word	0x204009ec
  401d48:	20400a44 	.word	0x20400a44
  401d4c:	204009f0 	.word	0x204009f0
  401d50:	00400b61 	.word	0x00400b61
  401d54:	20400a40 	.word	0x20400a40
  401d58:	20400970 	.word	0x20400970
  401d5c:	00401b0d 	.word	0x00401b0d
  401d60:	e000ed04 	.word	0xe000ed04
  401d64:	00400c8d 	.word	0x00400c8d
  401d68:	20400974 	.word	0x20400974

00401d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401d6c:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401d6e:	2800      	cmp	r0, #0
  401d70:	d029      	beq.n	401dc6 <vTaskDelay+0x5a>
  401d72:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401d74:	4b18      	ldr	r3, [pc, #96]	; (401dd8 <vTaskDelay+0x6c>)
  401d76:	681b      	ldr	r3, [r3, #0]
  401d78:	b153      	cbz	r3, 401d90 <vTaskDelay+0x24>
  401d7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d7e:	b672      	cpsid	i
  401d80:	f383 8811 	msr	BASEPRI, r3
  401d84:	f3bf 8f6f 	isb	sy
  401d88:	f3bf 8f4f 	dsb	sy
  401d8c:	b662      	cpsie	i
  401d8e:	e7fe      	b.n	401d8e <vTaskDelay+0x22>
			vTaskSuspendAll();
  401d90:	4b12      	ldr	r3, [pc, #72]	; (401ddc <vTaskDelay+0x70>)
  401d92:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401d94:	4b12      	ldr	r3, [pc, #72]	; (401de0 <vTaskDelay+0x74>)
  401d96:	681b      	ldr	r3, [r3, #0]
  401d98:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d9a:	4b12      	ldr	r3, [pc, #72]	; (401de4 <vTaskDelay+0x78>)
  401d9c:	6818      	ldr	r0, [r3, #0]
  401d9e:	3004      	adds	r0, #4
  401da0:	4b11      	ldr	r3, [pc, #68]	; (401de8 <vTaskDelay+0x7c>)
  401da2:	4798      	blx	r3
  401da4:	b948      	cbnz	r0, 401dba <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401da6:	4b0f      	ldr	r3, [pc, #60]	; (401de4 <vTaskDelay+0x78>)
  401da8:	681a      	ldr	r2, [r3, #0]
  401daa:	4910      	ldr	r1, [pc, #64]	; (401dec <vTaskDelay+0x80>)
  401dac:	680b      	ldr	r3, [r1, #0]
  401dae:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401db0:	2201      	movs	r2, #1
  401db2:	4082      	lsls	r2, r0
  401db4:	ea23 0302 	bic.w	r3, r3, r2
  401db8:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401dba:	4620      	mov	r0, r4
  401dbc:	4b0c      	ldr	r3, [pc, #48]	; (401df0 <vTaskDelay+0x84>)
  401dbe:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401dc0:	4b0c      	ldr	r3, [pc, #48]	; (401df4 <vTaskDelay+0x88>)
  401dc2:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401dc4:	b938      	cbnz	r0, 401dd6 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401dca:	4b0b      	ldr	r3, [pc, #44]	; (401df8 <vTaskDelay+0x8c>)
  401dcc:	601a      	str	r2, [r3, #0]
  401dce:	f3bf 8f4f 	dsb	sy
  401dd2:	f3bf 8f6f 	isb	sy
  401dd6:	bd10      	pop	{r4, pc}
  401dd8:	20400a04 	.word	0x20400a04
  401ddc:	00401ae5 	.word	0x00401ae5
  401de0:	20400a08 	.word	0x20400a08
  401de4:	204009ec 	.word	0x204009ec
  401de8:	00400b61 	.word	0x00400b61
  401dec:	20400a40 	.word	0x20400a40
  401df0:	004017d5 	.word	0x004017d5
  401df4:	00401c55 	.word	0x00401c55
  401df8:	e000ed04 	.word	0xe000ed04

00401dfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401dfc:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401dfe:	4d18      	ldr	r5, [pc, #96]	; (401e60 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401e00:	4f18      	ldr	r7, [pc, #96]	; (401e64 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401e02:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401e84 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401e06:	4e18      	ldr	r6, [pc, #96]	; (401e68 <prvIdleTask+0x6c>)
  401e08:	e019      	b.n	401e3e <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401e0a:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401e0c:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
  401e0e:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  401e10:	b1ac      	cbz	r4, 401e3e <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401e12:	4b16      	ldr	r3, [pc, #88]	; (401e6c <prvIdleTask+0x70>)
  401e14:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401e16:	68fb      	ldr	r3, [r7, #12]
  401e18:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401e1a:	1d20      	adds	r0, r4, #4
  401e1c:	4b14      	ldr	r3, [pc, #80]	; (401e70 <prvIdleTask+0x74>)
  401e1e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401e20:	4a14      	ldr	r2, [pc, #80]	; (401e74 <prvIdleTask+0x78>)
  401e22:	6813      	ldr	r3, [r2, #0]
  401e24:	3b01      	subs	r3, #1
  401e26:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401e28:	682b      	ldr	r3, [r5, #0]
  401e2a:	3b01      	subs	r3, #1
  401e2c:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401e2e:	4b12      	ldr	r3, [pc, #72]	; (401e78 <prvIdleTask+0x7c>)
  401e30:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401e32:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401e34:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401e88 <prvIdleTask+0x8c>
  401e38:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  401e3a:	4620      	mov	r0, r4
  401e3c:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401e3e:	682b      	ldr	r3, [r5, #0]
  401e40:	2b00      	cmp	r3, #0
  401e42:	d1e2      	bne.n	401e0a <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401e44:	4b0d      	ldr	r3, [pc, #52]	; (401e7c <prvIdleTask+0x80>)
  401e46:	681b      	ldr	r3, [r3, #0]
  401e48:	2b01      	cmp	r3, #1
  401e4a:	d9dc      	bls.n	401e06 <prvIdleTask+0xa>
			{
				taskYIELD();
  401e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e50:	4b0b      	ldr	r3, [pc, #44]	; (401e80 <prvIdleTask+0x84>)
  401e52:	601a      	str	r2, [r3, #0]
  401e54:	f3bf 8f4f 	dsb	sy
  401e58:	f3bf 8f6f 	isb	sy
  401e5c:	e7d1      	b.n	401e02 <prvIdleTask+0x6>
  401e5e:	bf00      	nop
  401e60:	20400954 	.word	0x20400954
  401e64:	204009d8 	.word	0x204009d8
  401e68:	00401c55 	.word	0x00401c55
  401e6c:	00400c41 	.word	0x00400c41
  401e70:	00400b61 	.word	0x00400b61
  401e74:	20400a14 	.word	0x20400a14
  401e78:	00400c8d 	.word	0x00400c8d
  401e7c:	20400974 	.word	0x20400974
  401e80:	e000ed04 	.word	0xe000ed04
  401e84:	00401ae5 	.word	0x00401ae5
  401e88:	00400ecd 	.word	0x00400ecd

00401e8c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
  401e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e90:	4606      	mov	r6, r0
  401e92:	460c      	mov	r4, r1
  401e94:	4617      	mov	r7, r2
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;

		vTaskSuspendAll();
  401e96:	4b1f      	ldr	r3, [pc, #124]	; (401f14 <uxTaskGetSystemState+0x88>)
  401e98:	4798      	blx	r3
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
  401e9a:	4b1f      	ldr	r3, [pc, #124]	; (401f18 <uxTaskGetSystemState+0x8c>)
  401e9c:	681b      	ldr	r3, [r3, #0]
  401e9e:	42a3      	cmp	r3, r4
  401ea0:	d831      	bhi.n	401f06 <uxTaskGetSystemState+0x7a>
  401ea2:	4b1e      	ldr	r3, [pc, #120]	; (401f1c <uxTaskGetSystemState+0x90>)
  401ea4:	f103 0550 	add.w	r5, r3, #80	; 0x50
  401ea8:	f1a3 0814 	sub.w	r8, r3, #20
  401eac:	2400      	movs	r4, #0
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
  401eae:	f04f 0a01 	mov.w	sl, #1
  401eb2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 401f24 <uxTaskGetSystemState+0x98>
  401eb6:	4652      	mov	r2, sl
  401eb8:	4629      	mov	r1, r5
  401eba:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401ebe:	47c8      	blx	r9
  401ec0:	4404      	add	r4, r0
  401ec2:	3d14      	subs	r5, #20

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ec4:	4545      	cmp	r5, r8
  401ec6:	d1f6      	bne.n	401eb6 <uxTaskGetSystemState+0x2a>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
  401ec8:	4b15      	ldr	r3, [pc, #84]	; (401f20 <uxTaskGetSystemState+0x94>)
  401eca:	6819      	ldr	r1, [r3, #0]
  401ecc:	2202      	movs	r2, #2
  401ece:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401ed2:	4d14      	ldr	r5, [pc, #80]	; (401f24 <uxTaskGetSystemState+0x98>)
  401ed4:	47a8      	blx	r5
  401ed6:	4404      	add	r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
  401ed8:	4b13      	ldr	r3, [pc, #76]	; (401f28 <uxTaskGetSystemState+0x9c>)
  401eda:	6819      	ldr	r1, [r3, #0]
  401edc:	2202      	movs	r2, #2
  401ede:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401ee2:	47a8      	blx	r5
  401ee4:	4404      	add	r4, r0

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
  401ee6:	2204      	movs	r2, #4
  401ee8:	4910      	ldr	r1, [pc, #64]	; (401f2c <uxTaskGetSystemState+0xa0>)
  401eea:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401eee:	47a8      	blx	r5
  401ef0:	4404      	add	r4, r0

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
  401ef2:	2203      	movs	r2, #3
  401ef4:	490e      	ldr	r1, [pc, #56]	; (401f30 <uxTaskGetSystemState+0xa4>)
  401ef6:	eb06 1044 	add.w	r0, r6, r4, lsl #5
  401efa:	47a8      	blx	r5
  401efc:	4404      	add	r4, r0
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
  401efe:	b11f      	cbz	r7, 401f08 <uxTaskGetSystemState+0x7c>
					{
						*pulTotalRunTime = 0;
  401f00:	2300      	movs	r3, #0
  401f02:	603b      	str	r3, [r7, #0]
  401f04:	e000      	b.n	401f08 <uxTaskGetSystemState+0x7c>

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
  401f06:	2400      	movs	r4, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
  401f08:	4b0a      	ldr	r3, [pc, #40]	; (401f34 <uxTaskGetSystemState+0xa8>)
  401f0a:	4798      	blx	r3

		return uxTask;
	}
  401f0c:	4620      	mov	r0, r4
  401f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f12:	bf00      	nop
  401f14:	00401ae5 	.word	0x00401ae5
  401f18:	20400a14 	.word	0x20400a14
  401f1c:	20400974 	.word	0x20400974
  401f20:	2040094c 	.word	0x2040094c
  401f24:	004016f5 	.word	0x004016f5
  401f28:	2040096c 	.word	0x2040096c
  401f2c:	204009d8 	.word	0x204009d8
  401f30:	20400a2c 	.word	0x20400a2c
  401f34:	00401c55 	.word	0x00401c55

00401f38 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401f38:	4b2c      	ldr	r3, [pc, #176]	; (401fec <vTaskSwitchContext+0xb4>)
  401f3a:	681b      	ldr	r3, [r3, #0]
  401f3c:	b11b      	cbz	r3, 401f46 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401f3e:	2201      	movs	r2, #1
  401f40:	4b2b      	ldr	r3, [pc, #172]	; (401ff0 <vTaskSwitchContext+0xb8>)
  401f42:	601a      	str	r2, [r3, #0]
  401f44:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401f46:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
  401f48:	2200      	movs	r2, #0
  401f4a:	4b29      	ldr	r3, [pc, #164]	; (401ff0 <vTaskSwitchContext+0xb8>)
  401f4c:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
  401f4e:	4b29      	ldr	r3, [pc, #164]	; (401ff4 <vTaskSwitchContext+0xbc>)
  401f50:	681b      	ldr	r3, [r3, #0]
  401f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401f54:	681a      	ldr	r2, [r3, #0]
  401f56:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401f5a:	d10b      	bne.n	401f74 <vTaskSwitchContext+0x3c>
  401f5c:	685a      	ldr	r2, [r3, #4]
  401f5e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401f62:	d107      	bne.n	401f74 <vTaskSwitchContext+0x3c>
  401f64:	689a      	ldr	r2, [r3, #8]
  401f66:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401f6a:	d103      	bne.n	401f74 <vTaskSwitchContext+0x3c>
  401f6c:	68db      	ldr	r3, [r3, #12]
  401f6e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401f72:	d005      	beq.n	401f80 <vTaskSwitchContext+0x48>
  401f74:	4b1f      	ldr	r3, [pc, #124]	; (401ff4 <vTaskSwitchContext+0xbc>)
  401f76:	6818      	ldr	r0, [r3, #0]
  401f78:	6819      	ldr	r1, [r3, #0]
  401f7a:	3134      	adds	r1, #52	; 0x34
  401f7c:	4b1e      	ldr	r3, [pc, #120]	; (401ff8 <vTaskSwitchContext+0xc0>)
  401f7e:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401f80:	4b1e      	ldr	r3, [pc, #120]	; (401ffc <vTaskSwitchContext+0xc4>)
  401f82:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401f84:	fab3 f383 	clz	r3, r3
  401f88:	b2db      	uxtb	r3, r3
  401f8a:	f1c3 031f 	rsb	r3, r3, #31
  401f8e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401f92:	4a1b      	ldr	r2, [pc, #108]	; (402000 <vTaskSwitchContext+0xc8>)
  401f94:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401f98:	b952      	cbnz	r2, 401fb0 <vTaskSwitchContext+0x78>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401f9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f9e:	b672      	cpsid	i
  401fa0:	f383 8811 	msr	BASEPRI, r3
  401fa4:	f3bf 8f6f 	isb	sy
  401fa8:	f3bf 8f4f 	dsb	sy
  401fac:	b662      	cpsie	i
  401fae:	e7fe      	b.n	401fae <vTaskSwitchContext+0x76>
  401fb0:	4a13      	ldr	r2, [pc, #76]	; (402000 <vTaskSwitchContext+0xc8>)
  401fb2:	0099      	lsls	r1, r3, #2
  401fb4:	18c8      	adds	r0, r1, r3
  401fb6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401fba:	6844      	ldr	r4, [r0, #4]
  401fbc:	6864      	ldr	r4, [r4, #4]
  401fbe:	6044      	str	r4, [r0, #4]
  401fc0:	4602      	mov	r2, r0
  401fc2:	3208      	adds	r2, #8
  401fc4:	4294      	cmp	r4, r2
  401fc6:	d106      	bne.n	401fd6 <vTaskSwitchContext+0x9e>
  401fc8:	6860      	ldr	r0, [r4, #4]
  401fca:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401fce:	4a0c      	ldr	r2, [pc, #48]	; (402000 <vTaskSwitchContext+0xc8>)
  401fd0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401fd4:	6050      	str	r0, [r2, #4]
  401fd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401fda:	4a09      	ldr	r2, [pc, #36]	; (402000 <vTaskSwitchContext+0xc8>)
  401fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401fe0:	685b      	ldr	r3, [r3, #4]
  401fe2:	68da      	ldr	r2, [r3, #12]
  401fe4:	4b03      	ldr	r3, [pc, #12]	; (401ff4 <vTaskSwitchContext+0xbc>)
  401fe6:	601a      	str	r2, [r3, #0]
  401fe8:	bd10      	pop	{r4, pc}
  401fea:	bf00      	nop
  401fec:	20400a04 	.word	0x20400a04
  401ff0:	20400a44 	.word	0x20400a44
  401ff4:	204009ec 	.word	0x204009ec
  401ff8:	00402cc5 	.word	0x00402cc5
  401ffc:	20400a40 	.word	0x20400a40
  402000:	20400974 	.word	0x20400974

00402004 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  402004:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  402006:	b950      	cbnz	r0, 40201e <vTaskPlaceOnEventList+0x1a>
  402008:	f04f 0380 	mov.w	r3, #128	; 0x80
  40200c:	b672      	cpsid	i
  40200e:	f383 8811 	msr	BASEPRI, r3
  402012:	f3bf 8f6f 	isb	sy
  402016:	f3bf 8f4f 	dsb	sy
  40201a:	b662      	cpsie	i
  40201c:	e7fe      	b.n	40201c <vTaskPlaceOnEventList+0x18>
  40201e:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402020:	4d11      	ldr	r5, [pc, #68]	; (402068 <vTaskPlaceOnEventList+0x64>)
  402022:	6829      	ldr	r1, [r5, #0]
  402024:	3118      	adds	r1, #24
  402026:	4b11      	ldr	r3, [pc, #68]	; (40206c <vTaskPlaceOnEventList+0x68>)
  402028:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40202a:	6828      	ldr	r0, [r5, #0]
  40202c:	3004      	adds	r0, #4
  40202e:	4b10      	ldr	r3, [pc, #64]	; (402070 <vTaskPlaceOnEventList+0x6c>)
  402030:	4798      	blx	r3
  402032:	b940      	cbnz	r0, 402046 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402034:	682a      	ldr	r2, [r5, #0]
  402036:	490f      	ldr	r1, [pc, #60]	; (402074 <vTaskPlaceOnEventList+0x70>)
  402038:	680b      	ldr	r3, [r1, #0]
  40203a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40203c:	2201      	movs	r2, #1
  40203e:	4082      	lsls	r2, r0
  402040:	ea23 0302 	bic.w	r3, r3, r2
  402044:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  402046:	f1b4 3fff 	cmp.w	r4, #4294967295
  40204a:	d106      	bne.n	40205a <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40204c:	4b06      	ldr	r3, [pc, #24]	; (402068 <vTaskPlaceOnEventList+0x64>)
  40204e:	6819      	ldr	r1, [r3, #0]
  402050:	3104      	adds	r1, #4
  402052:	4809      	ldr	r0, [pc, #36]	; (402078 <vTaskPlaceOnEventList+0x74>)
  402054:	4b09      	ldr	r3, [pc, #36]	; (40207c <vTaskPlaceOnEventList+0x78>)
  402056:	4798      	blx	r3
  402058:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  40205a:	4b09      	ldr	r3, [pc, #36]	; (402080 <vTaskPlaceOnEventList+0x7c>)
  40205c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40205e:	4420      	add	r0, r4
  402060:	4b08      	ldr	r3, [pc, #32]	; (402084 <vTaskPlaceOnEventList+0x80>)
  402062:	4798      	blx	r3
  402064:	bd38      	pop	{r3, r4, r5, pc}
  402066:	bf00      	nop
  402068:	204009ec 	.word	0x204009ec
  40206c:	00400b2d 	.word	0x00400b2d
  402070:	00400b61 	.word	0x00400b61
  402074:	20400a40 	.word	0x20400a40
  402078:	20400a2c 	.word	0x20400a2c
  40207c:	00400b15 	.word	0x00400b15
  402080:	20400a08 	.word	0x20400a08
  402084:	004017d5 	.word	0x004017d5

00402088 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  402088:	b950      	cbnz	r0, 4020a0 <vTaskPlaceOnEventListRestricted+0x18>
  40208a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40208e:	b672      	cpsid	i
  402090:	f383 8811 	msr	BASEPRI, r3
  402094:	f3bf 8f6f 	isb	sy
  402098:	f3bf 8f4f 	dsb	sy
  40209c:	b662      	cpsie	i
  40209e:	e7fe      	b.n	40209e <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  4020a0:	b570      	push	{r4, r5, r6, lr}
  4020a2:	4615      	mov	r5, r2
  4020a4:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4020a6:	4e11      	ldr	r6, [pc, #68]	; (4020ec <vTaskPlaceOnEventListRestricted+0x64>)
  4020a8:	6831      	ldr	r1, [r6, #0]
  4020aa:	3118      	adds	r1, #24
  4020ac:	4b10      	ldr	r3, [pc, #64]	; (4020f0 <vTaskPlaceOnEventListRestricted+0x68>)
  4020ae:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4020b0:	6830      	ldr	r0, [r6, #0]
  4020b2:	3004      	adds	r0, #4
  4020b4:	4b0f      	ldr	r3, [pc, #60]	; (4020f4 <vTaskPlaceOnEventListRestricted+0x6c>)
  4020b6:	4798      	blx	r3
  4020b8:	b940      	cbnz	r0, 4020cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4020ba:	6832      	ldr	r2, [r6, #0]
  4020bc:	490e      	ldr	r1, [pc, #56]	; (4020f8 <vTaskPlaceOnEventListRestricted+0x70>)
  4020be:	680b      	ldr	r3, [r1, #0]
  4020c0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4020c2:	2201      	movs	r2, #1
  4020c4:	4082      	lsls	r2, r0
  4020c6:	ea23 0302 	bic.w	r3, r3, r2
  4020ca:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  4020cc:	2d01      	cmp	r5, #1
  4020ce:	d106      	bne.n	4020de <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4020d0:	4b06      	ldr	r3, [pc, #24]	; (4020ec <vTaskPlaceOnEventListRestricted+0x64>)
  4020d2:	6819      	ldr	r1, [r3, #0]
  4020d4:	3104      	adds	r1, #4
  4020d6:	4809      	ldr	r0, [pc, #36]	; (4020fc <vTaskPlaceOnEventListRestricted+0x74>)
  4020d8:	4b05      	ldr	r3, [pc, #20]	; (4020f0 <vTaskPlaceOnEventListRestricted+0x68>)
  4020da:	4798      	blx	r3
  4020dc:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  4020de:	4b08      	ldr	r3, [pc, #32]	; (402100 <vTaskPlaceOnEventListRestricted+0x78>)
  4020e0:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4020e2:	4420      	add	r0, r4
  4020e4:	4b07      	ldr	r3, [pc, #28]	; (402104 <vTaskPlaceOnEventListRestricted+0x7c>)
  4020e6:	4798      	blx	r3
  4020e8:	bd70      	pop	{r4, r5, r6, pc}
  4020ea:	bf00      	nop
  4020ec:	204009ec 	.word	0x204009ec
  4020f0:	00400b15 	.word	0x00400b15
  4020f4:	00400b61 	.word	0x00400b61
  4020f8:	20400a40 	.word	0x20400a40
  4020fc:	20400a2c 	.word	0x20400a2c
  402100:	20400a08 	.word	0x20400a08
  402104:	004017d5 	.word	0x004017d5

00402108 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  402108:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40210a:	68c3      	ldr	r3, [r0, #12]
  40210c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40210e:	b954      	cbnz	r4, 402126 <xTaskRemoveFromEventList+0x1e>
  402110:	f04f 0380 	mov.w	r3, #128	; 0x80
  402114:	b672      	cpsid	i
  402116:	f383 8811 	msr	BASEPRI, r3
  40211a:	f3bf 8f6f 	isb	sy
  40211e:	f3bf 8f4f 	dsb	sy
  402122:	b662      	cpsie	i
  402124:	e7fe      	b.n	402124 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402126:	f104 0518 	add.w	r5, r4, #24
  40212a:	4628      	mov	r0, r5
  40212c:	4b14      	ldr	r3, [pc, #80]	; (402180 <xTaskRemoveFromEventList+0x78>)
  40212e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402130:	4b14      	ldr	r3, [pc, #80]	; (402184 <xTaskRemoveFromEventList+0x7c>)
  402132:	681b      	ldr	r3, [r3, #0]
  402134:	b99b      	cbnz	r3, 40215e <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402136:	1d25      	adds	r5, r4, #4
  402138:	4628      	mov	r0, r5
  40213a:	4b11      	ldr	r3, [pc, #68]	; (402180 <xTaskRemoveFromEventList+0x78>)
  40213c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  40213e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402140:	4911      	ldr	r1, [pc, #68]	; (402188 <xTaskRemoveFromEventList+0x80>)
  402142:	680b      	ldr	r3, [r1, #0]
  402144:	2201      	movs	r2, #1
  402146:	4082      	lsls	r2, r0
  402148:	4313      	orrs	r3, r2
  40214a:	600b      	str	r3, [r1, #0]
  40214c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402150:	4629      	mov	r1, r5
  402152:	4b0e      	ldr	r3, [pc, #56]	; (40218c <xTaskRemoveFromEventList+0x84>)
  402154:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402158:	4b0d      	ldr	r3, [pc, #52]	; (402190 <xTaskRemoveFromEventList+0x88>)
  40215a:	4798      	blx	r3
  40215c:	e003      	b.n	402166 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40215e:	4629      	mov	r1, r5
  402160:	480c      	ldr	r0, [pc, #48]	; (402194 <xTaskRemoveFromEventList+0x8c>)
  402162:	4b0b      	ldr	r3, [pc, #44]	; (402190 <xTaskRemoveFromEventList+0x88>)
  402164:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402166:	4b0c      	ldr	r3, [pc, #48]	; (402198 <xTaskRemoveFromEventList+0x90>)
  402168:	681b      	ldr	r3, [r3, #0]
  40216a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40216e:	429a      	cmp	r2, r3
  402170:	d903      	bls.n	40217a <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  402172:	2001      	movs	r0, #1
  402174:	4b09      	ldr	r3, [pc, #36]	; (40219c <xTaskRemoveFromEventList+0x94>)
  402176:	6018      	str	r0, [r3, #0]
  402178:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  40217a:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  40217c:	bd38      	pop	{r3, r4, r5, pc}
  40217e:	bf00      	nop
  402180:	00400b61 	.word	0x00400b61
  402184:	20400a04 	.word	0x20400a04
  402188:	20400a40 	.word	0x20400a40
  40218c:	20400974 	.word	0x20400974
  402190:	00400b15 	.word	0x00400b15
  402194:	204009f0 	.word	0x204009f0
  402198:	204009ec 	.word	0x204009ec
  40219c:	20400a44 	.word	0x20400a44

004021a0 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  4021a0:	b950      	cbnz	r0, 4021b8 <vTaskSetTimeOutState+0x18>
  4021a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021a6:	b672      	cpsid	i
  4021a8:	f383 8811 	msr	BASEPRI, r3
  4021ac:	f3bf 8f6f 	isb	sy
  4021b0:	f3bf 8f4f 	dsb	sy
  4021b4:	b662      	cpsie	i
  4021b6:	e7fe      	b.n	4021b6 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4021b8:	4a03      	ldr	r2, [pc, #12]	; (4021c8 <vTaskSetTimeOutState+0x28>)
  4021ba:	6812      	ldr	r2, [r2, #0]
  4021bc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4021be:	4a03      	ldr	r2, [pc, #12]	; (4021cc <vTaskSetTimeOutState+0x2c>)
  4021c0:	6812      	ldr	r2, [r2, #0]
  4021c2:	6042      	str	r2, [r0, #4]
  4021c4:	4770      	bx	lr
  4021c6:	bf00      	nop
  4021c8:	20400948 	.word	0x20400948
  4021cc:	20400a08 	.word	0x20400a08

004021d0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4021d0:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4021d2:	b950      	cbnz	r0, 4021ea <xTaskCheckForTimeOut+0x1a>
  4021d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021d8:	b672      	cpsid	i
  4021da:	f383 8811 	msr	BASEPRI, r3
  4021de:	f3bf 8f6f 	isb	sy
  4021e2:	f3bf 8f4f 	dsb	sy
  4021e6:	b662      	cpsie	i
  4021e8:	e7fe      	b.n	4021e8 <xTaskCheckForTimeOut+0x18>
  4021ea:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4021ec:	b951      	cbnz	r1, 402204 <xTaskCheckForTimeOut+0x34>
  4021ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021f2:	b672      	cpsid	i
  4021f4:	f383 8811 	msr	BASEPRI, r3
  4021f8:	f3bf 8f6f 	isb	sy
  4021fc:	f3bf 8f4f 	dsb	sy
  402200:	b662      	cpsie	i
  402202:	e7fe      	b.n	402202 <xTaskCheckForTimeOut+0x32>
  402204:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  402206:	4b12      	ldr	r3, [pc, #72]	; (402250 <xTaskCheckForTimeOut+0x80>)
  402208:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  40220a:	4b12      	ldr	r3, [pc, #72]	; (402254 <xTaskCheckForTimeOut+0x84>)
  40220c:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  40220e:	682b      	ldr	r3, [r5, #0]
  402210:	f1b3 3fff 	cmp.w	r3, #4294967295
  402214:	d013      	beq.n	40223e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402216:	4a10      	ldr	r2, [pc, #64]	; (402258 <xTaskCheckForTimeOut+0x88>)
  402218:	6812      	ldr	r2, [r2, #0]
  40221a:	6820      	ldr	r0, [r4, #0]
  40221c:	4290      	cmp	r0, r2
  40221e:	d002      	beq.n	402226 <xTaskCheckForTimeOut+0x56>
  402220:	6862      	ldr	r2, [r4, #4]
  402222:	4291      	cmp	r1, r2
  402224:	d20d      	bcs.n	402242 <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402226:	6862      	ldr	r2, [r4, #4]
  402228:	1a88      	subs	r0, r1, r2
  40222a:	4283      	cmp	r3, r0
  40222c:	d90b      	bls.n	402246 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40222e:	1a52      	subs	r2, r2, r1
  402230:	4413      	add	r3, r2
  402232:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402234:	4620      	mov	r0, r4
  402236:	4b09      	ldr	r3, [pc, #36]	; (40225c <xTaskCheckForTimeOut+0x8c>)
  402238:	4798      	blx	r3
			xReturn = pdFALSE;
  40223a:	2400      	movs	r4, #0
  40223c:	e004      	b.n	402248 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  40223e:	2400      	movs	r4, #0
  402240:	e002      	b.n	402248 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  402242:	2401      	movs	r4, #1
  402244:	e000      	b.n	402248 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  402246:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  402248:	4b05      	ldr	r3, [pc, #20]	; (402260 <xTaskCheckForTimeOut+0x90>)
  40224a:	4798      	blx	r3

	return xReturn;
}
  40224c:	4620      	mov	r0, r4
  40224e:	bd38      	pop	{r3, r4, r5, pc}
  402250:	00400c41 	.word	0x00400c41
  402254:	20400a08 	.word	0x20400a08
  402258:	20400948 	.word	0x20400948
  40225c:	004021a1 	.word	0x004021a1
  402260:	00400c8d 	.word	0x00400c8d

00402264 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  402264:	2201      	movs	r2, #1
  402266:	4b01      	ldr	r3, [pc, #4]	; (40226c <vTaskMissedYield+0x8>)
  402268:	601a      	str	r2, [r3, #0]
  40226a:	4770      	bx	lr
  40226c:	20400a44 	.word	0x20400a44

00402270 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402270:	4b05      	ldr	r3, [pc, #20]	; (402288 <xTaskGetSchedulerState+0x18>)
  402272:	681b      	ldr	r3, [r3, #0]
  402274:	b133      	cbz	r3, 402284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402276:	4b05      	ldr	r3, [pc, #20]	; (40228c <xTaskGetSchedulerState+0x1c>)
  402278:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40227a:	2b00      	cmp	r3, #0
  40227c:	bf0c      	ite	eq
  40227e:	2002      	moveq	r0, #2
  402280:	2000      	movne	r0, #0
  402282:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  402284:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  402286:	4770      	bx	lr
  402288:	20400950 	.word	0x20400950
  40228c:	20400a04 	.word	0x20400a04

00402290 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402290:	2800      	cmp	r0, #0
  402292:	d045      	beq.n	402320 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  402294:	b538      	push	{r3, r4, r5, lr}
  402296:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402298:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40229a:	4922      	ldr	r1, [pc, #136]	; (402324 <vTaskPriorityInherit+0x94>)
  40229c:	6809      	ldr	r1, [r1, #0]
  40229e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4022a0:	428a      	cmp	r2, r1
  4022a2:	d23c      	bcs.n	40231e <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4022a4:	6981      	ldr	r1, [r0, #24]
  4022a6:	2900      	cmp	r1, #0
  4022a8:	db05      	blt.n	4022b6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4022aa:	491e      	ldr	r1, [pc, #120]	; (402324 <vTaskPriorityInherit+0x94>)
  4022ac:	6809      	ldr	r1, [r1, #0]
  4022ae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4022b0:	f1c1 0105 	rsb	r1, r1, #5
  4022b4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4022b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4022ba:	491b      	ldr	r1, [pc, #108]	; (402328 <vTaskPriorityInherit+0x98>)
  4022bc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4022c0:	6959      	ldr	r1, [r3, #20]
  4022c2:	4291      	cmp	r1, r2
  4022c4:	d127      	bne.n	402316 <vTaskPriorityInherit+0x86>
  4022c6:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4022c8:	1d1d      	adds	r5, r3, #4
  4022ca:	4628      	mov	r0, r5
  4022cc:	4b17      	ldr	r3, [pc, #92]	; (40232c <vTaskPriorityInherit+0x9c>)
  4022ce:	4798      	blx	r3
  4022d0:	b970      	cbnz	r0, 4022f0 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4022d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4022d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4022d8:	4a13      	ldr	r2, [pc, #76]	; (402328 <vTaskPriorityInherit+0x98>)
  4022da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4022de:	b93a      	cbnz	r2, 4022f0 <vTaskPriorityInherit+0x60>
  4022e0:	4813      	ldr	r0, [pc, #76]	; (402330 <vTaskPriorityInherit+0xa0>)
  4022e2:	6802      	ldr	r2, [r0, #0]
  4022e4:	2101      	movs	r1, #1
  4022e6:	fa01 f303 	lsl.w	r3, r1, r3
  4022ea:	ea22 0303 	bic.w	r3, r2, r3
  4022ee:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4022f0:	4b0c      	ldr	r3, [pc, #48]	; (402324 <vTaskPriorityInherit+0x94>)
  4022f2:	681b      	ldr	r3, [r3, #0]
  4022f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4022f6:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4022f8:	490d      	ldr	r1, [pc, #52]	; (402330 <vTaskPriorityInherit+0xa0>)
  4022fa:	680a      	ldr	r2, [r1, #0]
  4022fc:	2301      	movs	r3, #1
  4022fe:	4083      	lsls	r3, r0
  402300:	4313      	orrs	r3, r2
  402302:	600b      	str	r3, [r1, #0]
  402304:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402308:	4629      	mov	r1, r5
  40230a:	4b07      	ldr	r3, [pc, #28]	; (402328 <vTaskPriorityInherit+0x98>)
  40230c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402310:	4b08      	ldr	r3, [pc, #32]	; (402334 <vTaskPriorityInherit+0xa4>)
  402312:	4798      	blx	r3
  402314:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402316:	4a03      	ldr	r2, [pc, #12]	; (402324 <vTaskPriorityInherit+0x94>)
  402318:	6812      	ldr	r2, [r2, #0]
  40231a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  40231c:	62da      	str	r2, [r3, #44]	; 0x2c
  40231e:	bd38      	pop	{r3, r4, r5, pc}
  402320:	4770      	bx	lr
  402322:	bf00      	nop
  402324:	204009ec 	.word	0x204009ec
  402328:	20400974 	.word	0x20400974
  40232c:	00400b61 	.word	0x00400b61
  402330:	20400a40 	.word	0x20400a40
  402334:	00400b15 	.word	0x00400b15

00402338 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402338:	2800      	cmp	r0, #0
  40233a:	d04e      	beq.n	4023da <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  40233c:	b538      	push	{r3, r4, r5, lr}
  40233e:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402340:	4a28      	ldr	r2, [pc, #160]	; (4023e4 <xTaskPriorityDisinherit+0xac>)
  402342:	6812      	ldr	r2, [r2, #0]
  402344:	4290      	cmp	r0, r2
  402346:	d00a      	beq.n	40235e <xTaskPriorityDisinherit+0x26>
  402348:	f04f 0380 	mov.w	r3, #128	; 0x80
  40234c:	b672      	cpsid	i
  40234e:	f383 8811 	msr	BASEPRI, r3
  402352:	f3bf 8f6f 	isb	sy
  402356:	f3bf 8f4f 	dsb	sy
  40235a:	b662      	cpsie	i
  40235c:	e7fe      	b.n	40235c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  40235e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402360:	b952      	cbnz	r2, 402378 <xTaskPriorityDisinherit+0x40>
  402362:	f04f 0380 	mov.w	r3, #128	; 0x80
  402366:	b672      	cpsid	i
  402368:	f383 8811 	msr	BASEPRI, r3
  40236c:	f3bf 8f6f 	isb	sy
  402370:	f3bf 8f4f 	dsb	sy
  402374:	b662      	cpsie	i
  402376:	e7fe      	b.n	402376 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402378:	3a01      	subs	r2, #1
  40237a:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  40237c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  40237e:	6c99      	ldr	r1, [r3, #72]	; 0x48
  402380:	4288      	cmp	r0, r1
  402382:	d02c      	beq.n	4023de <xTaskPriorityDisinherit+0xa6>
  402384:	bb5a      	cbnz	r2, 4023de <xTaskPriorityDisinherit+0xa6>
  402386:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402388:	1d1d      	adds	r5, r3, #4
  40238a:	4628      	mov	r0, r5
  40238c:	4b16      	ldr	r3, [pc, #88]	; (4023e8 <xTaskPriorityDisinherit+0xb0>)
  40238e:	4798      	blx	r3
  402390:	b968      	cbnz	r0, 4023ae <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402392:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402394:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402398:	4b14      	ldr	r3, [pc, #80]	; (4023ec <xTaskPriorityDisinherit+0xb4>)
  40239a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40239e:	b933      	cbnz	r3, 4023ae <xTaskPriorityDisinherit+0x76>
  4023a0:	4813      	ldr	r0, [pc, #76]	; (4023f0 <xTaskPriorityDisinherit+0xb8>)
  4023a2:	6803      	ldr	r3, [r0, #0]
  4023a4:	2201      	movs	r2, #1
  4023a6:	408a      	lsls	r2, r1
  4023a8:	ea23 0302 	bic.w	r3, r3, r2
  4023ac:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4023ae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4023b0:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023b2:	f1c0 0305 	rsb	r3, r0, #5
  4023b6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4023b8:	4a0d      	ldr	r2, [pc, #52]	; (4023f0 <xTaskPriorityDisinherit+0xb8>)
  4023ba:	6813      	ldr	r3, [r2, #0]
  4023bc:	2401      	movs	r4, #1
  4023be:	fa04 f100 	lsl.w	r1, r4, r0
  4023c2:	430b      	orrs	r3, r1
  4023c4:	6013      	str	r3, [r2, #0]
  4023c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023ca:	4629      	mov	r1, r5
  4023cc:	4b07      	ldr	r3, [pc, #28]	; (4023ec <xTaskPriorityDisinherit+0xb4>)
  4023ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023d2:	4b08      	ldr	r3, [pc, #32]	; (4023f4 <xTaskPriorityDisinherit+0xbc>)
  4023d4:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4023d6:	4620      	mov	r0, r4
  4023d8:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4023da:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4023dc:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4023de:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4023e0:	bd38      	pop	{r3, r4, r5, pc}
  4023e2:	bf00      	nop
  4023e4:	204009ec 	.word	0x204009ec
  4023e8:	00400b61 	.word	0x00400b61
  4023ec:	20400974 	.word	0x20400974
  4023f0:	20400a40 	.word	0x20400a40
  4023f4:	00400b15 	.word	0x00400b15

004023f8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
  4023f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4023fc:	b084      	sub	sp, #16
  4023fe:	4604      	mov	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
  402400:	2300      	movs	r3, #0
  402402:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
  402404:	4b34      	ldr	r3, [pc, #208]	; (4024d8 <vTaskList+0xe0>)
  402406:	681a      	ldr	r2, [r3, #0]
  402408:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
  40240a:	6818      	ldr	r0, [r3, #0]
  40240c:	0140      	lsls	r0, r0, #5
  40240e:	4b33      	ldr	r3, [pc, #204]	; (4024dc <vTaskList+0xe4>)
  402410:	4798      	blx	r3

		if( pxTaskStatusArray != NULL )
  402412:	2800      	cmp	r0, #0
  402414:	d05c      	beq.n	4024d0 <vTaskList+0xd8>
  402416:	4605      	mov	r5, r0
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
  402418:	9903      	ldr	r1, [sp, #12]
  40241a:	2200      	movs	r2, #0
  40241c:	4b30      	ldr	r3, [pc, #192]	; (4024e0 <vTaskList+0xe8>)
  40241e:	4798      	blx	r3
  402420:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
  402422:	2300      	movs	r3, #0
  402424:	9302      	str	r3, [sp, #8]
  402426:	9a02      	ldr	r2, [sp, #8]
  402428:	9b03      	ldr	r3, [sp, #12]
  40242a:	429a      	cmp	r2, r3
  40242c:	d24d      	bcs.n	4024ca <vTaskList+0xd2>
					case eDeleted:		cStatus = tskDELETED_CHAR;
										break;

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
  40242e:	f04f 0800 	mov.w	r8, #0
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
  402432:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4024f4 <vTaskList+0xfc>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402436:	4e2b      	ldr	r6, [pc, #172]	; (4024e4 <vTaskList+0xec>)
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
  402438:	9b02      	ldr	r3, [sp, #8]
  40243a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
  40243e:	7b1b      	ldrb	r3, [r3, #12]
  402440:	3b01      	subs	r3, #1
  402442:	2b03      	cmp	r3, #3
  402444:	d809      	bhi.n	40245a <vTaskList+0x62>
  402446:	e8df f003 	tbb	[pc, r3]
  40244a:	020a      	.short	0x020a
  40244c:	0604      	.short	0x0604
				{
					case eReady:		cStatus = tskREADY_CHAR;
										break;

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
  40244e:	2742      	movs	r7, #66	; 0x42
  402450:	e006      	b.n	402460 <vTaskList+0x68>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
  402452:	2753      	movs	r7, #83	; 0x53
										break;
  402454:	e004      	b.n	402460 <vTaskList+0x68>

					case eDeleted:		cStatus = tskDELETED_CHAR;
  402456:	2744      	movs	r7, #68	; 0x44
										break;
  402458:	e002      	b.n	402460 <vTaskList+0x68>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
  40245a:	4647      	mov	r7, r8
										break;
  40245c:	e000      	b.n	402460 <vTaskList+0x68>
			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
				{
					case eReady:		cStatus = tskREADY_CHAR;
  40245e:	2752      	movs	r7, #82	; 0x52
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  402460:	9b02      	ldr	r3, [sp, #8]
  402462:	eb05 1343 	add.w	r3, r5, r3, lsl #5
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
  402466:	6859      	ldr	r1, [r3, #4]
  402468:	4620      	mov	r0, r4
  40246a:	47c8      	blx	r9

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  40246c:	4620      	mov	r0, r4
  40246e:	47b0      	blx	r6
  402470:	2808      	cmp	r0, #8
  402472:	d808      	bhi.n	402486 <vTaskList+0x8e>
  402474:	4420      	add	r0, r4
  402476:	f104 0209 	add.w	r2, r4, #9
		{
			pcBuffer[ x ] = ' ';
  40247a:	2320      	movs	r3, #32
  40247c:	f800 3b01 	strb.w	r3, [r0], #1
		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402480:	4290      	cmp	r0, r2
  402482:	d1fb      	bne.n	40247c <vTaskList+0x84>
  402484:	2009      	movs	r0, #9
		{
			pcBuffer[ x ] = ' ';
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
  402486:	eb04 0a00 	add.w	sl, r4, r0
  40248a:	f804 8000 	strb.w	r8, [r4, r0]
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
  40248e:	9b02      	ldr	r3, [sp, #8]
  402490:	9a02      	ldr	r2, [sp, #8]
  402492:	9902      	ldr	r1, [sp, #8]
  402494:	eb05 1343 	add.w	r3, r5, r3, lsl #5
  402498:	691b      	ldr	r3, [r3, #16]
  40249a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
  40249e:	6889      	ldr	r1, [r1, #8]
  4024a0:	9101      	str	r1, [sp, #4]
  4024a2:	eb05 1242 	add.w	r2, r5, r2, lsl #5
  4024a6:	8b92      	ldrh	r2, [r2, #28]
  4024a8:	9200      	str	r2, [sp, #0]
  4024aa:	463a      	mov	r2, r7
  4024ac:	490e      	ldr	r1, [pc, #56]	; (4024e8 <vTaskList+0xf0>)
  4024ae:	4650      	mov	r0, sl
  4024b0:	4c0e      	ldr	r4, [pc, #56]	; (4024ec <vTaskList+0xf4>)
  4024b2:	47a0      	blx	r4
				pcWriteBuffer += strlen( pcWriteBuffer );
  4024b4:	4650      	mov	r0, sl
  4024b6:	47b0      	blx	r6
  4024b8:	eb0a 0400 	add.w	r4, sl, r0
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
  4024bc:	9b02      	ldr	r3, [sp, #8]
  4024be:	3301      	adds	r3, #1
  4024c0:	9302      	str	r3, [sp, #8]
  4024c2:	9a02      	ldr	r2, [sp, #8]
  4024c4:	9b03      	ldr	r3, [sp, #12]
  4024c6:	429a      	cmp	r2, r3
  4024c8:	d3b6      	bcc.n	402438 <vTaskList+0x40>
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
				pcWriteBuffer += strlen( pcWriteBuffer );
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
  4024ca:	4628      	mov	r0, r5
  4024cc:	4b08      	ldr	r3, [pc, #32]	; (4024f0 <vTaskList+0xf8>)
  4024ce:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
  4024d0:	b004      	add	sp, #16
  4024d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024d6:	bf00      	nop
  4024d8:	20400a14 	.word	0x20400a14
  4024dc:	00400e9d 	.word	0x00400e9d
  4024e0:	00401e8d 	.word	0x00401e8d
  4024e4:	004039c1 	.word	0x004039c1
  4024e8:	00409774 	.word	0x00409774
  4024ec:	00403881 	.word	0x00403881
  4024f0:	00400ecd 	.word	0x00400ecd
  4024f4:	004038cd 	.word	0x004038cd

004024f8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4024f8:	4b05      	ldr	r3, [pc, #20]	; (402510 <pvTaskIncrementMutexHeldCount+0x18>)
  4024fa:	681b      	ldr	r3, [r3, #0]
  4024fc:	b123      	cbz	r3, 402508 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4024fe:	4b04      	ldr	r3, [pc, #16]	; (402510 <pvTaskIncrementMutexHeldCount+0x18>)
  402500:	681a      	ldr	r2, [r3, #0]
  402502:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402504:	3301      	adds	r3, #1
  402506:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402508:	4b01      	ldr	r3, [pc, #4]	; (402510 <pvTaskIncrementMutexHeldCount+0x18>)
  40250a:	6818      	ldr	r0, [r3, #0]
	}
  40250c:	4770      	bx	lr
  40250e:	bf00      	nop
  402510:	204009ec 	.word	0x204009ec

00402514 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402514:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402516:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402518:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40251a:	4291      	cmp	r1, r2
  40251c:	d80a      	bhi.n	402534 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40251e:	1ad2      	subs	r2, r2, r3
  402520:	6983      	ldr	r3, [r0, #24]
  402522:	429a      	cmp	r2, r3
  402524:	d211      	bcs.n	40254a <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402526:	1d01      	adds	r1, r0, #4
  402528:	4b0a      	ldr	r3, [pc, #40]	; (402554 <prvInsertTimerInActiveList+0x40>)
  40252a:	6818      	ldr	r0, [r3, #0]
  40252c:	4b0a      	ldr	r3, [pc, #40]	; (402558 <prvInsertTimerInActiveList+0x44>)
  40252e:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402530:	2000      	movs	r0, #0
  402532:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402534:	429a      	cmp	r2, r3
  402536:	d201      	bcs.n	40253c <prvInsertTimerInActiveList+0x28>
  402538:	4299      	cmp	r1, r3
  40253a:	d208      	bcs.n	40254e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40253c:	1d01      	adds	r1, r0, #4
  40253e:	4b07      	ldr	r3, [pc, #28]	; (40255c <prvInsertTimerInActiveList+0x48>)
  402540:	6818      	ldr	r0, [r3, #0]
  402542:	4b05      	ldr	r3, [pc, #20]	; (402558 <prvInsertTimerInActiveList+0x44>)
  402544:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  402546:	2000      	movs	r0, #0
  402548:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40254a:	2001      	movs	r0, #1
  40254c:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  40254e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402550:	bd08      	pop	{r3, pc}
  402552:	bf00      	nop
  402554:	20400a7c 	.word	0x20400a7c
  402558:	00400b2d 	.word	0x00400b2d
  40255c:	20400a48 	.word	0x20400a48

00402560 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402560:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402562:	4b14      	ldr	r3, [pc, #80]	; (4025b4 <prvCheckForValidListAndQueue+0x54>)
  402564:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402566:	4b14      	ldr	r3, [pc, #80]	; (4025b8 <prvCheckForValidListAndQueue+0x58>)
  402568:	681b      	ldr	r3, [r3, #0]
  40256a:	bb03      	cbnz	r3, 4025ae <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  40256c:	4d13      	ldr	r5, [pc, #76]	; (4025bc <prvCheckForValidListAndQueue+0x5c>)
  40256e:	4628      	mov	r0, r5
  402570:	4e13      	ldr	r6, [pc, #76]	; (4025c0 <prvCheckForValidListAndQueue+0x60>)
  402572:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402574:	4c13      	ldr	r4, [pc, #76]	; (4025c4 <prvCheckForValidListAndQueue+0x64>)
  402576:	4620      	mov	r0, r4
  402578:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  40257a:	4b13      	ldr	r3, [pc, #76]	; (4025c8 <prvCheckForValidListAndQueue+0x68>)
  40257c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40257e:	4b13      	ldr	r3, [pc, #76]	; (4025cc <prvCheckForValidListAndQueue+0x6c>)
  402580:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402582:	2200      	movs	r2, #0
  402584:	2110      	movs	r1, #16
  402586:	2005      	movs	r0, #5
  402588:	4b11      	ldr	r3, [pc, #68]	; (4025d0 <prvCheckForValidListAndQueue+0x70>)
  40258a:	4798      	blx	r3
  40258c:	4b0a      	ldr	r3, [pc, #40]	; (4025b8 <prvCheckForValidListAndQueue+0x58>)
  40258e:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402590:	b950      	cbnz	r0, 4025a8 <prvCheckForValidListAndQueue+0x48>
  402592:	f04f 0380 	mov.w	r3, #128	; 0x80
  402596:	b672      	cpsid	i
  402598:	f383 8811 	msr	BASEPRI, r3
  40259c:	f3bf 8f6f 	isb	sy
  4025a0:	f3bf 8f4f 	dsb	sy
  4025a4:	b662      	cpsie	i
  4025a6:	e7fe      	b.n	4025a6 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4025a8:	490a      	ldr	r1, [pc, #40]	; (4025d4 <prvCheckForValidListAndQueue+0x74>)
  4025aa:	4b0b      	ldr	r3, [pc, #44]	; (4025d8 <prvCheckForValidListAndQueue+0x78>)
  4025ac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4025ae:	4b0b      	ldr	r3, [pc, #44]	; (4025dc <prvCheckForValidListAndQueue+0x7c>)
  4025b0:	4798      	blx	r3
  4025b2:	bd70      	pop	{r4, r5, r6, pc}
  4025b4:	00400c41 	.word	0x00400c41
  4025b8:	20400a78 	.word	0x20400a78
  4025bc:	20400a4c 	.word	0x20400a4c
  4025c0:	00400af5 	.word	0x00400af5
  4025c4:	20400a60 	.word	0x20400a60
  4025c8:	20400a48 	.word	0x20400a48
  4025cc:	20400a7c 	.word	0x20400a7c
  4025d0:	00401155 	.word	0x00401155
  4025d4:	00409784 	.word	0x00409784
  4025d8:	00401671 	.word	0x00401671
  4025dc:	00400c8d 	.word	0x00400c8d

004025e0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  4025e0:	b510      	push	{r4, lr}
  4025e2:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4025e4:	4b0f      	ldr	r3, [pc, #60]	; (402624 <xTimerCreateTimerTask+0x44>)
  4025e6:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4025e8:	4b0f      	ldr	r3, [pc, #60]	; (402628 <xTimerCreateTimerTask+0x48>)
  4025ea:	681b      	ldr	r3, [r3, #0]
  4025ec:	b163      	cbz	r3, 402608 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4025ee:	2300      	movs	r3, #0
  4025f0:	9303      	str	r3, [sp, #12]
  4025f2:	9302      	str	r3, [sp, #8]
  4025f4:	9301      	str	r3, [sp, #4]
  4025f6:	2204      	movs	r2, #4
  4025f8:	9200      	str	r2, [sp, #0]
  4025fa:	f44f 7282 	mov.w	r2, #260	; 0x104
  4025fe:	490b      	ldr	r1, [pc, #44]	; (40262c <xTimerCreateTimerTask+0x4c>)
  402600:	480b      	ldr	r0, [pc, #44]	; (402630 <xTimerCreateTimerTask+0x50>)
  402602:	4c0c      	ldr	r4, [pc, #48]	; (402634 <xTimerCreateTimerTask+0x54>)
  402604:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  402606:	b950      	cbnz	r0, 40261e <xTimerCreateTimerTask+0x3e>
  402608:	f04f 0380 	mov.w	r3, #128	; 0x80
  40260c:	b672      	cpsid	i
  40260e:	f383 8811 	msr	BASEPRI, r3
  402612:	f3bf 8f6f 	isb	sy
  402616:	f3bf 8f4f 	dsb	sy
  40261a:	b662      	cpsie	i
  40261c:	e7fe      	b.n	40261c <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  40261e:	b004      	add	sp, #16
  402620:	bd10      	pop	{r4, pc}
  402622:	bf00      	nop
  402624:	00402561 	.word	0x00402561
  402628:	20400a78 	.word	0x20400a78
  40262c:	0040978c 	.word	0x0040978c
  402630:	00402765 	.word	0x00402765
  402634:	0040182d 	.word	0x0040182d

00402638 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  402638:	b950      	cbnz	r0, 402650 <xTimerGenericCommand+0x18>
  40263a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40263e:	b672      	cpsid	i
  402640:	f383 8811 	msr	BASEPRI, r3
  402644:	f3bf 8f6f 	isb	sy
  402648:	f3bf 8f4f 	dsb	sy
  40264c:	b662      	cpsie	i
  40264e:	e7fe      	b.n	40264e <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  402650:	b530      	push	{r4, r5, lr}
  402652:	b085      	sub	sp, #20
  402654:	4615      	mov	r5, r2
  402656:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  402658:	4a0f      	ldr	r2, [pc, #60]	; (402698 <xTimerGenericCommand+0x60>)
  40265a:	6810      	ldr	r0, [r2, #0]
  40265c:	b1c0      	cbz	r0, 402690 <xTimerGenericCommand+0x58>
  40265e:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  402660:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402662:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402664:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402666:	2905      	cmp	r1, #5
  402668:	dc0d      	bgt.n	402686 <xTimerGenericCommand+0x4e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40266a:	4b0c      	ldr	r3, [pc, #48]	; (40269c <xTimerGenericCommand+0x64>)
  40266c:	4798      	blx	r3
  40266e:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402670:	f04f 0300 	mov.w	r3, #0
  402674:	bf0c      	ite	eq
  402676:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402678:	461a      	movne	r2, r3
  40267a:	4669      	mov	r1, sp
  40267c:	4806      	ldr	r0, [pc, #24]	; (402698 <xTimerGenericCommand+0x60>)
  40267e:	6800      	ldr	r0, [r0, #0]
  402680:	4c07      	ldr	r4, [pc, #28]	; (4026a0 <xTimerGenericCommand+0x68>)
  402682:	47a0      	blx	r4
  402684:	e005      	b.n	402692 <xTimerGenericCommand+0x5a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402686:	2300      	movs	r3, #0
  402688:	4669      	mov	r1, sp
  40268a:	4c06      	ldr	r4, [pc, #24]	; (4026a4 <xTimerGenericCommand+0x6c>)
  40268c:	47a0      	blx	r4
  40268e:	e000      	b.n	402692 <xTimerGenericCommand+0x5a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  402690:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  402692:	b005      	add	sp, #20
  402694:	bd30      	pop	{r4, r5, pc}
  402696:	bf00      	nop
  402698:	20400a78 	.word	0x20400a78
  40269c:	00402271 	.word	0x00402271
  4026a0:	004011d9 	.word	0x004011d9
  4026a4:	004013b5 	.word	0x004013b5

004026a8 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  4026a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026ac:	b082      	sub	sp, #8
  4026ae:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  4026b0:	4b25      	ldr	r3, [pc, #148]	; (402748 <prvSampleTimeNow+0xa0>)
  4026b2:	4798      	blx	r3
  4026b4:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  4026b6:	4b25      	ldr	r3, [pc, #148]	; (40274c <prvSampleTimeNow+0xa4>)
  4026b8:	681b      	ldr	r3, [r3, #0]
  4026ba:	4298      	cmp	r0, r3
  4026bc:	d23b      	bcs.n	402736 <prvSampleTimeNow+0x8e>
  4026be:	e02b      	b.n	402718 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026c0:	68db      	ldr	r3, [r3, #12]
  4026c2:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4026c6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4026c8:	f104 0904 	add.w	r9, r4, #4
  4026cc:	4648      	mov	r0, r9
  4026ce:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4026d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4026d2:	4620      	mov	r0, r4
  4026d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4026d6:	69e3      	ldr	r3, [r4, #28]
  4026d8:	2b01      	cmp	r3, #1
  4026da:	d11f      	bne.n	40271c <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4026dc:	69a3      	ldr	r3, [r4, #24]
  4026de:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4026e0:	459a      	cmp	sl, r3
  4026e2:	d206      	bcs.n	4026f2 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4026e4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4026e6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4026e8:	4649      	mov	r1, r9
  4026ea:	6828      	ldr	r0, [r5, #0]
  4026ec:	4b18      	ldr	r3, [pc, #96]	; (402750 <prvSampleTimeNow+0xa8>)
  4026ee:	4798      	blx	r3
  4026f0:	e014      	b.n	40271c <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026f2:	2100      	movs	r1, #0
  4026f4:	9100      	str	r1, [sp, #0]
  4026f6:	460b      	mov	r3, r1
  4026f8:	4652      	mov	r2, sl
  4026fa:	4620      	mov	r0, r4
  4026fc:	4c15      	ldr	r4, [pc, #84]	; (402754 <prvSampleTimeNow+0xac>)
  4026fe:	47a0      	blx	r4
				configASSERT( xResult );
  402700:	b960      	cbnz	r0, 40271c <prvSampleTimeNow+0x74>
  402702:	f04f 0380 	mov.w	r3, #128	; 0x80
  402706:	b672      	cpsid	i
  402708:	f383 8811 	msr	BASEPRI, r3
  40270c:	f3bf 8f6f 	isb	sy
  402710:	f3bf 8f4f 	dsb	sy
  402714:	b662      	cpsie	i
  402716:	e7fe      	b.n	402716 <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402718:	4d0f      	ldr	r5, [pc, #60]	; (402758 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40271a:	4e10      	ldr	r6, [pc, #64]	; (40275c <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40271c:	682b      	ldr	r3, [r5, #0]
  40271e:	681a      	ldr	r2, [r3, #0]
  402720:	2a00      	cmp	r2, #0
  402722:	d1cd      	bne.n	4026c0 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402724:	4a0e      	ldr	r2, [pc, #56]	; (402760 <prvSampleTimeNow+0xb8>)
  402726:	6810      	ldr	r0, [r2, #0]
  402728:	490b      	ldr	r1, [pc, #44]	; (402758 <prvSampleTimeNow+0xb0>)
  40272a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40272c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  40272e:	2301      	movs	r3, #1
  402730:	f8c8 3000 	str.w	r3, [r8]
  402734:	e002      	b.n	40273c <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402736:	2300      	movs	r3, #0
  402738:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  40273c:	4b03      	ldr	r3, [pc, #12]	; (40274c <prvSampleTimeNow+0xa4>)
  40273e:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  402740:	4638      	mov	r0, r7
  402742:	b002      	add	sp, #8
  402744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402748:	00401af5 	.word	0x00401af5
  40274c:	20400a74 	.word	0x20400a74
  402750:	00400b2d 	.word	0x00400b2d
  402754:	00402639 	.word	0x00402639
  402758:	20400a48 	.word	0x20400a48
  40275c:	00400b61 	.word	0x00400b61
  402760:	20400a7c 	.word	0x20400a7c

00402764 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402768:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40276a:	4c68      	ldr	r4, [pc, #416]	; (40290c <prvTimerTask+0x1a8>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  40276c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 40293c <prvTimerTask+0x1d8>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402770:	4d67      	ldr	r5, [pc, #412]	; (402910 <prvTimerTask+0x1ac>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402772:	4b68      	ldr	r3, [pc, #416]	; (402914 <prvTimerTask+0x1b0>)
  402774:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402776:	681a      	ldr	r2, [r3, #0]
  402778:	2a00      	cmp	r2, #0
  40277a:	f000 80b5 	beq.w	4028e8 <prvTimerTask+0x184>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40277e:	68db      	ldr	r3, [r3, #12]
  402780:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402782:	4b65      	ldr	r3, [pc, #404]	; (402918 <prvTimerTask+0x1b4>)
  402784:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402786:	a804      	add	r0, sp, #16
  402788:	4b64      	ldr	r3, [pc, #400]	; (40291c <prvTimerTask+0x1b8>)
  40278a:	4798      	blx	r3
  40278c:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40278e:	9b04      	ldr	r3, [sp, #16]
  402790:	2b00      	cmp	r3, #0
  402792:	d144      	bne.n	40281e <prvTimerTask+0xba>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402794:	42b0      	cmp	r0, r6
  402796:	d330      	bcc.n	4027fa <prvTimerTask+0x96>
			{
				( void ) xTaskResumeAll();
  402798:	4b61      	ldr	r3, [pc, #388]	; (402920 <prvTimerTask+0x1bc>)
  40279a:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40279c:	4b5d      	ldr	r3, [pc, #372]	; (402914 <prvTimerTask+0x1b0>)
  40279e:	681b      	ldr	r3, [r3, #0]
  4027a0:	68db      	ldr	r3, [r3, #12]
  4027a2:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4027a6:	f109 0004 	add.w	r0, r9, #4
  4027aa:	4b5e      	ldr	r3, [pc, #376]	; (402924 <prvTimerTask+0x1c0>)
  4027ac:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4027ae:	f8d9 301c 	ldr.w	r3, [r9, #28]
  4027b2:	2b01      	cmp	r3, #1
  4027b4:	d11c      	bne.n	4027f0 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4027b6:	f8d9 1018 	ldr.w	r1, [r9, #24]
  4027ba:	4633      	mov	r3, r6
  4027bc:	463a      	mov	r2, r7
  4027be:	4431      	add	r1, r6
  4027c0:	4648      	mov	r0, r9
  4027c2:	4f59      	ldr	r7, [pc, #356]	; (402928 <prvTimerTask+0x1c4>)
  4027c4:	47b8      	blx	r7
  4027c6:	2801      	cmp	r0, #1
  4027c8:	d112      	bne.n	4027f0 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4027ca:	2100      	movs	r1, #0
  4027cc:	9100      	str	r1, [sp, #0]
  4027ce:	460b      	mov	r3, r1
  4027d0:	4632      	mov	r2, r6
  4027d2:	4648      	mov	r0, r9
  4027d4:	4e55      	ldr	r6, [pc, #340]	; (40292c <prvTimerTask+0x1c8>)
  4027d6:	47b0      	blx	r6
			configASSERT( xResult );
  4027d8:	b950      	cbnz	r0, 4027f0 <prvTimerTask+0x8c>
  4027da:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027de:	b672      	cpsid	i
  4027e0:	f383 8811 	msr	BASEPRI, r3
  4027e4:	f3bf 8f6f 	isb	sy
  4027e8:	f3bf 8f4f 	dsb	sy
  4027ec:	b662      	cpsie	i
  4027ee:	e7fe      	b.n	4027ee <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4027f0:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  4027f4:	4648      	mov	r0, r9
  4027f6:	4798      	blx	r3
  4027f8:	e06d      	b.n	4028d6 <prvTimerTask+0x172>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4027fa:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4027fc:	1bf1      	subs	r1, r6, r7
  4027fe:	6820      	ldr	r0, [r4, #0]
  402800:	4b4b      	ldr	r3, [pc, #300]	; (402930 <prvTimerTask+0x1cc>)
  402802:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402804:	4b46      	ldr	r3, [pc, #280]	; (402920 <prvTimerTask+0x1bc>)
  402806:	4798      	blx	r3
  402808:	2800      	cmp	r0, #0
  40280a:	d164      	bne.n	4028d6 <prvTimerTask+0x172>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  40280c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402810:	f8c8 3000 	str.w	r3, [r8]
  402814:	f3bf 8f4f 	dsb	sy
  402818:	f3bf 8f6f 	isb	sy
  40281c:	e05b      	b.n	4028d6 <prvTimerTask+0x172>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  40281e:	4b40      	ldr	r3, [pc, #256]	; (402920 <prvTimerTask+0x1bc>)
  402820:	4798      	blx	r3
  402822:	e058      	b.n	4028d6 <prvTimerTask+0x172>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402824:	9b04      	ldr	r3, [sp, #16]
  402826:	2b00      	cmp	r3, #0
  402828:	da06      	bge.n	402838 <prvTimerTask+0xd4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40282a:	9907      	ldr	r1, [sp, #28]
  40282c:	9806      	ldr	r0, [sp, #24]
  40282e:	9b05      	ldr	r3, [sp, #20]
  402830:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402832:	9b04      	ldr	r3, [sp, #16]
  402834:	2b00      	cmp	r3, #0
  402836:	db4f      	blt.n	4028d8 <prvTimerTask+0x174>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402838:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40283a:	6973      	ldr	r3, [r6, #20]
  40283c:	b10b      	cbz	r3, 402842 <prvTimerTask+0xde>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40283e:	1d30      	adds	r0, r6, #4
  402840:	47b8      	blx	r7
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402842:	a803      	add	r0, sp, #12
  402844:	4b35      	ldr	r3, [pc, #212]	; (40291c <prvTimerTask+0x1b8>)
  402846:	4798      	blx	r3

			switch( xMessage.xMessageID )
  402848:	9b04      	ldr	r3, [sp, #16]
  40284a:	2b09      	cmp	r3, #9
  40284c:	d844      	bhi.n	4028d8 <prvTimerTask+0x174>
  40284e:	e8df f003 	tbb	[pc, r3]
  402852:	0505      	.short	0x0505
  402854:	3f2a4305 	.word	0x3f2a4305
  402858:	2a430505 	.word	0x2a430505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  40285c:	9f05      	ldr	r7, [sp, #20]
  40285e:	69b1      	ldr	r1, [r6, #24]
  402860:	463b      	mov	r3, r7
  402862:	4602      	mov	r2, r0
  402864:	4439      	add	r1, r7
  402866:	4630      	mov	r0, r6
  402868:	4f2f      	ldr	r7, [pc, #188]	; (402928 <prvTimerTask+0x1c4>)
  40286a:	47b8      	blx	r7
  40286c:	2801      	cmp	r0, #1
  40286e:	d132      	bne.n	4028d6 <prvTimerTask+0x172>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402870:	6a73      	ldr	r3, [r6, #36]	; 0x24
  402872:	4630      	mov	r0, r6
  402874:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402876:	69f3      	ldr	r3, [r6, #28]
  402878:	2b01      	cmp	r3, #1
  40287a:	d12c      	bne.n	4028d6 <prvTimerTask+0x172>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40287c:	69b2      	ldr	r2, [r6, #24]
  40287e:	2100      	movs	r1, #0
  402880:	9100      	str	r1, [sp, #0]
  402882:	460b      	mov	r3, r1
  402884:	9805      	ldr	r0, [sp, #20]
  402886:	4402      	add	r2, r0
  402888:	4630      	mov	r0, r6
  40288a:	4e28      	ldr	r6, [pc, #160]	; (40292c <prvTimerTask+0x1c8>)
  40288c:	47b0      	blx	r6
							configASSERT( xResult );
  40288e:	bb10      	cbnz	r0, 4028d6 <prvTimerTask+0x172>
  402890:	f04f 0380 	mov.w	r3, #128	; 0x80
  402894:	b672      	cpsid	i
  402896:	f383 8811 	msr	BASEPRI, r3
  40289a:	f3bf 8f6f 	isb	sy
  40289e:	f3bf 8f4f 	dsb	sy
  4028a2:	b662      	cpsie	i
  4028a4:	e7fe      	b.n	4028a4 <prvTimerTask+0x140>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4028a6:	9905      	ldr	r1, [sp, #20]
  4028a8:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4028aa:	b951      	cbnz	r1, 4028c2 <prvTimerTask+0x15e>
  4028ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028b0:	b672      	cpsid	i
  4028b2:	f383 8811 	msr	BASEPRI, r3
  4028b6:	f3bf 8f6f 	isb	sy
  4028ba:	f3bf 8f4f 	dsb	sy
  4028be:	b662      	cpsie	i
  4028c0:	e7fe      	b.n	4028c0 <prvTimerTask+0x15c>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4028c2:	4603      	mov	r3, r0
  4028c4:	4602      	mov	r2, r0
  4028c6:	4401      	add	r1, r0
  4028c8:	4630      	mov	r0, r6
  4028ca:	4e17      	ldr	r6, [pc, #92]	; (402928 <prvTimerTask+0x1c4>)
  4028cc:	47b0      	blx	r6
  4028ce:	e002      	b.n	4028d6 <prvTimerTask+0x172>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  4028d0:	4630      	mov	r0, r6
  4028d2:	4b18      	ldr	r3, [pc, #96]	; (402934 <prvTimerTask+0x1d0>)
  4028d4:	4798      	blx	r3
			pxTimer = xMessage.u.xTimerParameters.pxTimer;

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4028d6:	4f13      	ldr	r7, [pc, #76]	; (402924 <prvTimerTask+0x1c0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4028d8:	2300      	movs	r3, #0
  4028da:	461a      	mov	r2, r3
  4028dc:	a904      	add	r1, sp, #16
  4028de:	6820      	ldr	r0, [r4, #0]
  4028e0:	47a8      	blx	r5
  4028e2:	2800      	cmp	r0, #0
  4028e4:	d19e      	bne.n	402824 <prvTimerTask+0xc0>
  4028e6:	e744      	b.n	402772 <prvTimerTask+0xe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  4028e8:	4b0b      	ldr	r3, [pc, #44]	; (402918 <prvTimerTask+0x1b4>)
  4028ea:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4028ec:	a804      	add	r0, sp, #16
  4028ee:	4b0b      	ldr	r3, [pc, #44]	; (40291c <prvTimerTask+0x1b8>)
  4028f0:	4798      	blx	r3
  4028f2:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4028f4:	9b04      	ldr	r3, [sp, #16]
  4028f6:	2b00      	cmp	r3, #0
  4028f8:	d191      	bne.n	40281e <prvTimerTask+0xba>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4028fa:	4b0f      	ldr	r3, [pc, #60]	; (402938 <prvTimerTask+0x1d4>)
  4028fc:	681b      	ldr	r3, [r3, #0]
  4028fe:	681a      	ldr	r2, [r3, #0]
  402900:	fab2 f282 	clz	r2, r2
  402904:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  402906:	2600      	movs	r6, #0
  402908:	e778      	b.n	4027fc <prvTimerTask+0x98>
  40290a:	bf00      	nop
  40290c:	20400a78 	.word	0x20400a78
  402910:	004014ad 	.word	0x004014ad
  402914:	20400a48 	.word	0x20400a48
  402918:	00401ae5 	.word	0x00401ae5
  40291c:	004026a9 	.word	0x004026a9
  402920:	00401c55 	.word	0x00401c55
  402924:	00400b61 	.word	0x00400b61
  402928:	00402515 	.word	0x00402515
  40292c:	00402639 	.word	0x00402639
  402930:	004016a5 	.word	0x004016a5
  402934:	00400ecd 	.word	0x00400ecd
  402938:	20400a7c 	.word	0x20400a7c
  40293c:	e000ed04 	.word	0xe000ed04

00402940 <btn_task>:
		vTaskDelay(1000);
	}
}

static void btn_task(void *pvParameters)
{
  402940:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get(BUT_PIO,PIO_INPUT, BUT_PIN_MASK))
  402942:	4d0b      	ldr	r5, [pc, #44]	; (402970 <btn_task+0x30>)
  402944:	4c0b      	ldr	r4, [pc, #44]	; (402974 <btn_task+0x34>)
			printf("olha o status \n");
		else
			printf("olha o status n \n");
  402946:	4e0c      	ldr	r6, [pc, #48]	; (402978 <btn_task+0x38>)

static void btn_task(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get(BUT_PIO,PIO_INPUT, BUT_PIN_MASK))
  402948:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40294c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402950:	4628      	mov	r0, r5
  402952:	47a0      	blx	r4
  402954:	b118      	cbz	r0, 40295e <btn_task+0x1e>
			printf("olha o status \n");
  402956:	4809      	ldr	r0, [pc, #36]	; (40297c <btn_task+0x3c>)
  402958:	4b09      	ldr	r3, [pc, #36]	; (402980 <btn_task+0x40>)
  40295a:	4798      	blx	r3
  40295c:	e002      	b.n	402964 <btn_task+0x24>
		else
			printf("olha o status n \n");
  40295e:	4630      	mov	r0, r6
  402960:	4b07      	ldr	r3, [pc, #28]	; (402980 <btn_task+0x40>)
  402962:	4798      	blx	r3
		vTaskDelay(1000);
  402964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402968:	4b06      	ldr	r3, [pc, #24]	; (402984 <btn_task+0x44>)
  40296a:	4798      	blx	r3
			
	}
  40296c:	e7ec      	b.n	402948 <btn_task+0x8>
  40296e:	bf00      	nop
  402970:	400e0e00 	.word	0x400e0e00
  402974:	00400425 	.word	0x00400425
  402978:	004097a4 	.word	0x004097a4
  40297c:	00409794 	.word	0x00409794
  402980:	00402f6d 	.word	0x00402f6d
  402984:	00401d6d 	.word	0x00401d6d

00402988 <task_led3>:
		vTaskDelay(1000);
	}
}

static void task_led3(void *pvParameters)
{
  402988:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get_output_data_status(LED3_PIO, LED3_PIN_MASK))
  40298a:	4c0a      	ldr	r4, [pc, #40]	; (4029b4 <task_led3+0x2c>)
  40298c:	4d0a      	ldr	r5, [pc, #40]	; (4029b8 <task_led3+0x30>)
		pio_clear(LED3_PIO, LED3_PIN_MASK);
		else
		pio_set(LED3_PIO, LED3_PIN_MASK);
  40298e:	4e0b      	ldr	r6, [pc, #44]	; (4029bc <task_led3+0x34>)

static void task_led3(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get_output_data_status(LED3_PIO, LED3_PIN_MASK))
  402990:	2104      	movs	r1, #4
  402992:	4620      	mov	r0, r4
  402994:	47a8      	blx	r5
  402996:	b120      	cbz	r0, 4029a2 <task_led3+0x1a>
		pio_clear(LED3_PIO, LED3_PIN_MASK);
  402998:	2104      	movs	r1, #4
  40299a:	4620      	mov	r0, r4
  40299c:	4b08      	ldr	r3, [pc, #32]	; (4029c0 <task_led3+0x38>)
  40299e:	4798      	blx	r3
  4029a0:	e002      	b.n	4029a8 <task_led3+0x20>
		else
		pio_set(LED3_PIO, LED3_PIN_MASK);
  4029a2:	2104      	movs	r1, #4
  4029a4:	4620      	mov	r0, r4
  4029a6:	47b0      	blx	r6
		vTaskDelay(1000);
  4029a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4029ac:	4b05      	ldr	r3, [pc, #20]	; (4029c4 <task_led3+0x3c>)
  4029ae:	4798      	blx	r3
	}
  4029b0:	e7ee      	b.n	402990 <task_led3+0x8>
  4029b2:	bf00      	nop
  4029b4:	400e1000 	.word	0x400e1000
  4029b8:	004004a1 	.word	0x004004a1
  4029bc:	0040041d 	.word	0x0040041d
  4029c0:	00400421 	.word	0x00400421
  4029c4:	00401d6d 	.word	0x00401d6d

004029c8 <task_led2>:
		vTaskDelay(1000);
	}
}

static void task_led2(void *pvParameters)
{
  4029c8:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get_output_data_status(LED2_PIO, LED2_PIN_MASK))
  4029ca:	4c0b      	ldr	r4, [pc, #44]	; (4029f8 <task_led2+0x30>)
  4029cc:	4d0b      	ldr	r5, [pc, #44]	; (4029fc <task_led2+0x34>)
		pio_clear(LED2_PIO, LED2_PIN_MASK);
		else
		pio_set(LED2_PIO, LED2_PIN_MASK);
  4029ce:	4e0c      	ldr	r6, [pc, #48]	; (402a00 <task_led2+0x38>)

static void task_led2(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get_output_data_status(LED2_PIO, LED2_PIN_MASK))
  4029d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4029d4:	4620      	mov	r0, r4
  4029d6:	47a8      	blx	r5
  4029d8:	b128      	cbz	r0, 4029e6 <task_led2+0x1e>
		pio_clear(LED2_PIO, LED2_PIN_MASK);
  4029da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4029de:	4620      	mov	r0, r4
  4029e0:	4b08      	ldr	r3, [pc, #32]	; (402a04 <task_led2+0x3c>)
  4029e2:	4798      	blx	r3
  4029e4:	e003      	b.n	4029ee <task_led2+0x26>
		else
		pio_set(LED2_PIO, LED2_PIN_MASK);
  4029e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4029ea:	4620      	mov	r0, r4
  4029ec:	47b0      	blx	r6
		vTaskDelay(1000);
  4029ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  4029f2:	4b05      	ldr	r3, [pc, #20]	; (402a08 <task_led2+0x40>)
  4029f4:	4798      	blx	r3
	}
  4029f6:	e7eb      	b.n	4029d0 <task_led2+0x8>
  4029f8:	400e1200 	.word	0x400e1200
  4029fc:	004004a1 	.word	0x004004a1
  402a00:	0040041d 	.word	0x0040041d
  402a04:	00400421 	.word	0x00400421
  402a08:	00401d6d 	.word	0x00401d6d

00402a0c <task_led1>:
		vTaskDelay(1000);
	}
}

static void task_led1(void *pvParameters)
{
  402a0c:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get_output_data_status(LED1_PIO, LED1_PIN_MASK))
  402a0e:	4c0a      	ldr	r4, [pc, #40]	; (402a38 <task_led1+0x2c>)
  402a10:	4d0a      	ldr	r5, [pc, #40]	; (402a3c <task_led1+0x30>)
		pio_clear(LED1_PIO, LED1_PIN_MASK);
		else
		pio_set(LED1_PIO, LED1_PIN_MASK);
  402a12:	4e0b      	ldr	r6, [pc, #44]	; (402a40 <task_led1+0x34>)

static void task_led1(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get_output_data_status(LED1_PIO, LED1_PIN_MASK))
  402a14:	2101      	movs	r1, #1
  402a16:	4620      	mov	r0, r4
  402a18:	47a8      	blx	r5
  402a1a:	b120      	cbz	r0, 402a26 <task_led1+0x1a>
		pio_clear(LED1_PIO, LED1_PIN_MASK);
  402a1c:	2101      	movs	r1, #1
  402a1e:	4620      	mov	r0, r4
  402a20:	4b08      	ldr	r3, [pc, #32]	; (402a44 <task_led1+0x38>)
  402a22:	4798      	blx	r3
  402a24:	e002      	b.n	402a2c <task_led1+0x20>
		else
		pio_set(LED1_PIO, LED1_PIN_MASK);
  402a26:	2101      	movs	r1, #1
  402a28:	4620      	mov	r0, r4
  402a2a:	47b0      	blx	r6
		vTaskDelay(1000);
  402a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402a30:	4b05      	ldr	r3, [pc, #20]	; (402a48 <task_led1+0x3c>)
  402a32:	4798      	blx	r3
	}
  402a34:	e7ee      	b.n	402a14 <task_led1+0x8>
  402a36:	bf00      	nop
  402a38:	400e0e00 	.word	0x400e0e00
  402a3c:	004004a1 	.word	0x004004a1
  402a40:	0040041d 	.word	0x0040041d
  402a44:	00400421 	.word	0x00400421
  402a48:	00401d6d 	.word	0x00401d6d

00402a4c <task_led>:
 * \brief This task, when activated, make LED blink at a fixed rate
 */


static void task_led(void *pvParameters)
{
  402a4c:	b508      	push	{r3, lr}
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get_output_data_status(LED_PIO, LED_PIN_MASK))
  402a4e:	4c0b      	ldr	r4, [pc, #44]	; (402a7c <task_led+0x30>)
  402a50:	4d0b      	ldr	r5, [pc, #44]	; (402a80 <task_led+0x34>)
		pio_clear(LED_PIO, LED_PIN_MASK);
		else
		pio_set(LED_PIO, LED_PIN_MASK);
  402a52:	4e0c      	ldr	r6, [pc, #48]	; (402a84 <task_led+0x38>)

static void task_led(void *pvParameters)
{
	UNUSED(pvParameters);
	for (;;) {
		if(pio_get_output_data_status(LED_PIO, LED_PIN_MASK))
  402a54:	f44f 7180 	mov.w	r1, #256	; 0x100
  402a58:	4620      	mov	r0, r4
  402a5a:	47a8      	blx	r5
  402a5c:	b128      	cbz	r0, 402a6a <task_led+0x1e>
		pio_clear(LED_PIO, LED_PIN_MASK);
  402a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
  402a62:	4620      	mov	r0, r4
  402a64:	4b08      	ldr	r3, [pc, #32]	; (402a88 <task_led+0x3c>)
  402a66:	4798      	blx	r3
  402a68:	e003      	b.n	402a72 <task_led+0x26>
		else
		pio_set(LED_PIO, LED_PIN_MASK);
  402a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
  402a6e:	4620      	mov	r0, r4
  402a70:	47b0      	blx	r6
		vTaskDelay(1000);
  402a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402a76:	4b05      	ldr	r3, [pc, #20]	; (402a8c <task_led+0x40>)
  402a78:	4798      	blx	r3
	}
  402a7a:	e7eb      	b.n	402a54 <task_led+0x8>
  402a7c:	400e1200 	.word	0x400e1200
  402a80:	004004a1 	.word	0x004004a1
  402a84:	0040041d 	.word	0x0040041d
  402a88:	00400421 	.word	0x00400421
  402a8c:	00401d6d 	.word	0x00401d6d

00402a90 <task_monitor>:
/**
 * \brief This task, when activated, send every ten seconds on debug UART
 * the whole report of free heap and total tasks status
 */
static void task_monitor(void *pvParameters)
{
  402a90:	b580      	push	{r7, lr}
	static portCHAR szList[256];
	UNUSED(pvParameters);

	for (;;) {
		printf("--- task ## %u", (unsigned int)uxTaskGetNumberOfTasks());
  402a92:	4f09      	ldr	r7, [pc, #36]	; (402ab8 <task_monitor+0x28>)
  402a94:	4e09      	ldr	r6, [pc, #36]	; (402abc <task_monitor+0x2c>)
  402a96:	4d0a      	ldr	r5, [pc, #40]	; (402ac0 <task_monitor+0x30>)
  402a98:	47b8      	blx	r7
  402a9a:	4601      	mov	r1, r0
  402a9c:	4630      	mov	r0, r6
  402a9e:	47a8      	blx	r5
		vTaskList((signed portCHAR *)szList);
  402aa0:	4c08      	ldr	r4, [pc, #32]	; (402ac4 <task_monitor+0x34>)
  402aa2:	4620      	mov	r0, r4
  402aa4:	4b08      	ldr	r3, [pc, #32]	; (402ac8 <task_monitor+0x38>)
  402aa6:	4798      	blx	r3
		printf(szList);
  402aa8:	4620      	mov	r0, r4
  402aaa:	47a8      	blx	r5
		vTaskDelay(1000);
  402aac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402ab0:	4b06      	ldr	r3, [pc, #24]	; (402acc <task_monitor+0x3c>)
  402ab2:	4798      	blx	r3
  402ab4:	e7f0      	b.n	402a98 <task_monitor+0x8>
  402ab6:	bf00      	nop
  402ab8:	00401b01 	.word	0x00401b01
  402abc:	004097b8 	.word	0x004097b8
  402ac0:	00402f6d 	.word	0x00402f6d
  402ac4:	20400a80 	.word	0x20400a80
  402ac8:	004023f9 	.word	0x004023f9
  402acc:	00401d6d 	.word	0x00401d6d

00402ad0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ad2:	b083      	sub	sp, #12
  402ad4:	4605      	mov	r5, r0
  402ad6:	460c      	mov	r4, r1
	uint32_t val = 0;
  402ad8:	2300      	movs	r3, #0
  402ada:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402adc:	4b29      	ldr	r3, [pc, #164]	; (402b84 <usart_serial_getchar+0xb4>)
  402ade:	4298      	cmp	r0, r3
  402ae0:	d107      	bne.n	402af2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  402ae2:	461f      	mov	r7, r3
  402ae4:	4e28      	ldr	r6, [pc, #160]	; (402b88 <usart_serial_getchar+0xb8>)
  402ae6:	4621      	mov	r1, r4
  402ae8:	4638      	mov	r0, r7
  402aea:	47b0      	blx	r6
  402aec:	2800      	cmp	r0, #0
  402aee:	d1fa      	bne.n	402ae6 <usart_serial_getchar+0x16>
  402af0:	e015      	b.n	402b1e <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402af2:	4b26      	ldr	r3, [pc, #152]	; (402b8c <usart_serial_getchar+0xbc>)
  402af4:	4298      	cmp	r0, r3
  402af6:	d107      	bne.n	402b08 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  402af8:	461f      	mov	r7, r3
  402afa:	4e23      	ldr	r6, [pc, #140]	; (402b88 <usart_serial_getchar+0xb8>)
  402afc:	4621      	mov	r1, r4
  402afe:	4638      	mov	r0, r7
  402b00:	47b0      	blx	r6
  402b02:	2800      	cmp	r0, #0
  402b04:	d1fa      	bne.n	402afc <usart_serial_getchar+0x2c>
  402b06:	e015      	b.n	402b34 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402b08:	4b21      	ldr	r3, [pc, #132]	; (402b90 <usart_serial_getchar+0xc0>)
  402b0a:	4298      	cmp	r0, r3
  402b0c:	d107      	bne.n	402b1e <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  402b0e:	461f      	mov	r7, r3
  402b10:	4e1d      	ldr	r6, [pc, #116]	; (402b88 <usart_serial_getchar+0xb8>)
  402b12:	4621      	mov	r1, r4
  402b14:	4638      	mov	r0, r7
  402b16:	47b0      	blx	r6
  402b18:	2800      	cmp	r0, #0
  402b1a:	d1fa      	bne.n	402b12 <usart_serial_getchar+0x42>
  402b1c:	e017      	b.n	402b4e <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402b1e:	4b1d      	ldr	r3, [pc, #116]	; (402b94 <usart_serial_getchar+0xc4>)
  402b20:	429d      	cmp	r5, r3
  402b22:	d107      	bne.n	402b34 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  402b24:	461f      	mov	r7, r3
  402b26:	4e18      	ldr	r6, [pc, #96]	; (402b88 <usart_serial_getchar+0xb8>)
  402b28:	4621      	mov	r1, r4
  402b2a:	4638      	mov	r0, r7
  402b2c:	47b0      	blx	r6
  402b2e:	2800      	cmp	r0, #0
  402b30:	d1fa      	bne.n	402b28 <usart_serial_getchar+0x58>
  402b32:	e019      	b.n	402b68 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402b34:	4b18      	ldr	r3, [pc, #96]	; (402b98 <usart_serial_getchar+0xc8>)
  402b36:	429d      	cmp	r5, r3
  402b38:	d109      	bne.n	402b4e <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  402b3a:	461e      	mov	r6, r3
  402b3c:	4d17      	ldr	r5, [pc, #92]	; (402b9c <usart_serial_getchar+0xcc>)
  402b3e:	a901      	add	r1, sp, #4
  402b40:	4630      	mov	r0, r6
  402b42:	47a8      	blx	r5
  402b44:	2800      	cmp	r0, #0
  402b46:	d1fa      	bne.n	402b3e <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  402b48:	9b01      	ldr	r3, [sp, #4]
  402b4a:	7023      	strb	r3, [r4, #0]
  402b4c:	e018      	b.n	402b80 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402b4e:	4b14      	ldr	r3, [pc, #80]	; (402ba0 <usart_serial_getchar+0xd0>)
  402b50:	429d      	cmp	r5, r3
  402b52:	d109      	bne.n	402b68 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  402b54:	461e      	mov	r6, r3
  402b56:	4d11      	ldr	r5, [pc, #68]	; (402b9c <usart_serial_getchar+0xcc>)
  402b58:	a901      	add	r1, sp, #4
  402b5a:	4630      	mov	r0, r6
  402b5c:	47a8      	blx	r5
  402b5e:	2800      	cmp	r0, #0
  402b60:	d1fa      	bne.n	402b58 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  402b62:	9b01      	ldr	r3, [sp, #4]
  402b64:	7023      	strb	r3, [r4, #0]
  402b66:	e00b      	b.n	402b80 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402b68:	4b0e      	ldr	r3, [pc, #56]	; (402ba4 <usart_serial_getchar+0xd4>)
  402b6a:	429d      	cmp	r5, r3
  402b6c:	d108      	bne.n	402b80 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  402b6e:	461e      	mov	r6, r3
  402b70:	4d0a      	ldr	r5, [pc, #40]	; (402b9c <usart_serial_getchar+0xcc>)
  402b72:	a901      	add	r1, sp, #4
  402b74:	4630      	mov	r0, r6
  402b76:	47a8      	blx	r5
  402b78:	2800      	cmp	r0, #0
  402b7a:	d1fa      	bne.n	402b72 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  402b7c:	9b01      	ldr	r3, [sp, #4]
  402b7e:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402b80:	b003      	add	sp, #12
  402b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402b84:	400e0800 	.word	0x400e0800
  402b88:	004006f9 	.word	0x004006f9
  402b8c:	400e0a00 	.word	0x400e0a00
  402b90:	400e1a00 	.word	0x400e1a00
  402b94:	400e1c00 	.word	0x400e1c00
  402b98:	40024000 	.word	0x40024000
  402b9c:	00400811 	.word	0x00400811
  402ba0:	40028000 	.word	0x40028000
  402ba4:	4002c000 	.word	0x4002c000

00402ba8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  402ba8:	b570      	push	{r4, r5, r6, lr}
  402baa:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402bac:	4b2a      	ldr	r3, [pc, #168]	; (402c58 <usart_serial_putchar+0xb0>)
  402bae:	4298      	cmp	r0, r3
  402bb0:	d108      	bne.n	402bc4 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  402bb2:	461e      	mov	r6, r3
  402bb4:	4d29      	ldr	r5, [pc, #164]	; (402c5c <usart_serial_putchar+0xb4>)
  402bb6:	4621      	mov	r1, r4
  402bb8:	4630      	mov	r0, r6
  402bba:	47a8      	blx	r5
  402bbc:	2800      	cmp	r0, #0
  402bbe:	d1fa      	bne.n	402bb6 <usart_serial_putchar+0xe>
		return 1;
  402bc0:	2001      	movs	r0, #1
  402bc2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402bc4:	4b26      	ldr	r3, [pc, #152]	; (402c60 <usart_serial_putchar+0xb8>)
  402bc6:	4298      	cmp	r0, r3
  402bc8:	d108      	bne.n	402bdc <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  402bca:	461e      	mov	r6, r3
  402bcc:	4d23      	ldr	r5, [pc, #140]	; (402c5c <usart_serial_putchar+0xb4>)
  402bce:	4621      	mov	r1, r4
  402bd0:	4630      	mov	r0, r6
  402bd2:	47a8      	blx	r5
  402bd4:	2800      	cmp	r0, #0
  402bd6:	d1fa      	bne.n	402bce <usart_serial_putchar+0x26>
		return 1;
  402bd8:	2001      	movs	r0, #1
  402bda:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402bdc:	4b21      	ldr	r3, [pc, #132]	; (402c64 <usart_serial_putchar+0xbc>)
  402bde:	4298      	cmp	r0, r3
  402be0:	d108      	bne.n	402bf4 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  402be2:	461e      	mov	r6, r3
  402be4:	4d1d      	ldr	r5, [pc, #116]	; (402c5c <usart_serial_putchar+0xb4>)
  402be6:	4621      	mov	r1, r4
  402be8:	4630      	mov	r0, r6
  402bea:	47a8      	blx	r5
  402bec:	2800      	cmp	r0, #0
  402bee:	d1fa      	bne.n	402be6 <usart_serial_putchar+0x3e>
		return 1;
  402bf0:	2001      	movs	r0, #1
  402bf2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402bf4:	4b1c      	ldr	r3, [pc, #112]	; (402c68 <usart_serial_putchar+0xc0>)
  402bf6:	4298      	cmp	r0, r3
  402bf8:	d108      	bne.n	402c0c <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  402bfa:	461e      	mov	r6, r3
  402bfc:	4d17      	ldr	r5, [pc, #92]	; (402c5c <usart_serial_putchar+0xb4>)
  402bfe:	4621      	mov	r1, r4
  402c00:	4630      	mov	r0, r6
  402c02:	47a8      	blx	r5
  402c04:	2800      	cmp	r0, #0
  402c06:	d1fa      	bne.n	402bfe <usart_serial_putchar+0x56>
		return 1;
  402c08:	2001      	movs	r0, #1
  402c0a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402c0c:	4b17      	ldr	r3, [pc, #92]	; (402c6c <usart_serial_putchar+0xc4>)
  402c0e:	4298      	cmp	r0, r3
  402c10:	d108      	bne.n	402c24 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  402c12:	461e      	mov	r6, r3
  402c14:	4d16      	ldr	r5, [pc, #88]	; (402c70 <usart_serial_putchar+0xc8>)
  402c16:	4621      	mov	r1, r4
  402c18:	4630      	mov	r0, r6
  402c1a:	47a8      	blx	r5
  402c1c:	2800      	cmp	r0, #0
  402c1e:	d1fa      	bne.n	402c16 <usart_serial_putchar+0x6e>
		return 1;
  402c20:	2001      	movs	r0, #1
  402c22:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402c24:	4b13      	ldr	r3, [pc, #76]	; (402c74 <usart_serial_putchar+0xcc>)
  402c26:	4298      	cmp	r0, r3
  402c28:	d108      	bne.n	402c3c <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  402c2a:	461e      	mov	r6, r3
  402c2c:	4d10      	ldr	r5, [pc, #64]	; (402c70 <usart_serial_putchar+0xc8>)
  402c2e:	4621      	mov	r1, r4
  402c30:	4630      	mov	r0, r6
  402c32:	47a8      	blx	r5
  402c34:	2800      	cmp	r0, #0
  402c36:	d1fa      	bne.n	402c2e <usart_serial_putchar+0x86>
		return 1;
  402c38:	2001      	movs	r0, #1
  402c3a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402c3c:	4b0e      	ldr	r3, [pc, #56]	; (402c78 <usart_serial_putchar+0xd0>)
  402c3e:	4298      	cmp	r0, r3
  402c40:	d108      	bne.n	402c54 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  402c42:	461e      	mov	r6, r3
  402c44:	4d0a      	ldr	r5, [pc, #40]	; (402c70 <usart_serial_putchar+0xc8>)
  402c46:	4621      	mov	r1, r4
  402c48:	4630      	mov	r0, r6
  402c4a:	47a8      	blx	r5
  402c4c:	2800      	cmp	r0, #0
  402c4e:	d1fa      	bne.n	402c46 <usart_serial_putchar+0x9e>
		return 1;
  402c50:	2001      	movs	r0, #1
  402c52:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402c54:	2000      	movs	r0, #0
}
  402c56:	bd70      	pop	{r4, r5, r6, pc}
  402c58:	400e0800 	.word	0x400e0800
  402c5c:	004006e5 	.word	0x004006e5
  402c60:	400e0a00 	.word	0x400e0a00
  402c64:	400e1a00 	.word	0x400e1a00
  402c68:	400e1c00 	.word	0x400e1c00
  402c6c:	40024000 	.word	0x40024000
  402c70:	004007f9 	.word	0x004007f9
  402c74:	40028000 	.word	0x40028000
  402c78:	4002c000 	.word	0x4002c000

00402c7c <led_init>:
void led_init(
Pio *p_pio,
const u_int32_t pio_id,
const u_int32_t pin_mask,
int estado)
{
  402c7c:	b530      	push	{r4, r5, lr}
  402c7e:	b083      	sub	sp, #12
  402c80:	4604      	mov	r4, r0
  402c82:	4615      	mov	r5, r2
	pmc_enable_periph_clk(pio_id);
  402c84:	4608      	mov	r0, r1
  402c86:	4b05      	ldr	r3, [pc, #20]	; (402c9c <led_init+0x20>)
  402c88:	4798      	blx	r3
	pio_set_output(p_pio, pin_mask, 1, 0, 0 );
  402c8a:	2300      	movs	r3, #0
  402c8c:	9300      	str	r3, [sp, #0]
  402c8e:	2201      	movs	r2, #1
  402c90:	4629      	mov	r1, r5
  402c92:	4620      	mov	r0, r4
  402c94:	4c02      	ldr	r4, [pc, #8]	; (402ca0 <led_init+0x24>)
  402c96:	47a0      	blx	r4
};
  402c98:	b003      	add	sp, #12
  402c9a:	bd30      	pop	{r4, r5, pc}
  402c9c:	00400691 	.word	0x00400691
  402ca0:	00400479 	.word	0x00400479

00402ca4 <but_init>:

void but_init(
Pio *p_but_pio,
const u_int32_t pio_id,
const u_int32_t but_pin_mask)
{
  402ca4:	b538      	push	{r3, r4, r5, lr}
  402ca6:	4604      	mov	r4, r0
  402ca8:	4615      	mov	r5, r2
	/* config. pino botao em modo de entrada */
	pmc_enable_periph_clk(pio_id);
  402caa:	4608      	mov	r0, r1
  402cac:	4b03      	ldr	r3, [pc, #12]	; (402cbc <but_init+0x18>)
  402cae:	4798      	blx	r3
	pio_set_input(p_but_pio, but_pin_mask, PIO_PULLUP | PIO_DEBOUNCE);
  402cb0:	2209      	movs	r2, #9
  402cb2:	4629      	mov	r1, r5
  402cb4:	4620      	mov	r0, r4
  402cb6:	4b02      	ldr	r3, [pc, #8]	; (402cc0 <but_init+0x1c>)
  402cb8:	4798      	blx	r3
  402cba:	bd38      	pop	{r3, r4, r5, pc}
  402cbc:	00400691 	.word	0x00400691
  402cc0:	00400441 	.word	0x00400441

00402cc4 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  402cc4:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402cc6:	460a      	mov	r2, r1
  402cc8:	4601      	mov	r1, r0
  402cca:	4802      	ldr	r0, [pc, #8]	; (402cd4 <vApplicationStackOverflowHook+0x10>)
  402ccc:	4b02      	ldr	r3, [pc, #8]	; (402cd8 <vApplicationStackOverflowHook+0x14>)
  402cce:	4798      	blx	r3
  402cd0:	e7fe      	b.n	402cd0 <vApplicationStackOverflowHook+0xc>
  402cd2:	bf00      	nop
  402cd4:	004097c8 	.word	0x004097c8
  402cd8:	00402f6d 	.word	0x00402f6d

00402cdc <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  402cdc:	4770      	bx	lr
  402cde:	bf00      	nop

00402ce0 <vApplicationMallocFailedHook>:
  402ce0:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ce4:	b672      	cpsid	i
  402ce6:	f383 8811 	msr	BASEPRI, r3
  402cea:	f3bf 8f6f 	isb	sy
  402cee:	f3bf 8f4f 	dsb	sy
  402cf2:	b662      	cpsie	i
  402cf4:	e7fe      	b.n	402cf4 <vApplicationMallocFailedHook+0x14>
  402cf6:	bf00      	nop

00402cf8 <main>:
 *  \brief FreeRTOS Real Time Kernel example entry point.
 *
 *  \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  402cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402cfa:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  402cfc:	4b5c      	ldr	r3, [pc, #368]	; (402e70 <main+0x178>)
  402cfe:	4798      	blx	r3
	board_init();
  402d00:	4b5c      	ldr	r3, [pc, #368]	; (402e74 <main+0x17c>)
  402d02:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402d04:	4d5c      	ldr	r5, [pc, #368]	; (402e78 <main+0x180>)
  402d06:	4b5d      	ldr	r3, [pc, #372]	; (402e7c <main+0x184>)
  402d08:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402d0a:	4a5d      	ldr	r2, [pc, #372]	; (402e80 <main+0x188>)
  402d0c:	4b5d      	ldr	r3, [pc, #372]	; (402e84 <main+0x18c>)
  402d0e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402d10:	4a5d      	ldr	r2, [pc, #372]	; (402e88 <main+0x190>)
  402d12:	4b5e      	ldr	r3, [pc, #376]	; (402e8c <main+0x194>)
  402d14:	601a      	str	r2, [r3, #0]
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
  402d16:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402d1a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  402d1c:	23c0      	movs	r3, #192	; 0xc0
  402d1e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  402d20:	f44f 6700 	mov.w	r7, #2048	; 0x800
  402d24:	9706      	str	r7, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  402d26:	2400      	movs	r4, #0
  402d28:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402d2a:	9408      	str	r4, [sp, #32]
  402d2c:	200e      	movs	r0, #14
  402d2e:	4b58      	ldr	r3, [pc, #352]	; (402e90 <main+0x198>)
  402d30:	4798      	blx	r3
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
  402d32:	4a58      	ldr	r2, [pc, #352]	; (402e94 <main+0x19c>)
  402d34:	a904      	add	r1, sp, #16
  402d36:	4628      	mov	r0, r5
  402d38:	4b57      	ldr	r3, [pc, #348]	; (402e98 <main+0x1a0>)
  402d3a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
  402d3c:	4628      	mov	r0, r5
  402d3e:	4b57      	ldr	r3, [pc, #348]	; (402e9c <main+0x1a4>)
  402d40:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402d42:	4628      	mov	r0, r5
  402d44:	4b56      	ldr	r3, [pc, #344]	; (402ea0 <main+0x1a8>)
  402d46:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402d48:	4e56      	ldr	r6, [pc, #344]	; (402ea4 <main+0x1ac>)
  402d4a:	6833      	ldr	r3, [r6, #0]
  402d4c:	4621      	mov	r1, r4
  402d4e:	6898      	ldr	r0, [r3, #8]
  402d50:	4d55      	ldr	r5, [pc, #340]	; (402ea8 <main+0x1b0>)
  402d52:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402d54:	6833      	ldr	r3, [r6, #0]
  402d56:	4621      	mov	r1, r4
  402d58:	6858      	ldr	r0, [r3, #4]
  402d5a:	47a8      	blx	r5
	/* Configure console UART. */
	stdio_serial_init(CONF_UART, &uart_serial_options);

	/* Specify that stdout should not be buffered. */
#if defined(__GNUC__)
	setbuf(stdout, NULL);
  402d5c:	6833      	ldr	r3, [r6, #0]
  402d5e:	4621      	mov	r1, r4
  402d60:	6898      	ldr	r0, [r3, #8]
  402d62:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	/* Output demo information. */
	printf("-- Freertos Example --\n\r");
  402d64:	4851      	ldr	r0, [pc, #324]	; (402eac <main+0x1b4>)
  402d66:	4d52      	ldr	r5, [pc, #328]	; (402eb0 <main+0x1b8>)
  402d68:	47a8      	blx	r5
	printf("-- %s\n\r", BOARD_NAME);
  402d6a:	4952      	ldr	r1, [pc, #328]	; (402eb4 <main+0x1bc>)
  402d6c:	4852      	ldr	r0, [pc, #328]	; (402eb8 <main+0x1c0>)
  402d6e:	47a8      	blx	r5
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  402d70:	4a52      	ldr	r2, [pc, #328]	; (402ebc <main+0x1c4>)
  402d72:	4953      	ldr	r1, [pc, #332]	; (402ec0 <main+0x1c8>)
  402d74:	4853      	ldr	r0, [pc, #332]	; (402ec4 <main+0x1cc>)
  402d76:	47a8      	blx	r5
	
	
	
	led_init(LED1_PIO, LED1_PIO_ID, LED1_PIN_MASK, 1);
  402d78:	4e53      	ldr	r6, [pc, #332]	; (402ec8 <main+0x1d0>)
  402d7a:	2301      	movs	r3, #1
  402d7c:	461a      	mov	r2, r3
  402d7e:	210a      	movs	r1, #10
  402d80:	4630      	mov	r0, r6
  402d82:	4d52      	ldr	r5, [pc, #328]	; (402ecc <main+0x1d4>)
  402d84:	47a8      	blx	r5
	led_init(LED2_PIO, LED2_PIO_ID, LED2_PIN_MASK, 1);
  402d86:	2301      	movs	r3, #1
  402d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402d8c:	210c      	movs	r1, #12
  402d8e:	4850      	ldr	r0, [pc, #320]	; (402ed0 <main+0x1d8>)
  402d90:	47a8      	blx	r5
	led_init(LED3_PIO, LED3_PIO_ID, LED3_PIN_MASK, 1);
  402d92:	2301      	movs	r3, #1
  402d94:	2204      	movs	r2, #4
  402d96:	210b      	movs	r1, #11
  402d98:	484e      	ldr	r0, [pc, #312]	; (402ed4 <main+0x1dc>)
  402d9a:	47a8      	blx	r5
	
	but_init(BUT_PIO, BUT_PIO_ID, BUT_PIN_MASK);
  402d9c:	463a      	mov	r2, r7
  402d9e:	210a      	movs	r1, #10
  402da0:	4630      	mov	r0, r6
  402da2:	4b4d      	ldr	r3, [pc, #308]	; (402ed8 <main+0x1e0>)
  402da4:	4798      	blx	r3


	/* Create task to monitor processor activity */
	if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL,
  402da6:	9403      	str	r4, [sp, #12]
  402da8:	9402      	str	r4, [sp, #8]
  402daa:	9401      	str	r4, [sp, #4]
  402dac:	9400      	str	r4, [sp, #0]
  402dae:	4623      	mov	r3, r4
  402db0:	f44f 7200 	mov.w	r2, #512	; 0x200
  402db4:	4949      	ldr	r1, [pc, #292]	; (402edc <main+0x1e4>)
  402db6:	484a      	ldr	r0, [pc, #296]	; (402ee0 <main+0x1e8>)
  402db8:	4c4a      	ldr	r4, [pc, #296]	; (402ee4 <main+0x1ec>)
  402dba:	47a0      	blx	r4
  402dbc:	2801      	cmp	r0, #1
  402dbe:	d002      	beq.n	402dc6 <main+0xce>
			TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Monitor task\r\n");
  402dc0:	4849      	ldr	r0, [pc, #292]	; (402ee8 <main+0x1f0>)
  402dc2:	4b3b      	ldr	r3, [pc, #236]	; (402eb0 <main+0x1b8>)
  402dc4:	4798      	blx	r3
	}

	/* Create task to make led blink */
	if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402dc6:	2300      	movs	r3, #0
  402dc8:	9303      	str	r3, [sp, #12]
  402dca:	9302      	str	r3, [sp, #8]
  402dcc:	9301      	str	r3, [sp, #4]
  402dce:	9300      	str	r3, [sp, #0]
  402dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
  402dd4:	4945      	ldr	r1, [pc, #276]	; (402eec <main+0x1f4>)
  402dd6:	4846      	ldr	r0, [pc, #280]	; (402ef0 <main+0x1f8>)
  402dd8:	4c42      	ldr	r4, [pc, #264]	; (402ee4 <main+0x1ec>)
  402dda:	47a0      	blx	r4
  402ddc:	2801      	cmp	r0, #1
  402dde:	d002      	beq.n	402de6 <main+0xee>
			TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  402de0:	4844      	ldr	r0, [pc, #272]	; (402ef4 <main+0x1fc>)
  402de2:	4b33      	ldr	r3, [pc, #204]	; (402eb0 <main+0x1b8>)
  402de4:	4798      	blx	r3
	}
	if (xTaskCreate(task_led1, "Led1", TASK_LED_STACK_SIZE, NULL,
  402de6:	2300      	movs	r3, #0
  402de8:	9303      	str	r3, [sp, #12]
  402dea:	9302      	str	r3, [sp, #8]
  402dec:	9301      	str	r3, [sp, #4]
  402dee:	9300      	str	r3, [sp, #0]
  402df0:	f44f 7280 	mov.w	r2, #256	; 0x100
  402df4:	4940      	ldr	r1, [pc, #256]	; (402ef8 <main+0x200>)
  402df6:	4841      	ldr	r0, [pc, #260]	; (402efc <main+0x204>)
  402df8:	4c3a      	ldr	r4, [pc, #232]	; (402ee4 <main+0x1ec>)
  402dfa:	47a0      	blx	r4
  402dfc:	2801      	cmp	r0, #1
  402dfe:	d002      	beq.n	402e06 <main+0x10e>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  402e00:	483c      	ldr	r0, [pc, #240]	; (402ef4 <main+0x1fc>)
  402e02:	4b2b      	ldr	r3, [pc, #172]	; (402eb0 <main+0x1b8>)
  402e04:	4798      	blx	r3
	}
	if (xTaskCreate(task_led2, "Led2", TASK_LED_STACK_SIZE, NULL,
  402e06:	2300      	movs	r3, #0
  402e08:	9303      	str	r3, [sp, #12]
  402e0a:	9302      	str	r3, [sp, #8]
  402e0c:	9301      	str	r3, [sp, #4]
  402e0e:	9300      	str	r3, [sp, #0]
  402e10:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e14:	493a      	ldr	r1, [pc, #232]	; (402f00 <main+0x208>)
  402e16:	483b      	ldr	r0, [pc, #236]	; (402f04 <main+0x20c>)
  402e18:	4c32      	ldr	r4, [pc, #200]	; (402ee4 <main+0x1ec>)
  402e1a:	47a0      	blx	r4
  402e1c:	2801      	cmp	r0, #1
  402e1e:	d002      	beq.n	402e26 <main+0x12e>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  402e20:	4834      	ldr	r0, [pc, #208]	; (402ef4 <main+0x1fc>)
  402e22:	4b23      	ldr	r3, [pc, #140]	; (402eb0 <main+0x1b8>)
  402e24:	4798      	blx	r3
	}
	if (xTaskCreate(task_led3, "Led3", TASK_LED_STACK_SIZE, NULL,
  402e26:	2300      	movs	r3, #0
  402e28:	9303      	str	r3, [sp, #12]
  402e2a:	9302      	str	r3, [sp, #8]
  402e2c:	9301      	str	r3, [sp, #4]
  402e2e:	9300      	str	r3, [sp, #0]
  402e30:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e34:	4934      	ldr	r1, [pc, #208]	; (402f08 <main+0x210>)
  402e36:	4835      	ldr	r0, [pc, #212]	; (402f0c <main+0x214>)
  402e38:	4c2a      	ldr	r4, [pc, #168]	; (402ee4 <main+0x1ec>)
  402e3a:	47a0      	blx	r4
  402e3c:	2801      	cmp	r0, #1
  402e3e:	d002      	beq.n	402e46 <main+0x14e>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  402e40:	482c      	ldr	r0, [pc, #176]	; (402ef4 <main+0x1fc>)
  402e42:	4b1b      	ldr	r3, [pc, #108]	; (402eb0 <main+0x1b8>)
  402e44:	4798      	blx	r3
	}
	if (xTaskCreate(btn_task, "btn", TASK_LED_STACK_SIZE, NULL,
  402e46:	2300      	movs	r3, #0
  402e48:	9303      	str	r3, [sp, #12]
  402e4a:	9302      	str	r3, [sp, #8]
  402e4c:	9301      	str	r3, [sp, #4]
  402e4e:	9300      	str	r3, [sp, #0]
  402e50:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e54:	492e      	ldr	r1, [pc, #184]	; (402f10 <main+0x218>)
  402e56:	482f      	ldr	r0, [pc, #188]	; (402f14 <main+0x21c>)
  402e58:	4c22      	ldr	r4, [pc, #136]	; (402ee4 <main+0x1ec>)
  402e5a:	47a0      	blx	r4
  402e5c:	2801      	cmp	r0, #1
  402e5e:	d002      	beq.n	402e66 <main+0x16e>
	TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create test led task\r\n");
  402e60:	4824      	ldr	r0, [pc, #144]	; (402ef4 <main+0x1fc>)
  402e62:	4b13      	ldr	r3, [pc, #76]	; (402eb0 <main+0x1b8>)
  402e64:	4798      	blx	r3
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  402e66:	4b2c      	ldr	r3, [pc, #176]	; (402f18 <main+0x220>)
  402e68:	4798      	blx	r3

	/* Will only get here if there was insufficient memory to create the idle task. */
	return 0;
}
  402e6a:	2000      	movs	r0, #0
  402e6c:	b00b      	add	sp, #44	; 0x2c
  402e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402e70:	0040019d 	.word	0x0040019d
  402e74:	00400299 	.word	0x00400299
  402e78:	40028000 	.word	0x40028000
  402e7c:	20400bbc 	.word	0x20400bbc
  402e80:	00402ba9 	.word	0x00402ba9
  402e84:	20400bb8 	.word	0x20400bb8
  402e88:	00402ad1 	.word	0x00402ad1
  402e8c:	20400bb4 	.word	0x20400bb4
  402e90:	00400691 	.word	0x00400691
  402e94:	08f0d180 	.word	0x08f0d180
  402e98:	00400795 	.word	0x00400795
  402e9c:	004007e9 	.word	0x004007e9
  402ea0:	004007f1 	.word	0x004007f1
  402ea4:	20400438 	.word	0x20400438
  402ea8:	00403721 	.word	0x00403721
  402eac:	004097e0 	.word	0x004097e0
  402eb0:	00402f6d 	.word	0x00402f6d
  402eb4:	004097fc 	.word	0x004097fc
  402eb8:	00409808 	.word	0x00409808
  402ebc:	00409810 	.word	0x00409810
  402ec0:	0040981c 	.word	0x0040981c
  402ec4:	00409828 	.word	0x00409828
  402ec8:	400e0e00 	.word	0x400e0e00
  402ecc:	00402c7d 	.word	0x00402c7d
  402ed0:	400e1200 	.word	0x400e1200
  402ed4:	400e1000 	.word	0x400e1000
  402ed8:	00402ca5 	.word	0x00402ca5
  402edc:	00409840 	.word	0x00409840
  402ee0:	00402a91 	.word	0x00402a91
  402ee4:	0040182d 	.word	0x0040182d
  402ee8:	00409848 	.word	0x00409848
  402eec:	00409868 	.word	0x00409868
  402ef0:	00402a4d 	.word	0x00402a4d
  402ef4:	0040986c 	.word	0x0040986c
  402ef8:	00409890 	.word	0x00409890
  402efc:	00402a0d 	.word	0x00402a0d
  402f00:	00409898 	.word	0x00409898
  402f04:	004029c9 	.word	0x004029c9
  402f08:	004098a0 	.word	0x004098a0
  402f0c:	00402989 	.word	0x00402989
  402f10:	004098a8 	.word	0x004098a8
  402f14:	00402941 	.word	0x00402941
  402f18:	00401a55 	.word	0x00401a55

00402f1c <__libc_init_array>:
  402f1c:	b570      	push	{r4, r5, r6, lr}
  402f1e:	4e0f      	ldr	r6, [pc, #60]	; (402f5c <__libc_init_array+0x40>)
  402f20:	4d0f      	ldr	r5, [pc, #60]	; (402f60 <__libc_init_array+0x44>)
  402f22:	1b76      	subs	r6, r6, r5
  402f24:	10b6      	asrs	r6, r6, #2
  402f26:	bf18      	it	ne
  402f28:	2400      	movne	r4, #0
  402f2a:	d005      	beq.n	402f38 <__libc_init_array+0x1c>
  402f2c:	3401      	adds	r4, #1
  402f2e:	f855 3b04 	ldr.w	r3, [r5], #4
  402f32:	4798      	blx	r3
  402f34:	42a6      	cmp	r6, r4
  402f36:	d1f9      	bne.n	402f2c <__libc_init_array+0x10>
  402f38:	4e0a      	ldr	r6, [pc, #40]	; (402f64 <__libc_init_array+0x48>)
  402f3a:	4d0b      	ldr	r5, [pc, #44]	; (402f68 <__libc_init_array+0x4c>)
  402f3c:	1b76      	subs	r6, r6, r5
  402f3e:	f006 fd89 	bl	409a54 <_init>
  402f42:	10b6      	asrs	r6, r6, #2
  402f44:	bf18      	it	ne
  402f46:	2400      	movne	r4, #0
  402f48:	d006      	beq.n	402f58 <__libc_init_array+0x3c>
  402f4a:	3401      	adds	r4, #1
  402f4c:	f855 3b04 	ldr.w	r3, [r5], #4
  402f50:	4798      	blx	r3
  402f52:	42a6      	cmp	r6, r4
  402f54:	d1f9      	bne.n	402f4a <__libc_init_array+0x2e>
  402f56:	bd70      	pop	{r4, r5, r6, pc}
  402f58:	bd70      	pop	{r4, r5, r6, pc}
  402f5a:	bf00      	nop
  402f5c:	00409a60 	.word	0x00409a60
  402f60:	00409a60 	.word	0x00409a60
  402f64:	00409a68 	.word	0x00409a68
  402f68:	00409a60 	.word	0x00409a60

00402f6c <iprintf>:
  402f6c:	b40f      	push	{r0, r1, r2, r3}
  402f6e:	b500      	push	{lr}
  402f70:	4907      	ldr	r1, [pc, #28]	; (402f90 <iprintf+0x24>)
  402f72:	b083      	sub	sp, #12
  402f74:	ab04      	add	r3, sp, #16
  402f76:	6808      	ldr	r0, [r1, #0]
  402f78:	f853 2b04 	ldr.w	r2, [r3], #4
  402f7c:	6881      	ldr	r1, [r0, #8]
  402f7e:	9301      	str	r3, [sp, #4]
  402f80:	f002 f916 	bl	4051b0 <_vfiprintf_r>
  402f84:	b003      	add	sp, #12
  402f86:	f85d eb04 	ldr.w	lr, [sp], #4
  402f8a:	b004      	add	sp, #16
  402f8c:	4770      	bx	lr
  402f8e:	bf00      	nop
  402f90:	20400438 	.word	0x20400438

00402f94 <malloc>:
  402f94:	4b02      	ldr	r3, [pc, #8]	; (402fa0 <malloc+0xc>)
  402f96:	4601      	mov	r1, r0
  402f98:	6818      	ldr	r0, [r3, #0]
  402f9a:	f000 b80b 	b.w	402fb4 <_malloc_r>
  402f9e:	bf00      	nop
  402fa0:	20400438 	.word	0x20400438

00402fa4 <free>:
  402fa4:	4b02      	ldr	r3, [pc, #8]	; (402fb0 <free+0xc>)
  402fa6:	4601      	mov	r1, r0
  402fa8:	6818      	ldr	r0, [r3, #0]
  402faa:	f004 ba6b 	b.w	407484 <_free_r>
  402fae:	bf00      	nop
  402fb0:	20400438 	.word	0x20400438

00402fb4 <_malloc_r>:
  402fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fb8:	f101 050b 	add.w	r5, r1, #11
  402fbc:	2d16      	cmp	r5, #22
  402fbe:	b083      	sub	sp, #12
  402fc0:	4606      	mov	r6, r0
  402fc2:	f240 809f 	bls.w	403104 <_malloc_r+0x150>
  402fc6:	f035 0507 	bics.w	r5, r5, #7
  402fca:	f100 80bf 	bmi.w	40314c <_malloc_r+0x198>
  402fce:	42a9      	cmp	r1, r5
  402fd0:	f200 80bc 	bhi.w	40314c <_malloc_r+0x198>
  402fd4:	f000 fb8e 	bl	4036f4 <__malloc_lock>
  402fd8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  402fdc:	f0c0 829c 	bcc.w	403518 <_malloc_r+0x564>
  402fe0:	0a6b      	lsrs	r3, r5, #9
  402fe2:	f000 80ba 	beq.w	40315a <_malloc_r+0x1a6>
  402fe6:	2b04      	cmp	r3, #4
  402fe8:	f200 8183 	bhi.w	4032f2 <_malloc_r+0x33e>
  402fec:	09a8      	lsrs	r0, r5, #6
  402fee:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  402ff2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402ff6:	3038      	adds	r0, #56	; 0x38
  402ff8:	4fc4      	ldr	r7, [pc, #784]	; (40330c <_malloc_r+0x358>)
  402ffa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  402ffe:	f1a3 0108 	sub.w	r1, r3, #8
  403002:	685c      	ldr	r4, [r3, #4]
  403004:	42a1      	cmp	r1, r4
  403006:	d107      	bne.n	403018 <_malloc_r+0x64>
  403008:	e0ac      	b.n	403164 <_malloc_r+0x1b0>
  40300a:	2a00      	cmp	r2, #0
  40300c:	f280 80ac 	bge.w	403168 <_malloc_r+0x1b4>
  403010:	68e4      	ldr	r4, [r4, #12]
  403012:	42a1      	cmp	r1, r4
  403014:	f000 80a6 	beq.w	403164 <_malloc_r+0x1b0>
  403018:	6863      	ldr	r3, [r4, #4]
  40301a:	f023 0303 	bic.w	r3, r3, #3
  40301e:	1b5a      	subs	r2, r3, r5
  403020:	2a0f      	cmp	r2, #15
  403022:	ddf2      	ble.n	40300a <_malloc_r+0x56>
  403024:	49b9      	ldr	r1, [pc, #740]	; (40330c <_malloc_r+0x358>)
  403026:	693c      	ldr	r4, [r7, #16]
  403028:	f101 0e08 	add.w	lr, r1, #8
  40302c:	4574      	cmp	r4, lr
  40302e:	f000 81b3 	beq.w	403398 <_malloc_r+0x3e4>
  403032:	6863      	ldr	r3, [r4, #4]
  403034:	f023 0303 	bic.w	r3, r3, #3
  403038:	1b5a      	subs	r2, r3, r5
  40303a:	2a0f      	cmp	r2, #15
  40303c:	f300 8199 	bgt.w	403372 <_malloc_r+0x3be>
  403040:	2a00      	cmp	r2, #0
  403042:	f8c1 e014 	str.w	lr, [r1, #20]
  403046:	f8c1 e010 	str.w	lr, [r1, #16]
  40304a:	f280 809e 	bge.w	40318a <_malloc_r+0x1d6>
  40304e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403052:	f080 8167 	bcs.w	403324 <_malloc_r+0x370>
  403056:	08db      	lsrs	r3, r3, #3
  403058:	f103 0c01 	add.w	ip, r3, #1
  40305c:	2201      	movs	r2, #1
  40305e:	109b      	asrs	r3, r3, #2
  403060:	fa02 f303 	lsl.w	r3, r2, r3
  403064:	684a      	ldr	r2, [r1, #4]
  403066:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40306a:	f8c4 8008 	str.w	r8, [r4, #8]
  40306e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  403072:	431a      	orrs	r2, r3
  403074:	f1a9 0308 	sub.w	r3, r9, #8
  403078:	60e3      	str	r3, [r4, #12]
  40307a:	604a      	str	r2, [r1, #4]
  40307c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  403080:	f8c8 400c 	str.w	r4, [r8, #12]
  403084:	1083      	asrs	r3, r0, #2
  403086:	2401      	movs	r4, #1
  403088:	409c      	lsls	r4, r3
  40308a:	4294      	cmp	r4, r2
  40308c:	f200 808a 	bhi.w	4031a4 <_malloc_r+0x1f0>
  403090:	4214      	tst	r4, r2
  403092:	d106      	bne.n	4030a2 <_malloc_r+0xee>
  403094:	f020 0003 	bic.w	r0, r0, #3
  403098:	0064      	lsls	r4, r4, #1
  40309a:	4214      	tst	r4, r2
  40309c:	f100 0004 	add.w	r0, r0, #4
  4030a0:	d0fa      	beq.n	403098 <_malloc_r+0xe4>
  4030a2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4030a6:	46cc      	mov	ip, r9
  4030a8:	4680      	mov	r8, r0
  4030aa:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4030ae:	458c      	cmp	ip, r1
  4030b0:	d107      	bne.n	4030c2 <_malloc_r+0x10e>
  4030b2:	e173      	b.n	40339c <_malloc_r+0x3e8>
  4030b4:	2a00      	cmp	r2, #0
  4030b6:	f280 8181 	bge.w	4033bc <_malloc_r+0x408>
  4030ba:	68c9      	ldr	r1, [r1, #12]
  4030bc:	458c      	cmp	ip, r1
  4030be:	f000 816d 	beq.w	40339c <_malloc_r+0x3e8>
  4030c2:	684b      	ldr	r3, [r1, #4]
  4030c4:	f023 0303 	bic.w	r3, r3, #3
  4030c8:	1b5a      	subs	r2, r3, r5
  4030ca:	2a0f      	cmp	r2, #15
  4030cc:	ddf2      	ble.n	4030b4 <_malloc_r+0x100>
  4030ce:	460c      	mov	r4, r1
  4030d0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4030d4:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4030d8:	194b      	adds	r3, r1, r5
  4030da:	f045 0501 	orr.w	r5, r5, #1
  4030de:	604d      	str	r5, [r1, #4]
  4030e0:	f042 0101 	orr.w	r1, r2, #1
  4030e4:	f8c8 c00c 	str.w	ip, [r8, #12]
  4030e8:	4630      	mov	r0, r6
  4030ea:	f8cc 8008 	str.w	r8, [ip, #8]
  4030ee:	617b      	str	r3, [r7, #20]
  4030f0:	613b      	str	r3, [r7, #16]
  4030f2:	f8c3 e00c 	str.w	lr, [r3, #12]
  4030f6:	f8c3 e008 	str.w	lr, [r3, #8]
  4030fa:	6059      	str	r1, [r3, #4]
  4030fc:	509a      	str	r2, [r3, r2]
  4030fe:	f000 fafb 	bl	4036f8 <__malloc_unlock>
  403102:	e01f      	b.n	403144 <_malloc_r+0x190>
  403104:	2910      	cmp	r1, #16
  403106:	d821      	bhi.n	40314c <_malloc_r+0x198>
  403108:	f000 faf4 	bl	4036f4 <__malloc_lock>
  40310c:	2510      	movs	r5, #16
  40310e:	2306      	movs	r3, #6
  403110:	2002      	movs	r0, #2
  403112:	4f7e      	ldr	r7, [pc, #504]	; (40330c <_malloc_r+0x358>)
  403114:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  403118:	f1a3 0208 	sub.w	r2, r3, #8
  40311c:	685c      	ldr	r4, [r3, #4]
  40311e:	4294      	cmp	r4, r2
  403120:	f000 8145 	beq.w	4033ae <_malloc_r+0x3fa>
  403124:	6863      	ldr	r3, [r4, #4]
  403126:	68e1      	ldr	r1, [r4, #12]
  403128:	68a5      	ldr	r5, [r4, #8]
  40312a:	f023 0303 	bic.w	r3, r3, #3
  40312e:	4423      	add	r3, r4
  403130:	4630      	mov	r0, r6
  403132:	685a      	ldr	r2, [r3, #4]
  403134:	60e9      	str	r1, [r5, #12]
  403136:	f042 0201 	orr.w	r2, r2, #1
  40313a:	608d      	str	r5, [r1, #8]
  40313c:	605a      	str	r2, [r3, #4]
  40313e:	f000 fadb 	bl	4036f8 <__malloc_unlock>
  403142:	3408      	adds	r4, #8
  403144:	4620      	mov	r0, r4
  403146:	b003      	add	sp, #12
  403148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40314c:	2400      	movs	r4, #0
  40314e:	230c      	movs	r3, #12
  403150:	4620      	mov	r0, r4
  403152:	6033      	str	r3, [r6, #0]
  403154:	b003      	add	sp, #12
  403156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40315a:	2380      	movs	r3, #128	; 0x80
  40315c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  403160:	203f      	movs	r0, #63	; 0x3f
  403162:	e749      	b.n	402ff8 <_malloc_r+0x44>
  403164:	4670      	mov	r0, lr
  403166:	e75d      	b.n	403024 <_malloc_r+0x70>
  403168:	4423      	add	r3, r4
  40316a:	68e1      	ldr	r1, [r4, #12]
  40316c:	685a      	ldr	r2, [r3, #4]
  40316e:	68a5      	ldr	r5, [r4, #8]
  403170:	f042 0201 	orr.w	r2, r2, #1
  403174:	60e9      	str	r1, [r5, #12]
  403176:	4630      	mov	r0, r6
  403178:	608d      	str	r5, [r1, #8]
  40317a:	605a      	str	r2, [r3, #4]
  40317c:	f000 fabc 	bl	4036f8 <__malloc_unlock>
  403180:	3408      	adds	r4, #8
  403182:	4620      	mov	r0, r4
  403184:	b003      	add	sp, #12
  403186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40318a:	4423      	add	r3, r4
  40318c:	4630      	mov	r0, r6
  40318e:	685a      	ldr	r2, [r3, #4]
  403190:	f042 0201 	orr.w	r2, r2, #1
  403194:	605a      	str	r2, [r3, #4]
  403196:	f000 faaf 	bl	4036f8 <__malloc_unlock>
  40319a:	3408      	adds	r4, #8
  40319c:	4620      	mov	r0, r4
  40319e:	b003      	add	sp, #12
  4031a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4031a4:	68bc      	ldr	r4, [r7, #8]
  4031a6:	6863      	ldr	r3, [r4, #4]
  4031a8:	f023 0803 	bic.w	r8, r3, #3
  4031ac:	45a8      	cmp	r8, r5
  4031ae:	d304      	bcc.n	4031ba <_malloc_r+0x206>
  4031b0:	ebc5 0308 	rsb	r3, r5, r8
  4031b4:	2b0f      	cmp	r3, #15
  4031b6:	f300 808c 	bgt.w	4032d2 <_malloc_r+0x31e>
  4031ba:	4b55      	ldr	r3, [pc, #340]	; (403310 <_malloc_r+0x35c>)
  4031bc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 403320 <_malloc_r+0x36c>
  4031c0:	681a      	ldr	r2, [r3, #0]
  4031c2:	f8d9 3000 	ldr.w	r3, [r9]
  4031c6:	3301      	adds	r3, #1
  4031c8:	442a      	add	r2, r5
  4031ca:	eb04 0a08 	add.w	sl, r4, r8
  4031ce:	f000 8160 	beq.w	403492 <_malloc_r+0x4de>
  4031d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4031d6:	320f      	adds	r2, #15
  4031d8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4031dc:	f022 020f 	bic.w	r2, r2, #15
  4031e0:	4611      	mov	r1, r2
  4031e2:	4630      	mov	r0, r6
  4031e4:	9201      	str	r2, [sp, #4]
  4031e6:	f000 fa89 	bl	4036fc <_sbrk_r>
  4031ea:	f1b0 3fff 	cmp.w	r0, #4294967295
  4031ee:	4683      	mov	fp, r0
  4031f0:	9a01      	ldr	r2, [sp, #4]
  4031f2:	f000 8158 	beq.w	4034a6 <_malloc_r+0x4f2>
  4031f6:	4582      	cmp	sl, r0
  4031f8:	f200 80fc 	bhi.w	4033f4 <_malloc_r+0x440>
  4031fc:	4b45      	ldr	r3, [pc, #276]	; (403314 <_malloc_r+0x360>)
  4031fe:	6819      	ldr	r1, [r3, #0]
  403200:	45da      	cmp	sl, fp
  403202:	4411      	add	r1, r2
  403204:	6019      	str	r1, [r3, #0]
  403206:	f000 8153 	beq.w	4034b0 <_malloc_r+0x4fc>
  40320a:	f8d9 0000 	ldr.w	r0, [r9]
  40320e:	f8df e110 	ldr.w	lr, [pc, #272]	; 403320 <_malloc_r+0x36c>
  403212:	3001      	adds	r0, #1
  403214:	bf1b      	ittet	ne
  403216:	ebca 0a0b 	rsbne	sl, sl, fp
  40321a:	4451      	addne	r1, sl
  40321c:	f8ce b000 	streq.w	fp, [lr]
  403220:	6019      	strne	r1, [r3, #0]
  403222:	f01b 0107 	ands.w	r1, fp, #7
  403226:	f000 8117 	beq.w	403458 <_malloc_r+0x4a4>
  40322a:	f1c1 0008 	rsb	r0, r1, #8
  40322e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403232:	4483      	add	fp, r0
  403234:	3108      	adds	r1, #8
  403236:	445a      	add	r2, fp
  403238:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40323c:	ebc2 0901 	rsb	r9, r2, r1
  403240:	4649      	mov	r1, r9
  403242:	4630      	mov	r0, r6
  403244:	9301      	str	r3, [sp, #4]
  403246:	f000 fa59 	bl	4036fc <_sbrk_r>
  40324a:	1c43      	adds	r3, r0, #1
  40324c:	9b01      	ldr	r3, [sp, #4]
  40324e:	f000 813f 	beq.w	4034d0 <_malloc_r+0x51c>
  403252:	ebcb 0200 	rsb	r2, fp, r0
  403256:	444a      	add	r2, r9
  403258:	f042 0201 	orr.w	r2, r2, #1
  40325c:	6819      	ldr	r1, [r3, #0]
  40325e:	f8c7 b008 	str.w	fp, [r7, #8]
  403262:	4449      	add	r1, r9
  403264:	42bc      	cmp	r4, r7
  403266:	f8cb 2004 	str.w	r2, [fp, #4]
  40326a:	6019      	str	r1, [r3, #0]
  40326c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 403314 <_malloc_r+0x360>
  403270:	d016      	beq.n	4032a0 <_malloc_r+0x2ec>
  403272:	f1b8 0f0f 	cmp.w	r8, #15
  403276:	f240 80fd 	bls.w	403474 <_malloc_r+0x4c0>
  40327a:	6862      	ldr	r2, [r4, #4]
  40327c:	f1a8 030c 	sub.w	r3, r8, #12
  403280:	f023 0307 	bic.w	r3, r3, #7
  403284:	18e0      	adds	r0, r4, r3
  403286:	f002 0201 	and.w	r2, r2, #1
  40328a:	f04f 0e05 	mov.w	lr, #5
  40328e:	431a      	orrs	r2, r3
  403290:	2b0f      	cmp	r3, #15
  403292:	6062      	str	r2, [r4, #4]
  403294:	f8c0 e004 	str.w	lr, [r0, #4]
  403298:	f8c0 e008 	str.w	lr, [r0, #8]
  40329c:	f200 811c 	bhi.w	4034d8 <_malloc_r+0x524>
  4032a0:	4b1d      	ldr	r3, [pc, #116]	; (403318 <_malloc_r+0x364>)
  4032a2:	68bc      	ldr	r4, [r7, #8]
  4032a4:	681a      	ldr	r2, [r3, #0]
  4032a6:	4291      	cmp	r1, r2
  4032a8:	bf88      	it	hi
  4032aa:	6019      	strhi	r1, [r3, #0]
  4032ac:	4b1b      	ldr	r3, [pc, #108]	; (40331c <_malloc_r+0x368>)
  4032ae:	681a      	ldr	r2, [r3, #0]
  4032b0:	4291      	cmp	r1, r2
  4032b2:	6862      	ldr	r2, [r4, #4]
  4032b4:	bf88      	it	hi
  4032b6:	6019      	strhi	r1, [r3, #0]
  4032b8:	f022 0203 	bic.w	r2, r2, #3
  4032bc:	4295      	cmp	r5, r2
  4032be:	eba2 0305 	sub.w	r3, r2, r5
  4032c2:	d801      	bhi.n	4032c8 <_malloc_r+0x314>
  4032c4:	2b0f      	cmp	r3, #15
  4032c6:	dc04      	bgt.n	4032d2 <_malloc_r+0x31e>
  4032c8:	4630      	mov	r0, r6
  4032ca:	f000 fa15 	bl	4036f8 <__malloc_unlock>
  4032ce:	2400      	movs	r4, #0
  4032d0:	e738      	b.n	403144 <_malloc_r+0x190>
  4032d2:	1962      	adds	r2, r4, r5
  4032d4:	f043 0301 	orr.w	r3, r3, #1
  4032d8:	f045 0501 	orr.w	r5, r5, #1
  4032dc:	6065      	str	r5, [r4, #4]
  4032de:	4630      	mov	r0, r6
  4032e0:	60ba      	str	r2, [r7, #8]
  4032e2:	6053      	str	r3, [r2, #4]
  4032e4:	f000 fa08 	bl	4036f8 <__malloc_unlock>
  4032e8:	3408      	adds	r4, #8
  4032ea:	4620      	mov	r0, r4
  4032ec:	b003      	add	sp, #12
  4032ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4032f2:	2b14      	cmp	r3, #20
  4032f4:	d971      	bls.n	4033da <_malloc_r+0x426>
  4032f6:	2b54      	cmp	r3, #84	; 0x54
  4032f8:	f200 80a4 	bhi.w	403444 <_malloc_r+0x490>
  4032fc:	0b28      	lsrs	r0, r5, #12
  4032fe:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  403302:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403306:	306e      	adds	r0, #110	; 0x6e
  403308:	e676      	b.n	402ff8 <_malloc_r+0x44>
  40330a:	bf00      	nop
  40330c:	2040043c 	.word	0x2040043c
  403310:	20400b88 	.word	0x20400b88
  403314:	20400b8c 	.word	0x20400b8c
  403318:	20400b84 	.word	0x20400b84
  40331c:	20400b80 	.word	0x20400b80
  403320:	20400848 	.word	0x20400848
  403324:	0a5a      	lsrs	r2, r3, #9
  403326:	2a04      	cmp	r2, #4
  403328:	d95e      	bls.n	4033e8 <_malloc_r+0x434>
  40332a:	2a14      	cmp	r2, #20
  40332c:	f200 80b3 	bhi.w	403496 <_malloc_r+0x4e2>
  403330:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403334:	0049      	lsls	r1, r1, #1
  403336:	325b      	adds	r2, #91	; 0x5b
  403338:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  40333c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  403340:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 403520 <_malloc_r+0x56c>
  403344:	f1ac 0c08 	sub.w	ip, ip, #8
  403348:	458c      	cmp	ip, r1
  40334a:	f000 8088 	beq.w	40345e <_malloc_r+0x4aa>
  40334e:	684a      	ldr	r2, [r1, #4]
  403350:	f022 0203 	bic.w	r2, r2, #3
  403354:	4293      	cmp	r3, r2
  403356:	d202      	bcs.n	40335e <_malloc_r+0x3aa>
  403358:	6889      	ldr	r1, [r1, #8]
  40335a:	458c      	cmp	ip, r1
  40335c:	d1f7      	bne.n	40334e <_malloc_r+0x39a>
  40335e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  403362:	687a      	ldr	r2, [r7, #4]
  403364:	f8c4 c00c 	str.w	ip, [r4, #12]
  403368:	60a1      	str	r1, [r4, #8]
  40336a:	f8cc 4008 	str.w	r4, [ip, #8]
  40336e:	60cc      	str	r4, [r1, #12]
  403370:	e688      	b.n	403084 <_malloc_r+0xd0>
  403372:	1963      	adds	r3, r4, r5
  403374:	f042 0701 	orr.w	r7, r2, #1
  403378:	f045 0501 	orr.w	r5, r5, #1
  40337c:	6065      	str	r5, [r4, #4]
  40337e:	4630      	mov	r0, r6
  403380:	614b      	str	r3, [r1, #20]
  403382:	610b      	str	r3, [r1, #16]
  403384:	f8c3 e00c 	str.w	lr, [r3, #12]
  403388:	f8c3 e008 	str.w	lr, [r3, #8]
  40338c:	605f      	str	r7, [r3, #4]
  40338e:	509a      	str	r2, [r3, r2]
  403390:	3408      	adds	r4, #8
  403392:	f000 f9b1 	bl	4036f8 <__malloc_unlock>
  403396:	e6d5      	b.n	403144 <_malloc_r+0x190>
  403398:	684a      	ldr	r2, [r1, #4]
  40339a:	e673      	b.n	403084 <_malloc_r+0xd0>
  40339c:	f108 0801 	add.w	r8, r8, #1
  4033a0:	f018 0f03 	tst.w	r8, #3
  4033a4:	f10c 0c08 	add.w	ip, ip, #8
  4033a8:	f47f ae7f 	bne.w	4030aa <_malloc_r+0xf6>
  4033ac:	e030      	b.n	403410 <_malloc_r+0x45c>
  4033ae:	68dc      	ldr	r4, [r3, #12]
  4033b0:	42a3      	cmp	r3, r4
  4033b2:	bf08      	it	eq
  4033b4:	3002      	addeq	r0, #2
  4033b6:	f43f ae35 	beq.w	403024 <_malloc_r+0x70>
  4033ba:	e6b3      	b.n	403124 <_malloc_r+0x170>
  4033bc:	440b      	add	r3, r1
  4033be:	460c      	mov	r4, r1
  4033c0:	685a      	ldr	r2, [r3, #4]
  4033c2:	68c9      	ldr	r1, [r1, #12]
  4033c4:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4033c8:	f042 0201 	orr.w	r2, r2, #1
  4033cc:	605a      	str	r2, [r3, #4]
  4033ce:	4630      	mov	r0, r6
  4033d0:	60e9      	str	r1, [r5, #12]
  4033d2:	608d      	str	r5, [r1, #8]
  4033d4:	f000 f990 	bl	4036f8 <__malloc_unlock>
  4033d8:	e6b4      	b.n	403144 <_malloc_r+0x190>
  4033da:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  4033de:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  4033e2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4033e6:	e607      	b.n	402ff8 <_malloc_r+0x44>
  4033e8:	099a      	lsrs	r2, r3, #6
  4033ea:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4033ee:	0049      	lsls	r1, r1, #1
  4033f0:	3238      	adds	r2, #56	; 0x38
  4033f2:	e7a1      	b.n	403338 <_malloc_r+0x384>
  4033f4:	42bc      	cmp	r4, r7
  4033f6:	4b4a      	ldr	r3, [pc, #296]	; (403520 <_malloc_r+0x56c>)
  4033f8:	f43f af00 	beq.w	4031fc <_malloc_r+0x248>
  4033fc:	689c      	ldr	r4, [r3, #8]
  4033fe:	6862      	ldr	r2, [r4, #4]
  403400:	f022 0203 	bic.w	r2, r2, #3
  403404:	e75a      	b.n	4032bc <_malloc_r+0x308>
  403406:	f859 3908 	ldr.w	r3, [r9], #-8
  40340a:	4599      	cmp	r9, r3
  40340c:	f040 8082 	bne.w	403514 <_malloc_r+0x560>
  403410:	f010 0f03 	tst.w	r0, #3
  403414:	f100 30ff 	add.w	r0, r0, #4294967295
  403418:	d1f5      	bne.n	403406 <_malloc_r+0x452>
  40341a:	687b      	ldr	r3, [r7, #4]
  40341c:	ea23 0304 	bic.w	r3, r3, r4
  403420:	607b      	str	r3, [r7, #4]
  403422:	0064      	lsls	r4, r4, #1
  403424:	429c      	cmp	r4, r3
  403426:	f63f aebd 	bhi.w	4031a4 <_malloc_r+0x1f0>
  40342a:	2c00      	cmp	r4, #0
  40342c:	f43f aeba 	beq.w	4031a4 <_malloc_r+0x1f0>
  403430:	421c      	tst	r4, r3
  403432:	4640      	mov	r0, r8
  403434:	f47f ae35 	bne.w	4030a2 <_malloc_r+0xee>
  403438:	0064      	lsls	r4, r4, #1
  40343a:	421c      	tst	r4, r3
  40343c:	f100 0004 	add.w	r0, r0, #4
  403440:	d0fa      	beq.n	403438 <_malloc_r+0x484>
  403442:	e62e      	b.n	4030a2 <_malloc_r+0xee>
  403444:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403448:	d818      	bhi.n	40347c <_malloc_r+0x4c8>
  40344a:	0be8      	lsrs	r0, r5, #15
  40344c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  403450:	ea4f 034e 	mov.w	r3, lr, lsl #1
  403454:	3077      	adds	r0, #119	; 0x77
  403456:	e5cf      	b.n	402ff8 <_malloc_r+0x44>
  403458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40345c:	e6eb      	b.n	403236 <_malloc_r+0x282>
  40345e:	2101      	movs	r1, #1
  403460:	f8d8 3004 	ldr.w	r3, [r8, #4]
  403464:	1092      	asrs	r2, r2, #2
  403466:	fa01 f202 	lsl.w	r2, r1, r2
  40346a:	431a      	orrs	r2, r3
  40346c:	f8c8 2004 	str.w	r2, [r8, #4]
  403470:	4661      	mov	r1, ip
  403472:	e777      	b.n	403364 <_malloc_r+0x3b0>
  403474:	2301      	movs	r3, #1
  403476:	f8cb 3004 	str.w	r3, [fp, #4]
  40347a:	e725      	b.n	4032c8 <_malloc_r+0x314>
  40347c:	f240 5254 	movw	r2, #1364	; 0x554
  403480:	4293      	cmp	r3, r2
  403482:	d820      	bhi.n	4034c6 <_malloc_r+0x512>
  403484:	0ca8      	lsrs	r0, r5, #18
  403486:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  40348a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40348e:	307c      	adds	r0, #124	; 0x7c
  403490:	e5b2      	b.n	402ff8 <_malloc_r+0x44>
  403492:	3210      	adds	r2, #16
  403494:	e6a4      	b.n	4031e0 <_malloc_r+0x22c>
  403496:	2a54      	cmp	r2, #84	; 0x54
  403498:	d826      	bhi.n	4034e8 <_malloc_r+0x534>
  40349a:	0b1a      	lsrs	r2, r3, #12
  40349c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4034a0:	0049      	lsls	r1, r1, #1
  4034a2:	326e      	adds	r2, #110	; 0x6e
  4034a4:	e748      	b.n	403338 <_malloc_r+0x384>
  4034a6:	68bc      	ldr	r4, [r7, #8]
  4034a8:	6862      	ldr	r2, [r4, #4]
  4034aa:	f022 0203 	bic.w	r2, r2, #3
  4034ae:	e705      	b.n	4032bc <_malloc_r+0x308>
  4034b0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4034b4:	2800      	cmp	r0, #0
  4034b6:	f47f aea8 	bne.w	40320a <_malloc_r+0x256>
  4034ba:	4442      	add	r2, r8
  4034bc:	68bb      	ldr	r3, [r7, #8]
  4034be:	f042 0201 	orr.w	r2, r2, #1
  4034c2:	605a      	str	r2, [r3, #4]
  4034c4:	e6ec      	b.n	4032a0 <_malloc_r+0x2ec>
  4034c6:	23fe      	movs	r3, #254	; 0xfe
  4034c8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  4034cc:	207e      	movs	r0, #126	; 0x7e
  4034ce:	e593      	b.n	402ff8 <_malloc_r+0x44>
  4034d0:	2201      	movs	r2, #1
  4034d2:	f04f 0900 	mov.w	r9, #0
  4034d6:	e6c1      	b.n	40325c <_malloc_r+0x2a8>
  4034d8:	f104 0108 	add.w	r1, r4, #8
  4034dc:	4630      	mov	r0, r6
  4034de:	f003 ffd1 	bl	407484 <_free_r>
  4034e2:	f8d9 1000 	ldr.w	r1, [r9]
  4034e6:	e6db      	b.n	4032a0 <_malloc_r+0x2ec>
  4034e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4034ec:	d805      	bhi.n	4034fa <_malloc_r+0x546>
  4034ee:	0bda      	lsrs	r2, r3, #15
  4034f0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4034f4:	0049      	lsls	r1, r1, #1
  4034f6:	3277      	adds	r2, #119	; 0x77
  4034f8:	e71e      	b.n	403338 <_malloc_r+0x384>
  4034fa:	f240 5154 	movw	r1, #1364	; 0x554
  4034fe:	428a      	cmp	r2, r1
  403500:	d805      	bhi.n	40350e <_malloc_r+0x55a>
  403502:	0c9a      	lsrs	r2, r3, #18
  403504:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403508:	0049      	lsls	r1, r1, #1
  40350a:	327c      	adds	r2, #124	; 0x7c
  40350c:	e714      	b.n	403338 <_malloc_r+0x384>
  40350e:	21fe      	movs	r1, #254	; 0xfe
  403510:	227e      	movs	r2, #126	; 0x7e
  403512:	e711      	b.n	403338 <_malloc_r+0x384>
  403514:	687b      	ldr	r3, [r7, #4]
  403516:	e784      	b.n	403422 <_malloc_r+0x46e>
  403518:	08e8      	lsrs	r0, r5, #3
  40351a:	1c43      	adds	r3, r0, #1
  40351c:	005b      	lsls	r3, r3, #1
  40351e:	e5f8      	b.n	403112 <_malloc_r+0x15e>
  403520:	2040043c 	.word	0x2040043c

00403524 <memcpy>:
  403524:	4684      	mov	ip, r0
  403526:	ea41 0300 	orr.w	r3, r1, r0
  40352a:	f013 0303 	ands.w	r3, r3, #3
  40352e:	d16d      	bne.n	40360c <memcpy+0xe8>
  403530:	3a40      	subs	r2, #64	; 0x40
  403532:	d341      	bcc.n	4035b8 <memcpy+0x94>
  403534:	f851 3b04 	ldr.w	r3, [r1], #4
  403538:	f840 3b04 	str.w	r3, [r0], #4
  40353c:	f851 3b04 	ldr.w	r3, [r1], #4
  403540:	f840 3b04 	str.w	r3, [r0], #4
  403544:	f851 3b04 	ldr.w	r3, [r1], #4
  403548:	f840 3b04 	str.w	r3, [r0], #4
  40354c:	f851 3b04 	ldr.w	r3, [r1], #4
  403550:	f840 3b04 	str.w	r3, [r0], #4
  403554:	f851 3b04 	ldr.w	r3, [r1], #4
  403558:	f840 3b04 	str.w	r3, [r0], #4
  40355c:	f851 3b04 	ldr.w	r3, [r1], #4
  403560:	f840 3b04 	str.w	r3, [r0], #4
  403564:	f851 3b04 	ldr.w	r3, [r1], #4
  403568:	f840 3b04 	str.w	r3, [r0], #4
  40356c:	f851 3b04 	ldr.w	r3, [r1], #4
  403570:	f840 3b04 	str.w	r3, [r0], #4
  403574:	f851 3b04 	ldr.w	r3, [r1], #4
  403578:	f840 3b04 	str.w	r3, [r0], #4
  40357c:	f851 3b04 	ldr.w	r3, [r1], #4
  403580:	f840 3b04 	str.w	r3, [r0], #4
  403584:	f851 3b04 	ldr.w	r3, [r1], #4
  403588:	f840 3b04 	str.w	r3, [r0], #4
  40358c:	f851 3b04 	ldr.w	r3, [r1], #4
  403590:	f840 3b04 	str.w	r3, [r0], #4
  403594:	f851 3b04 	ldr.w	r3, [r1], #4
  403598:	f840 3b04 	str.w	r3, [r0], #4
  40359c:	f851 3b04 	ldr.w	r3, [r1], #4
  4035a0:	f840 3b04 	str.w	r3, [r0], #4
  4035a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035a8:	f840 3b04 	str.w	r3, [r0], #4
  4035ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4035b0:	f840 3b04 	str.w	r3, [r0], #4
  4035b4:	3a40      	subs	r2, #64	; 0x40
  4035b6:	d2bd      	bcs.n	403534 <memcpy+0x10>
  4035b8:	3230      	adds	r2, #48	; 0x30
  4035ba:	d311      	bcc.n	4035e0 <memcpy+0xbc>
  4035bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c0:	f840 3b04 	str.w	r3, [r0], #4
  4035c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035c8:	f840 3b04 	str.w	r3, [r0], #4
  4035cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d0:	f840 3b04 	str.w	r3, [r0], #4
  4035d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035d8:	f840 3b04 	str.w	r3, [r0], #4
  4035dc:	3a10      	subs	r2, #16
  4035de:	d2ed      	bcs.n	4035bc <memcpy+0x98>
  4035e0:	320c      	adds	r2, #12
  4035e2:	d305      	bcc.n	4035f0 <memcpy+0xcc>
  4035e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4035e8:	f840 3b04 	str.w	r3, [r0], #4
  4035ec:	3a04      	subs	r2, #4
  4035ee:	d2f9      	bcs.n	4035e4 <memcpy+0xc0>
  4035f0:	3204      	adds	r2, #4
  4035f2:	d008      	beq.n	403606 <memcpy+0xe2>
  4035f4:	07d2      	lsls	r2, r2, #31
  4035f6:	bf1c      	itt	ne
  4035f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4035fc:	f800 3b01 	strbne.w	r3, [r0], #1
  403600:	d301      	bcc.n	403606 <memcpy+0xe2>
  403602:	880b      	ldrh	r3, [r1, #0]
  403604:	8003      	strh	r3, [r0, #0]
  403606:	4660      	mov	r0, ip
  403608:	4770      	bx	lr
  40360a:	bf00      	nop
  40360c:	2a08      	cmp	r2, #8
  40360e:	d313      	bcc.n	403638 <memcpy+0x114>
  403610:	078b      	lsls	r3, r1, #30
  403612:	d08d      	beq.n	403530 <memcpy+0xc>
  403614:	f010 0303 	ands.w	r3, r0, #3
  403618:	d08a      	beq.n	403530 <memcpy+0xc>
  40361a:	f1c3 0304 	rsb	r3, r3, #4
  40361e:	1ad2      	subs	r2, r2, r3
  403620:	07db      	lsls	r3, r3, #31
  403622:	bf1c      	itt	ne
  403624:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403628:	f800 3b01 	strbne.w	r3, [r0], #1
  40362c:	d380      	bcc.n	403530 <memcpy+0xc>
  40362e:	f831 3b02 	ldrh.w	r3, [r1], #2
  403632:	f820 3b02 	strh.w	r3, [r0], #2
  403636:	e77b      	b.n	403530 <memcpy+0xc>
  403638:	3a04      	subs	r2, #4
  40363a:	d3d9      	bcc.n	4035f0 <memcpy+0xcc>
  40363c:	3a01      	subs	r2, #1
  40363e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403642:	f800 3b01 	strb.w	r3, [r0], #1
  403646:	d2f9      	bcs.n	40363c <memcpy+0x118>
  403648:	780b      	ldrb	r3, [r1, #0]
  40364a:	7003      	strb	r3, [r0, #0]
  40364c:	784b      	ldrb	r3, [r1, #1]
  40364e:	7043      	strb	r3, [r0, #1]
  403650:	788b      	ldrb	r3, [r1, #2]
  403652:	7083      	strb	r3, [r0, #2]
  403654:	4660      	mov	r0, ip
  403656:	4770      	bx	lr

00403658 <memset>:
  403658:	b470      	push	{r4, r5, r6}
  40365a:	0784      	lsls	r4, r0, #30
  40365c:	d046      	beq.n	4036ec <memset+0x94>
  40365e:	1e54      	subs	r4, r2, #1
  403660:	2a00      	cmp	r2, #0
  403662:	d041      	beq.n	4036e8 <memset+0x90>
  403664:	b2cd      	uxtb	r5, r1
  403666:	4603      	mov	r3, r0
  403668:	e002      	b.n	403670 <memset+0x18>
  40366a:	1e62      	subs	r2, r4, #1
  40366c:	b3e4      	cbz	r4, 4036e8 <memset+0x90>
  40366e:	4614      	mov	r4, r2
  403670:	f803 5b01 	strb.w	r5, [r3], #1
  403674:	079a      	lsls	r2, r3, #30
  403676:	d1f8      	bne.n	40366a <memset+0x12>
  403678:	2c03      	cmp	r4, #3
  40367a:	d92e      	bls.n	4036da <memset+0x82>
  40367c:	b2cd      	uxtb	r5, r1
  40367e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403682:	2c0f      	cmp	r4, #15
  403684:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403688:	d919      	bls.n	4036be <memset+0x66>
  40368a:	f103 0210 	add.w	r2, r3, #16
  40368e:	4626      	mov	r6, r4
  403690:	3e10      	subs	r6, #16
  403692:	2e0f      	cmp	r6, #15
  403694:	f842 5c10 	str.w	r5, [r2, #-16]
  403698:	f842 5c0c 	str.w	r5, [r2, #-12]
  40369c:	f842 5c08 	str.w	r5, [r2, #-8]
  4036a0:	f842 5c04 	str.w	r5, [r2, #-4]
  4036a4:	f102 0210 	add.w	r2, r2, #16
  4036a8:	d8f2      	bhi.n	403690 <memset+0x38>
  4036aa:	f1a4 0210 	sub.w	r2, r4, #16
  4036ae:	f022 020f 	bic.w	r2, r2, #15
  4036b2:	f004 040f 	and.w	r4, r4, #15
  4036b6:	3210      	adds	r2, #16
  4036b8:	2c03      	cmp	r4, #3
  4036ba:	4413      	add	r3, r2
  4036bc:	d90d      	bls.n	4036da <memset+0x82>
  4036be:	461e      	mov	r6, r3
  4036c0:	4622      	mov	r2, r4
  4036c2:	3a04      	subs	r2, #4
  4036c4:	2a03      	cmp	r2, #3
  4036c6:	f846 5b04 	str.w	r5, [r6], #4
  4036ca:	d8fa      	bhi.n	4036c2 <memset+0x6a>
  4036cc:	1f22      	subs	r2, r4, #4
  4036ce:	f022 0203 	bic.w	r2, r2, #3
  4036d2:	3204      	adds	r2, #4
  4036d4:	4413      	add	r3, r2
  4036d6:	f004 0403 	and.w	r4, r4, #3
  4036da:	b12c      	cbz	r4, 4036e8 <memset+0x90>
  4036dc:	b2c9      	uxtb	r1, r1
  4036de:	441c      	add	r4, r3
  4036e0:	f803 1b01 	strb.w	r1, [r3], #1
  4036e4:	42a3      	cmp	r3, r4
  4036e6:	d1fb      	bne.n	4036e0 <memset+0x88>
  4036e8:	bc70      	pop	{r4, r5, r6}
  4036ea:	4770      	bx	lr
  4036ec:	4614      	mov	r4, r2
  4036ee:	4603      	mov	r3, r0
  4036f0:	e7c2      	b.n	403678 <memset+0x20>
  4036f2:	bf00      	nop

004036f4 <__malloc_lock>:
  4036f4:	4770      	bx	lr
  4036f6:	bf00      	nop

004036f8 <__malloc_unlock>:
  4036f8:	4770      	bx	lr
  4036fa:	bf00      	nop

004036fc <_sbrk_r>:
  4036fc:	b538      	push	{r3, r4, r5, lr}
  4036fe:	4c07      	ldr	r4, [pc, #28]	; (40371c <_sbrk_r+0x20>)
  403700:	2300      	movs	r3, #0
  403702:	4605      	mov	r5, r0
  403704:	4608      	mov	r0, r1
  403706:	6023      	str	r3, [r4, #0]
  403708:	f7fd f9cc 	bl	400aa4 <_sbrk>
  40370c:	1c43      	adds	r3, r0, #1
  40370e:	d000      	beq.n	403712 <_sbrk_r+0x16>
  403710:	bd38      	pop	{r3, r4, r5, pc}
  403712:	6823      	ldr	r3, [r4, #0]
  403714:	2b00      	cmp	r3, #0
  403716:	d0fb      	beq.n	403710 <_sbrk_r+0x14>
  403718:	602b      	str	r3, [r5, #0]
  40371a:	bd38      	pop	{r3, r4, r5, pc}
  40371c:	20400c00 	.word	0x20400c00

00403720 <setbuf>:
  403720:	2900      	cmp	r1, #0
  403722:	bf0c      	ite	eq
  403724:	2202      	moveq	r2, #2
  403726:	2200      	movne	r2, #0
  403728:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40372c:	f000 b800 	b.w	403730 <setvbuf>

00403730 <setvbuf>:
  403730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403734:	4c51      	ldr	r4, [pc, #324]	; (40387c <setvbuf+0x14c>)
  403736:	6825      	ldr	r5, [r4, #0]
  403738:	b083      	sub	sp, #12
  40373a:	4604      	mov	r4, r0
  40373c:	460f      	mov	r7, r1
  40373e:	4690      	mov	r8, r2
  403740:	461e      	mov	r6, r3
  403742:	b115      	cbz	r5, 40374a <setvbuf+0x1a>
  403744:	6bab      	ldr	r3, [r5, #56]	; 0x38
  403746:	2b00      	cmp	r3, #0
  403748:	d079      	beq.n	40383e <setvbuf+0x10e>
  40374a:	f1b8 0f02 	cmp.w	r8, #2
  40374e:	d004      	beq.n	40375a <setvbuf+0x2a>
  403750:	f1b8 0f01 	cmp.w	r8, #1
  403754:	d87f      	bhi.n	403856 <setvbuf+0x126>
  403756:	2e00      	cmp	r6, #0
  403758:	db7d      	blt.n	403856 <setvbuf+0x126>
  40375a:	4621      	mov	r1, r4
  40375c:	4628      	mov	r0, r5
  40375e:	f003 fd33 	bl	4071c8 <_fflush_r>
  403762:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403764:	b141      	cbz	r1, 403778 <setvbuf+0x48>
  403766:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40376a:	4299      	cmp	r1, r3
  40376c:	d002      	beq.n	403774 <setvbuf+0x44>
  40376e:	4628      	mov	r0, r5
  403770:	f003 fe88 	bl	407484 <_free_r>
  403774:	2300      	movs	r3, #0
  403776:	6323      	str	r3, [r4, #48]	; 0x30
  403778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40377c:	2200      	movs	r2, #0
  40377e:	61a2      	str	r2, [r4, #24]
  403780:	6062      	str	r2, [r4, #4]
  403782:	061a      	lsls	r2, r3, #24
  403784:	d454      	bmi.n	403830 <setvbuf+0x100>
  403786:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40378a:	f023 0303 	bic.w	r3, r3, #3
  40378e:	f1b8 0f02 	cmp.w	r8, #2
  403792:	81a3      	strh	r3, [r4, #12]
  403794:	d039      	beq.n	40380a <setvbuf+0xda>
  403796:	ab01      	add	r3, sp, #4
  403798:	466a      	mov	r2, sp
  40379a:	4621      	mov	r1, r4
  40379c:	4628      	mov	r0, r5
  40379e:	f004 f913 	bl	4079c8 <__swhatbuf_r>
  4037a2:	89a3      	ldrh	r3, [r4, #12]
  4037a4:	4318      	orrs	r0, r3
  4037a6:	81a0      	strh	r0, [r4, #12]
  4037a8:	b326      	cbz	r6, 4037f4 <setvbuf+0xc4>
  4037aa:	b327      	cbz	r7, 4037f6 <setvbuf+0xc6>
  4037ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4037ae:	2b00      	cmp	r3, #0
  4037b0:	d04d      	beq.n	40384e <setvbuf+0x11e>
  4037b2:	9b00      	ldr	r3, [sp, #0]
  4037b4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  4037b8:	6027      	str	r7, [r4, #0]
  4037ba:	429e      	cmp	r6, r3
  4037bc:	bf1c      	itt	ne
  4037be:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  4037c2:	81a0      	strhne	r0, [r4, #12]
  4037c4:	f1b8 0f01 	cmp.w	r8, #1
  4037c8:	bf08      	it	eq
  4037ca:	f040 0001 	orreq.w	r0, r0, #1
  4037ce:	b283      	uxth	r3, r0
  4037d0:	bf08      	it	eq
  4037d2:	81a0      	strheq	r0, [r4, #12]
  4037d4:	f003 0008 	and.w	r0, r3, #8
  4037d8:	b280      	uxth	r0, r0
  4037da:	6127      	str	r7, [r4, #16]
  4037dc:	6166      	str	r6, [r4, #20]
  4037de:	b318      	cbz	r0, 403828 <setvbuf+0xf8>
  4037e0:	f013 0001 	ands.w	r0, r3, #1
  4037e4:	d02f      	beq.n	403846 <setvbuf+0x116>
  4037e6:	2000      	movs	r0, #0
  4037e8:	4276      	negs	r6, r6
  4037ea:	61a6      	str	r6, [r4, #24]
  4037ec:	60a0      	str	r0, [r4, #8]
  4037ee:	b003      	add	sp, #12
  4037f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4037f4:	9e00      	ldr	r6, [sp, #0]
  4037f6:	4630      	mov	r0, r6
  4037f8:	f7ff fbcc 	bl	402f94 <malloc>
  4037fc:	4607      	mov	r7, r0
  4037fe:	b368      	cbz	r0, 40385c <setvbuf+0x12c>
  403800:	89a3      	ldrh	r3, [r4, #12]
  403802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403806:	81a3      	strh	r3, [r4, #12]
  403808:	e7d0      	b.n	4037ac <setvbuf+0x7c>
  40380a:	2000      	movs	r0, #0
  40380c:	f104 0243 	add.w	r2, r4, #67	; 0x43
  403810:	f043 0302 	orr.w	r3, r3, #2
  403814:	2500      	movs	r5, #0
  403816:	2101      	movs	r1, #1
  403818:	81a3      	strh	r3, [r4, #12]
  40381a:	60a5      	str	r5, [r4, #8]
  40381c:	6022      	str	r2, [r4, #0]
  40381e:	6122      	str	r2, [r4, #16]
  403820:	6161      	str	r1, [r4, #20]
  403822:	b003      	add	sp, #12
  403824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403828:	60a0      	str	r0, [r4, #8]
  40382a:	b003      	add	sp, #12
  40382c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403830:	6921      	ldr	r1, [r4, #16]
  403832:	4628      	mov	r0, r5
  403834:	f003 fe26 	bl	407484 <_free_r>
  403838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40383c:	e7a3      	b.n	403786 <setvbuf+0x56>
  40383e:	4628      	mov	r0, r5
  403840:	f003 fd56 	bl	4072f0 <__sinit>
  403844:	e781      	b.n	40374a <setvbuf+0x1a>
  403846:	60a6      	str	r6, [r4, #8]
  403848:	b003      	add	sp, #12
  40384a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40384e:	4628      	mov	r0, r5
  403850:	f003 fd4e 	bl	4072f0 <__sinit>
  403854:	e7ad      	b.n	4037b2 <setvbuf+0x82>
  403856:	f04f 30ff 	mov.w	r0, #4294967295
  40385a:	e7e2      	b.n	403822 <setvbuf+0xf2>
  40385c:	f8dd 9000 	ldr.w	r9, [sp]
  403860:	45b1      	cmp	r9, r6
  403862:	d006      	beq.n	403872 <setvbuf+0x142>
  403864:	4648      	mov	r0, r9
  403866:	f7ff fb95 	bl	402f94 <malloc>
  40386a:	4607      	mov	r7, r0
  40386c:	b108      	cbz	r0, 403872 <setvbuf+0x142>
  40386e:	464e      	mov	r6, r9
  403870:	e7c6      	b.n	403800 <setvbuf+0xd0>
  403872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403876:	f04f 30ff 	mov.w	r0, #4294967295
  40387a:	e7c7      	b.n	40380c <setvbuf+0xdc>
  40387c:	20400438 	.word	0x20400438

00403880 <sprintf>:
  403880:	b40e      	push	{r1, r2, r3}
  403882:	b5f0      	push	{r4, r5, r6, r7, lr}
  403884:	b09c      	sub	sp, #112	; 0x70
  403886:	ab21      	add	r3, sp, #132	; 0x84
  403888:	490f      	ldr	r1, [pc, #60]	; (4038c8 <sprintf+0x48>)
  40388a:	f853 2b04 	ldr.w	r2, [r3], #4
  40388e:	9301      	str	r3, [sp, #4]
  403890:	4605      	mov	r5, r0
  403892:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403896:	6808      	ldr	r0, [r1, #0]
  403898:	9502      	str	r5, [sp, #8]
  40389a:	f44f 7702 	mov.w	r7, #520	; 0x208
  40389e:	f64f 76ff 	movw	r6, #65535	; 0xffff
  4038a2:	a902      	add	r1, sp, #8
  4038a4:	9506      	str	r5, [sp, #24]
  4038a6:	f8ad 7014 	strh.w	r7, [sp, #20]
  4038aa:	9404      	str	r4, [sp, #16]
  4038ac:	9407      	str	r4, [sp, #28]
  4038ae:	f8ad 6016 	strh.w	r6, [sp, #22]
  4038b2:	f000 f8f3 	bl	403a9c <_svfprintf_r>
  4038b6:	9b02      	ldr	r3, [sp, #8]
  4038b8:	2200      	movs	r2, #0
  4038ba:	701a      	strb	r2, [r3, #0]
  4038bc:	b01c      	add	sp, #112	; 0x70
  4038be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4038c2:	b003      	add	sp, #12
  4038c4:	4770      	bx	lr
  4038c6:	bf00      	nop
  4038c8:	20400438 	.word	0x20400438

004038cc <strcpy>:
  4038cc:	ea80 0201 	eor.w	r2, r0, r1
  4038d0:	4684      	mov	ip, r0
  4038d2:	f012 0f03 	tst.w	r2, #3
  4038d6:	d14f      	bne.n	403978 <strcpy+0xac>
  4038d8:	f011 0f03 	tst.w	r1, #3
  4038dc:	d132      	bne.n	403944 <strcpy+0x78>
  4038de:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4038e2:	f011 0f04 	tst.w	r1, #4
  4038e6:	f851 3b04 	ldr.w	r3, [r1], #4
  4038ea:	d00b      	beq.n	403904 <strcpy+0x38>
  4038ec:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4038f0:	439a      	bics	r2, r3
  4038f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4038f6:	bf04      	itt	eq
  4038f8:	f84c 3b04 	streq.w	r3, [ip], #4
  4038fc:	f851 3b04 	ldreq.w	r3, [r1], #4
  403900:	d116      	bne.n	403930 <strcpy+0x64>
  403902:	bf00      	nop
  403904:	f851 4b04 	ldr.w	r4, [r1], #4
  403908:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40390c:	439a      	bics	r2, r3
  40390e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403912:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  403916:	d10b      	bne.n	403930 <strcpy+0x64>
  403918:	f84c 3b04 	str.w	r3, [ip], #4
  40391c:	43a2      	bics	r2, r4
  40391e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  403922:	bf04      	itt	eq
  403924:	f851 3b04 	ldreq.w	r3, [r1], #4
  403928:	f84c 4b04 	streq.w	r4, [ip], #4
  40392c:	d0ea      	beq.n	403904 <strcpy+0x38>
  40392e:	4623      	mov	r3, r4
  403930:	f80c 3b01 	strb.w	r3, [ip], #1
  403934:	f013 0fff 	tst.w	r3, #255	; 0xff
  403938:	ea4f 2333 	mov.w	r3, r3, ror #8
  40393c:	d1f8      	bne.n	403930 <strcpy+0x64>
  40393e:	f85d 4b04 	ldr.w	r4, [sp], #4
  403942:	4770      	bx	lr
  403944:	f011 0f01 	tst.w	r1, #1
  403948:	d006      	beq.n	403958 <strcpy+0x8c>
  40394a:	f811 2b01 	ldrb.w	r2, [r1], #1
  40394e:	f80c 2b01 	strb.w	r2, [ip], #1
  403952:	2a00      	cmp	r2, #0
  403954:	bf08      	it	eq
  403956:	4770      	bxeq	lr
  403958:	f011 0f02 	tst.w	r1, #2
  40395c:	d0bf      	beq.n	4038de <strcpy+0x12>
  40395e:	f831 2b02 	ldrh.w	r2, [r1], #2
  403962:	f012 0fff 	tst.w	r2, #255	; 0xff
  403966:	bf16      	itet	ne
  403968:	f82c 2b02 	strhne.w	r2, [ip], #2
  40396c:	f88c 2000 	strbeq.w	r2, [ip]
  403970:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  403974:	d1b3      	bne.n	4038de <strcpy+0x12>
  403976:	4770      	bx	lr
  403978:	f811 2b01 	ldrb.w	r2, [r1], #1
  40397c:	f80c 2b01 	strb.w	r2, [ip], #1
  403980:	2a00      	cmp	r2, #0
  403982:	d1f9      	bne.n	403978 <strcpy+0xac>
  403984:	4770      	bx	lr
  403986:	bf00      	nop
	...

004039c0 <strlen>:
  4039c0:	f890 f000 	pld	[r0]
  4039c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4039c8:	f020 0107 	bic.w	r1, r0, #7
  4039cc:	f06f 0c00 	mvn.w	ip, #0
  4039d0:	f010 0407 	ands.w	r4, r0, #7
  4039d4:	f891 f020 	pld	[r1, #32]
  4039d8:	f040 8049 	bne.w	403a6e <strlen+0xae>
  4039dc:	f04f 0400 	mov.w	r4, #0
  4039e0:	f06f 0007 	mvn.w	r0, #7
  4039e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4039e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4039ec:	f100 0008 	add.w	r0, r0, #8
  4039f0:	fa82 f24c 	uadd8	r2, r2, ip
  4039f4:	faa4 f28c 	sel	r2, r4, ip
  4039f8:	fa83 f34c 	uadd8	r3, r3, ip
  4039fc:	faa2 f38c 	sel	r3, r2, ip
  403a00:	bb4b      	cbnz	r3, 403a56 <strlen+0x96>
  403a02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403a06:	fa82 f24c 	uadd8	r2, r2, ip
  403a0a:	f100 0008 	add.w	r0, r0, #8
  403a0e:	faa4 f28c 	sel	r2, r4, ip
  403a12:	fa83 f34c 	uadd8	r3, r3, ip
  403a16:	faa2 f38c 	sel	r3, r2, ip
  403a1a:	b9e3      	cbnz	r3, 403a56 <strlen+0x96>
  403a1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403a20:	fa82 f24c 	uadd8	r2, r2, ip
  403a24:	f100 0008 	add.w	r0, r0, #8
  403a28:	faa4 f28c 	sel	r2, r4, ip
  403a2c:	fa83 f34c 	uadd8	r3, r3, ip
  403a30:	faa2 f38c 	sel	r3, r2, ip
  403a34:	b97b      	cbnz	r3, 403a56 <strlen+0x96>
  403a36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403a3a:	f101 0120 	add.w	r1, r1, #32
  403a3e:	fa82 f24c 	uadd8	r2, r2, ip
  403a42:	f100 0008 	add.w	r0, r0, #8
  403a46:	faa4 f28c 	sel	r2, r4, ip
  403a4a:	fa83 f34c 	uadd8	r3, r3, ip
  403a4e:	faa2 f38c 	sel	r3, r2, ip
  403a52:	2b00      	cmp	r3, #0
  403a54:	d0c6      	beq.n	4039e4 <strlen+0x24>
  403a56:	2a00      	cmp	r2, #0
  403a58:	bf04      	itt	eq
  403a5a:	3004      	addeq	r0, #4
  403a5c:	461a      	moveq	r2, r3
  403a5e:	ba12      	rev	r2, r2
  403a60:	fab2 f282 	clz	r2, r2
  403a64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403a68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403a6c:	4770      	bx	lr
  403a6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  403a72:	f004 0503 	and.w	r5, r4, #3
  403a76:	f1c4 0000 	rsb	r0, r4, #0
  403a7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403a7e:	f014 0f04 	tst.w	r4, #4
  403a82:	f891 f040 	pld	[r1, #64]	; 0x40
  403a86:	fa0c f505 	lsl.w	r5, ip, r5
  403a8a:	ea62 0205 	orn	r2, r2, r5
  403a8e:	bf1c      	itt	ne
  403a90:	ea63 0305 	ornne	r3, r3, r5
  403a94:	4662      	movne	r2, ip
  403a96:	f04f 0400 	mov.w	r4, #0
  403a9a:	e7a9      	b.n	4039f0 <strlen+0x30>

00403a9c <_svfprintf_r>:
  403a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403aa0:	b0c1      	sub	sp, #260	; 0x104
  403aa2:	460c      	mov	r4, r1
  403aa4:	9109      	str	r1, [sp, #36]	; 0x24
  403aa6:	4615      	mov	r5, r2
  403aa8:	930e      	str	r3, [sp, #56]	; 0x38
  403aaa:	900a      	str	r0, [sp, #40]	; 0x28
  403aac:	f003 ff88 	bl	4079c0 <_localeconv_r>
  403ab0:	6803      	ldr	r3, [r0, #0]
  403ab2:	9317      	str	r3, [sp, #92]	; 0x5c
  403ab4:	4618      	mov	r0, r3
  403ab6:	f7ff ff83 	bl	4039c0 <strlen>
  403aba:	89a3      	ldrh	r3, [r4, #12]
  403abc:	9016      	str	r0, [sp, #88]	; 0x58
  403abe:	061e      	lsls	r6, r3, #24
  403ac0:	d503      	bpl.n	403aca <_svfprintf_r+0x2e>
  403ac2:	6923      	ldr	r3, [r4, #16]
  403ac4:	2b00      	cmp	r3, #0
  403ac6:	f001 8119 	beq.w	404cfc <_svfprintf_r+0x1260>
  403aca:	2300      	movs	r3, #0
  403acc:	461a      	mov	r2, r3
  403ace:	9312      	str	r3, [sp, #72]	; 0x48
  403ad0:	9325      	str	r3, [sp, #148]	; 0x94
  403ad2:	9324      	str	r3, [sp, #144]	; 0x90
  403ad4:	9319      	str	r3, [sp, #100]	; 0x64
  403ad6:	930b      	str	r3, [sp, #44]	; 0x2c
  403ad8:	f8df a464 	ldr.w	sl, [pc, #1124]	; 403f40 <_svfprintf_r+0x4a4>
  403adc:	9214      	str	r2, [sp, #80]	; 0x50
  403ade:	ab30      	add	r3, sp, #192	; 0xc0
  403ae0:	9323      	str	r3, [sp, #140]	; 0x8c
  403ae2:	4699      	mov	r9, r3
  403ae4:	9215      	str	r2, [sp, #84]	; 0x54
  403ae6:	46a8      	mov	r8, r5
  403ae8:	f898 3000 	ldrb.w	r3, [r8]
  403aec:	4644      	mov	r4, r8
  403aee:	b1eb      	cbz	r3, 403b2c <_svfprintf_r+0x90>
  403af0:	2b25      	cmp	r3, #37	; 0x25
  403af2:	d102      	bne.n	403afa <_svfprintf_r+0x5e>
  403af4:	e01a      	b.n	403b2c <_svfprintf_r+0x90>
  403af6:	2b25      	cmp	r3, #37	; 0x25
  403af8:	d003      	beq.n	403b02 <_svfprintf_r+0x66>
  403afa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  403afe:	2b00      	cmp	r3, #0
  403b00:	d1f9      	bne.n	403af6 <_svfprintf_r+0x5a>
  403b02:	ebc8 0504 	rsb	r5, r8, r4
  403b06:	b18d      	cbz	r5, 403b2c <_svfprintf_r+0x90>
  403b08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403b0a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403b0c:	f8c9 8000 	str.w	r8, [r9]
  403b10:	3301      	adds	r3, #1
  403b12:	442a      	add	r2, r5
  403b14:	2b07      	cmp	r3, #7
  403b16:	f8c9 5004 	str.w	r5, [r9, #4]
  403b1a:	9225      	str	r2, [sp, #148]	; 0x94
  403b1c:	9324      	str	r3, [sp, #144]	; 0x90
  403b1e:	f300 80a6 	bgt.w	403c6e <_svfprintf_r+0x1d2>
  403b22:	f109 0908 	add.w	r9, r9, #8
  403b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403b28:	442b      	add	r3, r5
  403b2a:	930b      	str	r3, [sp, #44]	; 0x2c
  403b2c:	7823      	ldrb	r3, [r4, #0]
  403b2e:	2b00      	cmp	r3, #0
  403b30:	f000 80a6 	beq.w	403c80 <_svfprintf_r+0x1e4>
  403b34:	2300      	movs	r3, #0
  403b36:	461a      	mov	r2, r3
  403b38:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  403b3c:	4619      	mov	r1, r3
  403b3e:	930c      	str	r3, [sp, #48]	; 0x30
  403b40:	9307      	str	r3, [sp, #28]
  403b42:	f04f 3bff 	mov.w	fp, #4294967295
  403b46:	7863      	ldrb	r3, [r4, #1]
  403b48:	f104 0801 	add.w	r8, r4, #1
  403b4c:	465d      	mov	r5, fp
  403b4e:	f108 0801 	add.w	r8, r8, #1
  403b52:	f1a3 0020 	sub.w	r0, r3, #32
  403b56:	2858      	cmp	r0, #88	; 0x58
  403b58:	f200 8425 	bhi.w	4043a6 <_svfprintf_r+0x90a>
  403b5c:	e8df f010 	tbh	[pc, r0, lsl #1]
  403b60:	04230388 	.word	0x04230388
  403b64:	03900423 	.word	0x03900423
  403b68:	04230423 	.word	0x04230423
  403b6c:	04230423 	.word	0x04230423
  403b70:	04230423 	.word	0x04230423
  403b74:	03a50397 	.word	0x03a50397
  403b78:	005d0423 	.word	0x005d0423
  403b7c:	042300e2 	.word	0x042300e2
  403b80:	010500fe 	.word	0x010500fe
  403b84:	01050105 	.word	0x01050105
  403b88:	01050105 	.word	0x01050105
  403b8c:	01050105 	.word	0x01050105
  403b90:	01050105 	.word	0x01050105
  403b94:	04230423 	.word	0x04230423
  403b98:	04230423 	.word	0x04230423
  403b9c:	04230423 	.word	0x04230423
  403ba0:	04230423 	.word	0x04230423
  403ba4:	04230423 	.word	0x04230423
  403ba8:	02810115 	.word	0x02810115
  403bac:	02810423 	.word	0x02810423
  403bb0:	04230423 	.word	0x04230423
  403bb4:	04230423 	.word	0x04230423
  403bb8:	042302c6 	.word	0x042302c6
  403bbc:	02cd0423 	.word	0x02cd0423
  403bc0:	04230423 	.word	0x04230423
  403bc4:	04230423 	.word	0x04230423
  403bc8:	02f70423 	.word	0x02f70423
  403bcc:	04230423 	.word	0x04230423
  403bd0:	04230325 	.word	0x04230325
  403bd4:	04230423 	.word	0x04230423
  403bd8:	04230423 	.word	0x04230423
  403bdc:	04230423 	.word	0x04230423
  403be0:	04230423 	.word	0x04230423
  403be4:	03660423 	.word	0x03660423
  403be8:	02810379 	.word	0x02810379
  403bec:	02810281 	.word	0x02810281
  403bf0:	03790381 	.word	0x03790381
  403bf4:	04230423 	.word	0x04230423
  403bf8:	042303d1 	.word	0x042303d1
  403bfc:	00a303db 	.word	0x00a303db
  403c00:	03ee0064 	.word	0x03ee0064
  403c04:	03f50423 	.word	0x03f50423
  403c08:	03aa0423 	.word	0x03aa0423
  403c0c:	04230423 	.word	0x04230423
  403c10:	03bc      	.short	0x03bc
  403c12:	980c      	ldr	r0, [sp, #48]	; 0x30
  403c14:	930e      	str	r3, [sp, #56]	; 0x38
  403c16:	4240      	negs	r0, r0
  403c18:	900c      	str	r0, [sp, #48]	; 0x30
  403c1a:	9b07      	ldr	r3, [sp, #28]
  403c1c:	f043 0304 	orr.w	r3, r3, #4
  403c20:	9307      	str	r3, [sp, #28]
  403c22:	f898 3000 	ldrb.w	r3, [r8]
  403c26:	e792      	b.n	403b4e <_svfprintf_r+0xb2>
  403c28:	980e      	ldr	r0, [sp, #56]	; 0x38
  403c2a:	46ab      	mov	fp, r5
  403c2c:	2100      	movs	r1, #0
  403c2e:	6804      	ldr	r4, [r0, #0]
  403c30:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  403c34:	1d07      	adds	r7, r0, #4
  403c36:	9807      	ldr	r0, [sp, #28]
  403c38:	2330      	movs	r3, #48	; 0x30
  403c3a:	2278      	movs	r2, #120	; 0x78
  403c3c:	458b      	cmp	fp, r1
  403c3e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  403c42:	f04f 0500 	mov.w	r5, #0
  403c46:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  403c4a:	f040 0302 	orr.w	r3, r0, #2
  403c4e:	f2c0 83c7 	blt.w	4043e0 <_svfprintf_r+0x944>
  403c52:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  403c56:	f043 0302 	orr.w	r3, r3, #2
  403c5a:	9307      	str	r3, [sp, #28]
  403c5c:	ea54 0305 	orrs.w	r3, r4, r5
  403c60:	970e      	str	r7, [sp, #56]	; 0x38
  403c62:	f000 8393 	beq.w	40438c <_svfprintf_r+0x8f0>
  403c66:	460f      	mov	r7, r1
  403c68:	9211      	str	r2, [sp, #68]	; 0x44
  403c6a:	48b3      	ldr	r0, [pc, #716]	; (403f38 <_svfprintf_r+0x49c>)
  403c6c:	e2ce      	b.n	40420c <_svfprintf_r+0x770>
  403c6e:	aa23      	add	r2, sp, #140	; 0x8c
  403c70:	9909      	ldr	r1, [sp, #36]	; 0x24
  403c72:	980a      	ldr	r0, [sp, #40]	; 0x28
  403c74:	f004 fd12 	bl	40869c <__ssprint_r>
  403c78:	b948      	cbnz	r0, 403c8e <_svfprintf_r+0x1f2>
  403c7a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403c7e:	e752      	b.n	403b26 <_svfprintf_r+0x8a>
  403c80:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403c82:	b123      	cbz	r3, 403c8e <_svfprintf_r+0x1f2>
  403c84:	980a      	ldr	r0, [sp, #40]	; 0x28
  403c86:	9909      	ldr	r1, [sp, #36]	; 0x24
  403c88:	aa23      	add	r2, sp, #140	; 0x8c
  403c8a:	f004 fd07 	bl	40869c <__ssprint_r>
  403c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403c90:	899b      	ldrh	r3, [r3, #12]
  403c92:	f013 0f40 	tst.w	r3, #64	; 0x40
  403c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403c98:	bf18      	it	ne
  403c9a:	f04f 33ff 	movne.w	r3, #4294967295
  403c9e:	4618      	mov	r0, r3
  403ca0:	b041      	add	sp, #260	; 0x104
  403ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403ca6:	9311      	str	r3, [sp, #68]	; 0x44
  403ca8:	46ab      	mov	fp, r5
  403caa:	2a00      	cmp	r2, #0
  403cac:	f041 8223 	bne.w	4050f6 <_svfprintf_r+0x165a>
  403cb0:	9a07      	ldr	r2, [sp, #28]
  403cb2:	f012 0320 	ands.w	r3, r2, #32
  403cb6:	f000 822e 	beq.w	404116 <_svfprintf_r+0x67a>
  403cba:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403cbc:	3707      	adds	r7, #7
  403cbe:	f027 0307 	bic.w	r3, r7, #7
  403cc2:	2700      	movs	r7, #0
  403cc4:	f103 0108 	add.w	r1, r3, #8
  403cc8:	45bb      	cmp	fp, r7
  403cca:	910e      	str	r1, [sp, #56]	; 0x38
  403ccc:	e9d3 4500 	ldrd	r4, r5, [r3]
  403cd0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  403cd4:	f2c0 8752 	blt.w	404b7c <_svfprintf_r+0x10e0>
  403cd8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  403cdc:	9307      	str	r3, [sp, #28]
  403cde:	ea54 0305 	orrs.w	r3, r4, r5
  403ce2:	f000 8375 	beq.w	4043d0 <_svfprintf_r+0x934>
  403ce6:	ae30      	add	r6, sp, #192	; 0xc0
  403ce8:	08e2      	lsrs	r2, r4, #3
  403cea:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  403cee:	08e9      	lsrs	r1, r5, #3
  403cf0:	f004 0307 	and.w	r3, r4, #7
  403cf4:	460d      	mov	r5, r1
  403cf6:	4614      	mov	r4, r2
  403cf8:	3330      	adds	r3, #48	; 0x30
  403cfa:	ea54 0205 	orrs.w	r2, r4, r5
  403cfe:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403d02:	d1f1      	bne.n	403ce8 <_svfprintf_r+0x24c>
  403d04:	9a07      	ldr	r2, [sp, #28]
  403d06:	07d1      	lsls	r1, r2, #31
  403d08:	f140 8084 	bpl.w	403e14 <_svfprintf_r+0x378>
  403d0c:	2b30      	cmp	r3, #48	; 0x30
  403d0e:	f000 8081 	beq.w	403e14 <_svfprintf_r+0x378>
  403d12:	2230      	movs	r2, #48	; 0x30
  403d14:	1e73      	subs	r3, r6, #1
  403d16:	f806 2c01 	strb.w	r2, [r6, #-1]
  403d1a:	aa30      	add	r2, sp, #192	; 0xc0
  403d1c:	1ad2      	subs	r2, r2, r3
  403d1e:	920d      	str	r2, [sp, #52]	; 0x34
  403d20:	461e      	mov	r6, r3
  403d22:	e07a      	b.n	403e1a <_svfprintf_r+0x37e>
  403d24:	f898 3000 	ldrb.w	r3, [r8]
  403d28:	2b2a      	cmp	r3, #42	; 0x2a
  403d2a:	f108 0401 	add.w	r4, r8, #1
  403d2e:	f001 81b1 	beq.w	405094 <_svfprintf_r+0x15f8>
  403d32:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403d36:	2809      	cmp	r0, #9
  403d38:	bf98      	it	ls
  403d3a:	2500      	movls	r5, #0
  403d3c:	f201 8164 	bhi.w	405008 <_svfprintf_r+0x156c>
  403d40:	f814 3b01 	ldrb.w	r3, [r4], #1
  403d44:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  403d48:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  403d4c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403d50:	2809      	cmp	r0, #9
  403d52:	d9f5      	bls.n	403d40 <_svfprintf_r+0x2a4>
  403d54:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  403d58:	46a0      	mov	r8, r4
  403d5a:	e6fa      	b.n	403b52 <_svfprintf_r+0xb6>
  403d5c:	9b07      	ldr	r3, [sp, #28]
  403d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403d62:	9307      	str	r3, [sp, #28]
  403d64:	f898 3000 	ldrb.w	r3, [r8]
  403d68:	e6f1      	b.n	403b4e <_svfprintf_r+0xb2>
  403d6a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403d6e:	2300      	movs	r3, #0
  403d70:	461c      	mov	r4, r3
  403d72:	f818 3b01 	ldrb.w	r3, [r8], #1
  403d76:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403d7a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403d7e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403d82:	2809      	cmp	r0, #9
  403d84:	d9f5      	bls.n	403d72 <_svfprintf_r+0x2d6>
  403d86:	940c      	str	r4, [sp, #48]	; 0x30
  403d88:	e6e3      	b.n	403b52 <_svfprintf_r+0xb6>
  403d8a:	9311      	str	r3, [sp, #68]	; 0x44
  403d8c:	46ab      	mov	fp, r5
  403d8e:	2a00      	cmp	r2, #0
  403d90:	f041 81c9 	bne.w	405126 <_svfprintf_r+0x168a>
  403d94:	9b07      	ldr	r3, [sp, #28]
  403d96:	f043 0310 	orr.w	r3, r3, #16
  403d9a:	9307      	str	r3, [sp, #28]
  403d9c:	9b07      	ldr	r3, [sp, #28]
  403d9e:	0698      	lsls	r0, r3, #26
  403da0:	f140 8530 	bpl.w	404804 <_svfprintf_r+0xd68>
  403da4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  403da6:	3707      	adds	r7, #7
  403da8:	f027 0707 	bic.w	r7, r7, #7
  403dac:	e9d7 2300 	ldrd	r2, r3, [r7]
  403db0:	f107 0108 	add.w	r1, r7, #8
  403db4:	910e      	str	r1, [sp, #56]	; 0x38
  403db6:	4614      	mov	r4, r2
  403db8:	461d      	mov	r5, r3
  403dba:	2a00      	cmp	r2, #0
  403dbc:	f173 0300 	sbcs.w	r3, r3, #0
  403dc0:	f2c0 855b 	blt.w	40487a <_svfprintf_r+0xdde>
  403dc4:	f1bb 0f00 	cmp.w	fp, #0
  403dc8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403dcc:	f2c0 8538 	blt.w	404840 <_svfprintf_r+0xda4>
  403dd0:	9b07      	ldr	r3, [sp, #28]
  403dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403dd6:	9307      	str	r3, [sp, #28]
  403dd8:	ea54 0305 	orrs.w	r3, r4, r5
  403ddc:	f000 81db 	beq.w	404196 <_svfprintf_r+0x6fa>
  403de0:	2d00      	cmp	r5, #0
  403de2:	bf08      	it	eq
  403de4:	2c0a      	cmpeq	r4, #10
  403de6:	f0c0 81db 	bcc.w	4041a0 <_svfprintf_r+0x704>
  403dea:	ae30      	add	r6, sp, #192	; 0xc0
  403dec:	4620      	mov	r0, r4
  403dee:	4629      	mov	r1, r5
  403df0:	220a      	movs	r2, #10
  403df2:	2300      	movs	r3, #0
  403df4:	f005 fb2e 	bl	409454 <__aeabi_uldivmod>
  403df8:	3230      	adds	r2, #48	; 0x30
  403dfa:	f806 2d01 	strb.w	r2, [r6, #-1]!
  403dfe:	4620      	mov	r0, r4
  403e00:	4629      	mov	r1, r5
  403e02:	2300      	movs	r3, #0
  403e04:	220a      	movs	r2, #10
  403e06:	f005 fb25 	bl	409454 <__aeabi_uldivmod>
  403e0a:	4604      	mov	r4, r0
  403e0c:	460d      	mov	r5, r1
  403e0e:	ea54 0305 	orrs.w	r3, r4, r5
  403e12:	d1eb      	bne.n	403dec <_svfprintf_r+0x350>
  403e14:	ab30      	add	r3, sp, #192	; 0xc0
  403e16:	1b9b      	subs	r3, r3, r6
  403e18:	930d      	str	r3, [sp, #52]	; 0x34
  403e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403e1c:	455b      	cmp	r3, fp
  403e1e:	bfb8      	it	lt
  403e20:	465b      	movlt	r3, fp
  403e22:	9308      	str	r3, [sp, #32]
  403e24:	2300      	movs	r3, #0
  403e26:	9313      	str	r3, [sp, #76]	; 0x4c
  403e28:	b117      	cbz	r7, 403e30 <_svfprintf_r+0x394>
  403e2a:	9b08      	ldr	r3, [sp, #32]
  403e2c:	3301      	adds	r3, #1
  403e2e:	9308      	str	r3, [sp, #32]
  403e30:	9b07      	ldr	r3, [sp, #28]
  403e32:	f013 0302 	ands.w	r3, r3, #2
  403e36:	930f      	str	r3, [sp, #60]	; 0x3c
  403e38:	d002      	beq.n	403e40 <_svfprintf_r+0x3a4>
  403e3a:	9b08      	ldr	r3, [sp, #32]
  403e3c:	3302      	adds	r3, #2
  403e3e:	9308      	str	r3, [sp, #32]
  403e40:	9b07      	ldr	r3, [sp, #28]
  403e42:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403e46:	9310      	str	r3, [sp, #64]	; 0x40
  403e48:	f040 82d7 	bne.w	4043fa <_svfprintf_r+0x95e>
  403e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403e4e:	9a08      	ldr	r2, [sp, #32]
  403e50:	1a9d      	subs	r5, r3, r2
  403e52:	2d00      	cmp	r5, #0
  403e54:	f340 82d1 	ble.w	4043fa <_svfprintf_r+0x95e>
  403e58:	2d10      	cmp	r5, #16
  403e5a:	9925      	ldr	r1, [sp, #148]	; 0x94
  403e5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403e5e:	4f37      	ldr	r7, [pc, #220]	; (403f3c <_svfprintf_r+0x4a0>)
  403e60:	dd27      	ble.n	403eb2 <_svfprintf_r+0x416>
  403e62:	9618      	str	r6, [sp, #96]	; 0x60
  403e64:	4648      	mov	r0, r9
  403e66:	2410      	movs	r4, #16
  403e68:	46b9      	mov	r9, r7
  403e6a:	9e09      	ldr	r6, [sp, #36]	; 0x24
  403e6c:	462f      	mov	r7, r5
  403e6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403e70:	e004      	b.n	403e7c <_svfprintf_r+0x3e0>
  403e72:	3f10      	subs	r7, #16
  403e74:	2f10      	cmp	r7, #16
  403e76:	f100 0008 	add.w	r0, r0, #8
  403e7a:	dd16      	ble.n	403eaa <_svfprintf_r+0x40e>
  403e7c:	3201      	adds	r2, #1
  403e7e:	4b2f      	ldr	r3, [pc, #188]	; (403f3c <_svfprintf_r+0x4a0>)
  403e80:	9224      	str	r2, [sp, #144]	; 0x90
  403e82:	3110      	adds	r1, #16
  403e84:	2a07      	cmp	r2, #7
  403e86:	9125      	str	r1, [sp, #148]	; 0x94
  403e88:	e880 0018 	stmia.w	r0, {r3, r4}
  403e8c:	ddf1      	ble.n	403e72 <_svfprintf_r+0x3d6>
  403e8e:	aa23      	add	r2, sp, #140	; 0x8c
  403e90:	4631      	mov	r1, r6
  403e92:	4628      	mov	r0, r5
  403e94:	f004 fc02 	bl	40869c <__ssprint_r>
  403e98:	2800      	cmp	r0, #0
  403e9a:	f47f aef8 	bne.w	403c8e <_svfprintf_r+0x1f2>
  403e9e:	3f10      	subs	r7, #16
  403ea0:	2f10      	cmp	r7, #16
  403ea2:	9925      	ldr	r1, [sp, #148]	; 0x94
  403ea4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403ea6:	a830      	add	r0, sp, #192	; 0xc0
  403ea8:	dce8      	bgt.n	403e7c <_svfprintf_r+0x3e0>
  403eaa:	9e18      	ldr	r6, [sp, #96]	; 0x60
  403eac:	463d      	mov	r5, r7
  403eae:	464f      	mov	r7, r9
  403eb0:	4681      	mov	r9, r0
  403eb2:	3201      	adds	r2, #1
  403eb4:	186c      	adds	r4, r5, r1
  403eb6:	2a07      	cmp	r2, #7
  403eb8:	9425      	str	r4, [sp, #148]	; 0x94
  403eba:	9224      	str	r2, [sp, #144]	; 0x90
  403ebc:	f8c9 7000 	str.w	r7, [r9]
  403ec0:	f8c9 5004 	str.w	r5, [r9, #4]
  403ec4:	f300 8428 	bgt.w	404718 <_svfprintf_r+0xc7c>
  403ec8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  403ecc:	f109 0908 	add.w	r9, r9, #8
  403ed0:	b177      	cbz	r7, 403ef0 <_svfprintf_r+0x454>
  403ed2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ed4:	3301      	adds	r3, #1
  403ed6:	3401      	adds	r4, #1
  403ed8:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  403edc:	2201      	movs	r2, #1
  403ede:	2b07      	cmp	r3, #7
  403ee0:	9425      	str	r4, [sp, #148]	; 0x94
  403ee2:	9324      	str	r3, [sp, #144]	; 0x90
  403ee4:	e889 0006 	stmia.w	r9, {r1, r2}
  403ee8:	f300 83a0 	bgt.w	40462c <_svfprintf_r+0xb90>
  403eec:	f109 0908 	add.w	r9, r9, #8
  403ef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403ef2:	b16b      	cbz	r3, 403f10 <_svfprintf_r+0x474>
  403ef4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403ef6:	3301      	adds	r3, #1
  403ef8:	3402      	adds	r4, #2
  403efa:	a91c      	add	r1, sp, #112	; 0x70
  403efc:	2202      	movs	r2, #2
  403efe:	2b07      	cmp	r3, #7
  403f00:	9425      	str	r4, [sp, #148]	; 0x94
  403f02:	9324      	str	r3, [sp, #144]	; 0x90
  403f04:	e889 0006 	stmia.w	r9, {r1, r2}
  403f08:	f300 839c 	bgt.w	404644 <_svfprintf_r+0xba8>
  403f0c:	f109 0908 	add.w	r9, r9, #8
  403f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403f12:	2b80      	cmp	r3, #128	; 0x80
  403f14:	f000 82d5 	beq.w	4044c2 <_svfprintf_r+0xa26>
  403f18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f1a:	ebc3 070b 	rsb	r7, r3, fp
  403f1e:	2f00      	cmp	r7, #0
  403f20:	dd39      	ble.n	403f96 <_svfprintf_r+0x4fa>
  403f22:	4a07      	ldr	r2, [pc, #28]	; (403f40 <_svfprintf_r+0x4a4>)
  403f24:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f26:	920f      	str	r2, [sp, #60]	; 0x3c
  403f28:	2f10      	cmp	r7, #16
  403f2a:	dd28      	ble.n	403f7e <_svfprintf_r+0x4e2>
  403f2c:	4622      	mov	r2, r4
  403f2e:	f04f 0b10 	mov.w	fp, #16
  403f32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  403f34:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403f36:	e00a      	b.n	403f4e <_svfprintf_r+0x4b2>
  403f38:	004098e8 	.word	0x004098e8
  403f3c:	00409908 	.word	0x00409908
  403f40:	004098b4 	.word	0x004098b4
  403f44:	3f10      	subs	r7, #16
  403f46:	2f10      	cmp	r7, #16
  403f48:	f109 0908 	add.w	r9, r9, #8
  403f4c:	dd16      	ble.n	403f7c <_svfprintf_r+0x4e0>
  403f4e:	3301      	adds	r3, #1
  403f50:	3210      	adds	r2, #16
  403f52:	2b07      	cmp	r3, #7
  403f54:	9225      	str	r2, [sp, #148]	; 0x94
  403f56:	9324      	str	r3, [sp, #144]	; 0x90
  403f58:	e889 0c00 	stmia.w	r9, {sl, fp}
  403f5c:	ddf2      	ble.n	403f44 <_svfprintf_r+0x4a8>
  403f5e:	aa23      	add	r2, sp, #140	; 0x8c
  403f60:	4621      	mov	r1, r4
  403f62:	4628      	mov	r0, r5
  403f64:	f004 fb9a 	bl	40869c <__ssprint_r>
  403f68:	2800      	cmp	r0, #0
  403f6a:	f47f ae90 	bne.w	403c8e <_svfprintf_r+0x1f2>
  403f6e:	3f10      	subs	r7, #16
  403f70:	2f10      	cmp	r7, #16
  403f72:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403f74:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f76:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  403f7a:	dce8      	bgt.n	403f4e <_svfprintf_r+0x4b2>
  403f7c:	4614      	mov	r4, r2
  403f7e:	3301      	adds	r3, #1
  403f80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403f82:	9324      	str	r3, [sp, #144]	; 0x90
  403f84:	443c      	add	r4, r7
  403f86:	2b07      	cmp	r3, #7
  403f88:	9425      	str	r4, [sp, #148]	; 0x94
  403f8a:	e889 0084 	stmia.w	r9, {r2, r7}
  403f8e:	f300 8341 	bgt.w	404614 <_svfprintf_r+0xb78>
  403f92:	f109 0908 	add.w	r9, r9, #8
  403f96:	9b07      	ldr	r3, [sp, #28]
  403f98:	05da      	lsls	r2, r3, #23
  403f9a:	f100 8230 	bmi.w	4043fe <_svfprintf_r+0x962>
  403f9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fa0:	990d      	ldr	r1, [sp, #52]	; 0x34
  403fa2:	f8c9 6000 	str.w	r6, [r9]
  403fa6:	3301      	adds	r3, #1
  403fa8:	440c      	add	r4, r1
  403faa:	2b07      	cmp	r3, #7
  403fac:	9425      	str	r4, [sp, #148]	; 0x94
  403fae:	f8c9 1004 	str.w	r1, [r9, #4]
  403fb2:	9324      	str	r3, [sp, #144]	; 0x90
  403fb4:	f300 8318 	bgt.w	4045e8 <_svfprintf_r+0xb4c>
  403fb8:	f109 0908 	add.w	r9, r9, #8
  403fbc:	9b07      	ldr	r3, [sp, #28]
  403fbe:	0759      	lsls	r1, r3, #29
  403fc0:	d53f      	bpl.n	404042 <_svfprintf_r+0x5a6>
  403fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403fc4:	9a08      	ldr	r2, [sp, #32]
  403fc6:	1a9d      	subs	r5, r3, r2
  403fc8:	2d00      	cmp	r5, #0
  403fca:	dd3a      	ble.n	404042 <_svfprintf_r+0x5a6>
  403fcc:	2d10      	cmp	r5, #16
  403fce:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403fd0:	4fbc      	ldr	r7, [pc, #752]	; (4042c4 <_svfprintf_r+0x828>)
  403fd2:	dd23      	ble.n	40401c <_svfprintf_r+0x580>
  403fd4:	4622      	mov	r2, r4
  403fd6:	2610      	movs	r6, #16
  403fd8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  403fdc:	9c09      	ldr	r4, [sp, #36]	; 0x24
  403fde:	e004      	b.n	403fea <_svfprintf_r+0x54e>
  403fe0:	3d10      	subs	r5, #16
  403fe2:	2d10      	cmp	r5, #16
  403fe4:	f109 0908 	add.w	r9, r9, #8
  403fe8:	dd17      	ble.n	40401a <_svfprintf_r+0x57e>
  403fea:	3301      	adds	r3, #1
  403fec:	49b5      	ldr	r1, [pc, #724]	; (4042c4 <_svfprintf_r+0x828>)
  403fee:	9324      	str	r3, [sp, #144]	; 0x90
  403ff0:	3210      	adds	r2, #16
  403ff2:	2b07      	cmp	r3, #7
  403ff4:	9225      	str	r2, [sp, #148]	; 0x94
  403ff6:	e889 0042 	stmia.w	r9, {r1, r6}
  403ffa:	ddf1      	ble.n	403fe0 <_svfprintf_r+0x544>
  403ffc:	aa23      	add	r2, sp, #140	; 0x8c
  403ffe:	4621      	mov	r1, r4
  404000:	4658      	mov	r0, fp
  404002:	f004 fb4b 	bl	40869c <__ssprint_r>
  404006:	2800      	cmp	r0, #0
  404008:	f47f ae41 	bne.w	403c8e <_svfprintf_r+0x1f2>
  40400c:	3d10      	subs	r5, #16
  40400e:	2d10      	cmp	r5, #16
  404010:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404012:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404014:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404018:	dce7      	bgt.n	403fea <_svfprintf_r+0x54e>
  40401a:	4614      	mov	r4, r2
  40401c:	3301      	adds	r3, #1
  40401e:	442c      	add	r4, r5
  404020:	2b07      	cmp	r3, #7
  404022:	9425      	str	r4, [sp, #148]	; 0x94
  404024:	9324      	str	r3, [sp, #144]	; 0x90
  404026:	f8c9 7000 	str.w	r7, [r9]
  40402a:	f8c9 5004 	str.w	r5, [r9, #4]
  40402e:	dd08      	ble.n	404042 <_svfprintf_r+0x5a6>
  404030:	aa23      	add	r2, sp, #140	; 0x8c
  404032:	9909      	ldr	r1, [sp, #36]	; 0x24
  404034:	980a      	ldr	r0, [sp, #40]	; 0x28
  404036:	f004 fb31 	bl	40869c <__ssprint_r>
  40403a:	2800      	cmp	r0, #0
  40403c:	f47f ae27 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404040:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404046:	9908      	ldr	r1, [sp, #32]
  404048:	428a      	cmp	r2, r1
  40404a:	bfac      	ite	ge
  40404c:	189b      	addge	r3, r3, r2
  40404e:	185b      	addlt	r3, r3, r1
  404050:	930b      	str	r3, [sp, #44]	; 0x2c
  404052:	2c00      	cmp	r4, #0
  404054:	f040 82d4 	bne.w	404600 <_svfprintf_r+0xb64>
  404058:	2300      	movs	r3, #0
  40405a:	9324      	str	r3, [sp, #144]	; 0x90
  40405c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404060:	e542      	b.n	403ae8 <_svfprintf_r+0x4c>
  404062:	9311      	str	r3, [sp, #68]	; 0x44
  404064:	46ab      	mov	fp, r5
  404066:	2a00      	cmp	r2, #0
  404068:	f041 8059 	bne.w	40511e <_svfprintf_r+0x1682>
  40406c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40406e:	3707      	adds	r7, #7
  404070:	f027 0307 	bic.w	r3, r7, #7
  404074:	f103 0208 	add.w	r2, r3, #8
  404078:	920e      	str	r2, [sp, #56]	; 0x38
  40407a:	681a      	ldr	r2, [r3, #0]
  40407c:	9214      	str	r2, [sp, #80]	; 0x50
  40407e:	685b      	ldr	r3, [r3, #4]
  404080:	9315      	str	r3, [sp, #84]	; 0x54
  404082:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404084:	9d14      	ldr	r5, [sp, #80]	; 0x50
  404086:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40408a:	4628      	mov	r0, r5
  40408c:	4621      	mov	r1, r4
  40408e:	f04f 32ff 	mov.w	r2, #4294967295
  404092:	4b8d      	ldr	r3, [pc, #564]	; (4042c8 <_svfprintf_r+0x82c>)
  404094:	f005 f9a0 	bl	4093d8 <__aeabi_dcmpun>
  404098:	2800      	cmp	r0, #0
  40409a:	f040 84c1 	bne.w	404a20 <_svfprintf_r+0xf84>
  40409e:	4628      	mov	r0, r5
  4040a0:	4621      	mov	r1, r4
  4040a2:	f04f 32ff 	mov.w	r2, #4294967295
  4040a6:	4b88      	ldr	r3, [pc, #544]	; (4042c8 <_svfprintf_r+0x82c>)
  4040a8:	f005 f978 	bl	40939c <__aeabi_dcmple>
  4040ac:	2800      	cmp	r0, #0
  4040ae:	f040 84b7 	bne.w	404a20 <_svfprintf_r+0xf84>
  4040b2:	9814      	ldr	r0, [sp, #80]	; 0x50
  4040b4:	9915      	ldr	r1, [sp, #84]	; 0x54
  4040b6:	2200      	movs	r2, #0
  4040b8:	2300      	movs	r3, #0
  4040ba:	f005 f965 	bl	409388 <__aeabi_dcmplt>
  4040be:	2800      	cmp	r0, #0
  4040c0:	f040 874b 	bne.w	404f5a <_svfprintf_r+0x14be>
  4040c4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4040c8:	4e80      	ldr	r6, [pc, #512]	; (4042cc <_svfprintf_r+0x830>)
  4040ca:	4b81      	ldr	r3, [pc, #516]	; (4042d0 <_svfprintf_r+0x834>)
  4040cc:	9907      	ldr	r1, [sp, #28]
  4040ce:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  4040d2:	9107      	str	r1, [sp, #28]
  4040d4:	9911      	ldr	r1, [sp, #68]	; 0x44
  4040d6:	2203      	movs	r2, #3
  4040d8:	f04f 0b00 	mov.w	fp, #0
  4040dc:	9208      	str	r2, [sp, #32]
  4040de:	2947      	cmp	r1, #71	; 0x47
  4040e0:	bfd8      	it	le
  4040e2:	461e      	movle	r6, r3
  4040e4:	920d      	str	r2, [sp, #52]	; 0x34
  4040e6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  4040ea:	e69d      	b.n	403e28 <_svfprintf_r+0x38c>
  4040ec:	9b07      	ldr	r3, [sp, #28]
  4040ee:	f043 0308 	orr.w	r3, r3, #8
  4040f2:	9307      	str	r3, [sp, #28]
  4040f4:	f898 3000 	ldrb.w	r3, [r8]
  4040f8:	e529      	b.n	403b4e <_svfprintf_r+0xb2>
  4040fa:	9311      	str	r3, [sp, #68]	; 0x44
  4040fc:	46ab      	mov	fp, r5
  4040fe:	2a00      	cmp	r2, #0
  404100:	f041 8009 	bne.w	405116 <_svfprintf_r+0x167a>
  404104:	9b07      	ldr	r3, [sp, #28]
  404106:	f043 0310 	orr.w	r3, r3, #16
  40410a:	9307      	str	r3, [sp, #28]
  40410c:	9a07      	ldr	r2, [sp, #28]
  40410e:	f012 0320 	ands.w	r3, r2, #32
  404112:	f47f add2 	bne.w	403cba <_svfprintf_r+0x21e>
  404116:	9907      	ldr	r1, [sp, #28]
  404118:	f011 0210 	ands.w	r2, r1, #16
  40411c:	f000 8507 	beq.w	404b2e <_svfprintf_r+0x1092>
  404120:	980e      	ldr	r0, [sp, #56]	; 0x38
  404122:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404126:	f1bb 0f00 	cmp.w	fp, #0
  40412a:	6804      	ldr	r4, [r0, #0]
  40412c:	f100 0704 	add.w	r7, r0, #4
  404130:	f04f 0500 	mov.w	r5, #0
  404134:	f2c0 8521 	blt.w	404b7a <_svfprintf_r+0x10de>
  404138:	460a      	mov	r2, r1
  40413a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40413e:	9207      	str	r2, [sp, #28]
  404140:	ea54 0205 	orrs.w	r2, r4, r5
  404144:	970e      	str	r7, [sp, #56]	; 0x38
  404146:	f000 8143 	beq.w	4043d0 <_svfprintf_r+0x934>
  40414a:	461f      	mov	r7, r3
  40414c:	e5cb      	b.n	403ce6 <_svfprintf_r+0x24a>
  40414e:	9311      	str	r3, [sp, #68]	; 0x44
  404150:	46ab      	mov	fp, r5
  404152:	2a00      	cmp	r2, #0
  404154:	f040 87d7 	bne.w	405106 <_svfprintf_r+0x166a>
  404158:	9b07      	ldr	r3, [sp, #28]
  40415a:	f043 0310 	orr.w	r3, r3, #16
  40415e:	9307      	str	r3, [sp, #28]
  404160:	9a07      	ldr	r2, [sp, #28]
  404162:	f012 0320 	ands.w	r3, r2, #32
  404166:	f000 8332 	beq.w	4047ce <_svfprintf_r+0xd32>
  40416a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40416c:	3707      	adds	r7, #7
  40416e:	f027 0307 	bic.w	r3, r7, #7
  404172:	2700      	movs	r7, #0
  404174:	f103 0108 	add.w	r1, r3, #8
  404178:	45bb      	cmp	fp, r7
  40417a:	910e      	str	r1, [sp, #56]	; 0x38
  40417c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404180:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404184:	f2c0 835c 	blt.w	404840 <_svfprintf_r+0xda4>
  404188:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40418c:	9307      	str	r3, [sp, #28]
  40418e:	ea54 0305 	orrs.w	r3, r4, r5
  404192:	f47f ae25 	bne.w	403de0 <_svfprintf_r+0x344>
  404196:	f1bb 0f00 	cmp.w	fp, #0
  40419a:	f000 80fe 	beq.w	40439a <_svfprintf_r+0x8fe>
  40419e:	2400      	movs	r4, #0
  4041a0:	ae40      	add	r6, sp, #256	; 0x100
  4041a2:	3430      	adds	r4, #48	; 0x30
  4041a4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4041a8:	e634      	b.n	403e14 <_svfprintf_r+0x378>
  4041aa:	9311      	str	r3, [sp, #68]	; 0x44
  4041ac:	46ab      	mov	fp, r5
  4041ae:	2a00      	cmp	r2, #0
  4041b0:	f040 87a5 	bne.w	4050fe <_svfprintf_r+0x1662>
  4041b4:	9b07      	ldr	r3, [sp, #28]
  4041b6:	4847      	ldr	r0, [pc, #284]	; (4042d4 <_svfprintf_r+0x838>)
  4041b8:	069d      	lsls	r5, r3, #26
  4041ba:	f140 8097 	bpl.w	4042ec <_svfprintf_r+0x850>
  4041be:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4041c0:	3707      	adds	r7, #7
  4041c2:	f027 0307 	bic.w	r3, r7, #7
  4041c6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4041ca:	f103 0208 	add.w	r2, r3, #8
  4041ce:	920e      	str	r2, [sp, #56]	; 0x38
  4041d0:	9a07      	ldr	r2, [sp, #28]
  4041d2:	f012 0701 	ands.w	r7, r2, #1
  4041d6:	f000 8241 	beq.w	40465c <_svfprintf_r+0xbc0>
  4041da:	ea54 0305 	orrs.w	r3, r4, r5
  4041de:	f000 84f5 	beq.w	404bcc <_svfprintf_r+0x1130>
  4041e2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4041e6:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  4041ea:	2700      	movs	r7, #0
  4041ec:	9a07      	ldr	r2, [sp, #28]
  4041ee:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4041f2:	2330      	movs	r3, #48	; 0x30
  4041f4:	45bb      	cmp	fp, r7
  4041f6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  4041fa:	f042 0302 	orr.w	r3, r2, #2
  4041fe:	f2c0 86a9 	blt.w	404f54 <_svfprintf_r+0x14b8>
  404202:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404206:	f043 0302 	orr.w	r3, r3, #2
  40420a:	9307      	str	r3, [sp, #28]
  40420c:	ae30      	add	r6, sp, #192	; 0xc0
  40420e:	0923      	lsrs	r3, r4, #4
  404210:	f004 010f 	and.w	r1, r4, #15
  404214:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404218:	092a      	lsrs	r2, r5, #4
  40421a:	461c      	mov	r4, r3
  40421c:	4615      	mov	r5, r2
  40421e:	5c43      	ldrb	r3, [r0, r1]
  404220:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404224:	ea54 0305 	orrs.w	r3, r4, r5
  404228:	d1f1      	bne.n	40420e <_svfprintf_r+0x772>
  40422a:	e5f3      	b.n	403e14 <_svfprintf_r+0x378>
  40422c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40422e:	9311      	str	r3, [sp, #68]	; 0x44
  404230:	680a      	ldr	r2, [r1, #0]
  404232:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404236:	2300      	movs	r3, #0
  404238:	460a      	mov	r2, r1
  40423a:	461f      	mov	r7, r3
  40423c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404240:	3204      	adds	r2, #4
  404242:	2301      	movs	r3, #1
  404244:	9308      	str	r3, [sp, #32]
  404246:	46bb      	mov	fp, r7
  404248:	9713      	str	r7, [sp, #76]	; 0x4c
  40424a:	920e      	str	r2, [sp, #56]	; 0x38
  40424c:	930d      	str	r3, [sp, #52]	; 0x34
  40424e:	ae26      	add	r6, sp, #152	; 0x98
  404250:	e5ee      	b.n	403e30 <_svfprintf_r+0x394>
  404252:	9311      	str	r3, [sp, #68]	; 0x44
  404254:	46ab      	mov	fp, r5
  404256:	2a00      	cmp	r2, #0
  404258:	f43f ada0 	beq.w	403d9c <_svfprintf_r+0x300>
  40425c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404260:	e59c      	b.n	403d9c <_svfprintf_r+0x300>
  404262:	9b07      	ldr	r3, [sp, #28]
  404264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404268:	9307      	str	r3, [sp, #28]
  40426a:	f898 3000 	ldrb.w	r3, [r8]
  40426e:	e46e      	b.n	403b4e <_svfprintf_r+0xb2>
  404270:	f898 3000 	ldrb.w	r3, [r8]
  404274:	2900      	cmp	r1, #0
  404276:	f47f ac6a 	bne.w	403b4e <_svfprintf_r+0xb2>
  40427a:	2201      	movs	r2, #1
  40427c:	2120      	movs	r1, #32
  40427e:	e466      	b.n	403b4e <_svfprintf_r+0xb2>
  404280:	9b07      	ldr	r3, [sp, #28]
  404282:	f043 0301 	orr.w	r3, r3, #1
  404286:	9307      	str	r3, [sp, #28]
  404288:	f898 3000 	ldrb.w	r3, [r8]
  40428c:	e45f      	b.n	403b4e <_svfprintf_r+0xb2>
  40428e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  404290:	6823      	ldr	r3, [r4, #0]
  404292:	930c      	str	r3, [sp, #48]	; 0x30
  404294:	4618      	mov	r0, r3
  404296:	2800      	cmp	r0, #0
  404298:	4623      	mov	r3, r4
  40429a:	f103 0304 	add.w	r3, r3, #4
  40429e:	f6ff acb8 	blt.w	403c12 <_svfprintf_r+0x176>
  4042a2:	930e      	str	r3, [sp, #56]	; 0x38
  4042a4:	f898 3000 	ldrb.w	r3, [r8]
  4042a8:	e451      	b.n	403b4e <_svfprintf_r+0xb2>
  4042aa:	f898 3000 	ldrb.w	r3, [r8]
  4042ae:	2201      	movs	r2, #1
  4042b0:	212b      	movs	r1, #43	; 0x2b
  4042b2:	e44c      	b.n	403b4e <_svfprintf_r+0xb2>
  4042b4:	9311      	str	r3, [sp, #68]	; 0x44
  4042b6:	46ab      	mov	fp, r5
  4042b8:	2a00      	cmp	r2, #0
  4042ba:	f43f af51 	beq.w	404160 <_svfprintf_r+0x6c4>
  4042be:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4042c2:	e74d      	b.n	404160 <_svfprintf_r+0x6c4>
  4042c4:	00409908 	.word	0x00409908
  4042c8:	7fefffff 	.word	0x7fefffff
  4042cc:	004098c8 	.word	0x004098c8
  4042d0:	004098c4 	.word	0x004098c4
  4042d4:	004098d4 	.word	0x004098d4
  4042d8:	9311      	str	r3, [sp, #68]	; 0x44
  4042da:	46ab      	mov	fp, r5
  4042dc:	2a00      	cmp	r2, #0
  4042de:	f040 8703 	bne.w	4050e8 <_svfprintf_r+0x164c>
  4042e2:	9b07      	ldr	r3, [sp, #28]
  4042e4:	4899      	ldr	r0, [pc, #612]	; (40454c <_svfprintf_r+0xab0>)
  4042e6:	069d      	lsls	r5, r3, #26
  4042e8:	f53f af69 	bmi.w	4041be <_svfprintf_r+0x722>
  4042ec:	9b07      	ldr	r3, [sp, #28]
  4042ee:	06dc      	lsls	r4, r3, #27
  4042f0:	f140 845e 	bpl.w	404bb0 <_svfprintf_r+0x1114>
  4042f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4042f6:	4613      	mov	r3, r2
  4042f8:	3304      	adds	r3, #4
  4042fa:	6814      	ldr	r4, [r2, #0]
  4042fc:	930e      	str	r3, [sp, #56]	; 0x38
  4042fe:	2500      	movs	r5, #0
  404300:	e766      	b.n	4041d0 <_svfprintf_r+0x734>
  404302:	f898 3000 	ldrb.w	r3, [r8]
  404306:	2b6c      	cmp	r3, #108	; 0x6c
  404308:	f000 84e1 	beq.w	404cce <_svfprintf_r+0x1232>
  40430c:	9807      	ldr	r0, [sp, #28]
  40430e:	f040 0010 	orr.w	r0, r0, #16
  404312:	9007      	str	r0, [sp, #28]
  404314:	e41b      	b.n	403b4e <_svfprintf_r+0xb2>
  404316:	2a00      	cmp	r2, #0
  404318:	f040 86db 	bne.w	4050d2 <_svfprintf_r+0x1636>
  40431c:	9b07      	ldr	r3, [sp, #28]
  40431e:	069b      	lsls	r3, r3, #26
  404320:	f140 842f 	bpl.w	404b82 <_svfprintf_r+0x10e6>
  404324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404326:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404328:	6813      	ldr	r3, [r2, #0]
  40432a:	17cd      	asrs	r5, r1, #31
  40432c:	4608      	mov	r0, r1
  40432e:	3204      	adds	r2, #4
  404330:	4629      	mov	r1, r5
  404332:	920e      	str	r2, [sp, #56]	; 0x38
  404334:	e9c3 0100 	strd	r0, r1, [r3]
  404338:	f7ff bbd6 	b.w	403ae8 <_svfprintf_r+0x4c>
  40433c:	9b07      	ldr	r3, [sp, #28]
  40433e:	f043 0320 	orr.w	r3, r3, #32
  404342:	9307      	str	r3, [sp, #28]
  404344:	f898 3000 	ldrb.w	r3, [r8]
  404348:	e401      	b.n	403b4e <_svfprintf_r+0xb2>
  40434a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40434c:	9311      	str	r3, [sp, #68]	; 0x44
  40434e:	6816      	ldr	r6, [r2, #0]
  404350:	2400      	movs	r4, #0
  404352:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  404356:	1d17      	adds	r7, r2, #4
  404358:	2e00      	cmp	r6, #0
  40435a:	f000 85bd 	beq.w	404ed8 <_svfprintf_r+0x143c>
  40435e:	2d00      	cmp	r5, #0
  404360:	f2c0 850f 	blt.w	404d82 <_svfprintf_r+0x12e6>
  404364:	462a      	mov	r2, r5
  404366:	4621      	mov	r1, r4
  404368:	4630      	mov	r0, r6
  40436a:	f003 fba1 	bl	407ab0 <memchr>
  40436e:	2800      	cmp	r0, #0
  404370:	f000 8604 	beq.w	404f7c <_svfprintf_r+0x14e0>
  404374:	1b83      	subs	r3, r0, r6
  404376:	930d      	str	r3, [sp, #52]	; 0x34
  404378:	46a3      	mov	fp, r4
  40437a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40437e:	970e      	str	r7, [sp, #56]	; 0x38
  404380:	9308      	str	r3, [sp, #32]
  404382:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  404386:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40438a:	e54d      	b.n	403e28 <_svfprintf_r+0x38c>
  40438c:	486f      	ldr	r0, [pc, #444]	; (40454c <_svfprintf_r+0xab0>)
  40438e:	9211      	str	r2, [sp, #68]	; 0x44
  404390:	f1bb 0f00 	cmp.w	fp, #0
  404394:	f040 8173 	bne.w	40467e <_svfprintf_r+0xbe2>
  404398:	465f      	mov	r7, fp
  40439a:	f04f 0b00 	mov.w	fp, #0
  40439e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4043a2:	ae30      	add	r6, sp, #192	; 0xc0
  4043a4:	e539      	b.n	403e1a <_svfprintf_r+0x37e>
  4043a6:	9311      	str	r3, [sp, #68]	; 0x44
  4043a8:	2a00      	cmp	r2, #0
  4043aa:	f040 86b0 	bne.w	40510e <_svfprintf_r+0x1672>
  4043ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4043b0:	2a00      	cmp	r2, #0
  4043b2:	f43f ac65 	beq.w	403c80 <_svfprintf_r+0x1e4>
  4043b6:	2300      	movs	r3, #0
  4043b8:	2101      	movs	r1, #1
  4043ba:	461f      	mov	r7, r3
  4043bc:	9108      	str	r1, [sp, #32]
  4043be:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  4043c2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4043c6:	469b      	mov	fp, r3
  4043c8:	9313      	str	r3, [sp, #76]	; 0x4c
  4043ca:	910d      	str	r1, [sp, #52]	; 0x34
  4043cc:	ae26      	add	r6, sp, #152	; 0x98
  4043ce:	e52f      	b.n	403e30 <_svfprintf_r+0x394>
  4043d0:	f1bb 0f00 	cmp.w	fp, #0
  4043d4:	f000 85dd 	beq.w	404f92 <_svfprintf_r+0x14f6>
  4043d8:	2700      	movs	r7, #0
  4043da:	2400      	movs	r4, #0
  4043dc:	2500      	movs	r5, #0
  4043de:	e482      	b.n	403ce6 <_svfprintf_r+0x24a>
  4043e0:	485a      	ldr	r0, [pc, #360]	; (40454c <_svfprintf_r+0xab0>)
  4043e2:	9307      	str	r3, [sp, #28]
  4043e4:	9211      	str	r2, [sp, #68]	; 0x44
  4043e6:	ea54 0305 	orrs.w	r3, r4, r5
  4043ea:	970e      	str	r7, [sp, #56]	; 0x38
  4043ec:	f04f 0700 	mov.w	r7, #0
  4043f0:	f47f af0c 	bne.w	40420c <_svfprintf_r+0x770>
  4043f4:	2400      	movs	r4, #0
  4043f6:	2500      	movs	r5, #0
  4043f8:	e708      	b.n	40420c <_svfprintf_r+0x770>
  4043fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4043fc:	e568      	b.n	403ed0 <_svfprintf_r+0x434>
  4043fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404400:	2b65      	cmp	r3, #101	; 0x65
  404402:	f340 80a9 	ble.w	404558 <_svfprintf_r+0xabc>
  404406:	9814      	ldr	r0, [sp, #80]	; 0x50
  404408:	9915      	ldr	r1, [sp, #84]	; 0x54
  40440a:	2200      	movs	r2, #0
  40440c:	2300      	movs	r3, #0
  40440e:	f004 ffb1 	bl	409374 <__aeabi_dcmpeq>
  404412:	2800      	cmp	r0, #0
  404414:	f000 8135 	beq.w	404682 <_svfprintf_r+0xbe6>
  404418:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40441a:	4a4d      	ldr	r2, [pc, #308]	; (404550 <_svfprintf_r+0xab4>)
  40441c:	f8c9 2000 	str.w	r2, [r9]
  404420:	3301      	adds	r3, #1
  404422:	3401      	adds	r4, #1
  404424:	2201      	movs	r2, #1
  404426:	2b07      	cmp	r3, #7
  404428:	9425      	str	r4, [sp, #148]	; 0x94
  40442a:	9324      	str	r3, [sp, #144]	; 0x90
  40442c:	f8c9 2004 	str.w	r2, [r9, #4]
  404430:	f300 83e6 	bgt.w	404c00 <_svfprintf_r+0x1164>
  404434:	f109 0908 	add.w	r9, r9, #8
  404438:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40443a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40443c:	4293      	cmp	r3, r2
  40443e:	db03      	blt.n	404448 <_svfprintf_r+0x9ac>
  404440:	9b07      	ldr	r3, [sp, #28]
  404442:	07db      	lsls	r3, r3, #31
  404444:	f57f adba 	bpl.w	403fbc <_svfprintf_r+0x520>
  404448:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40444a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40444c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40444e:	f8c9 2000 	str.w	r2, [r9]
  404452:	3301      	adds	r3, #1
  404454:	440c      	add	r4, r1
  404456:	2b07      	cmp	r3, #7
  404458:	9425      	str	r4, [sp, #148]	; 0x94
  40445a:	f8c9 1004 	str.w	r1, [r9, #4]
  40445e:	9324      	str	r3, [sp, #144]	; 0x90
  404460:	f300 843f 	bgt.w	404ce2 <_svfprintf_r+0x1246>
  404464:	f109 0908 	add.w	r9, r9, #8
  404468:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40446a:	1e5d      	subs	r5, r3, #1
  40446c:	2d00      	cmp	r5, #0
  40446e:	f77f ada5 	ble.w	403fbc <_svfprintf_r+0x520>
  404472:	4a38      	ldr	r2, [pc, #224]	; (404554 <_svfprintf_r+0xab8>)
  404474:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404476:	920f      	str	r2, [sp, #60]	; 0x3c
  404478:	2d10      	cmp	r5, #16
  40447a:	f340 81e6 	ble.w	40484a <_svfprintf_r+0xdae>
  40447e:	2610      	movs	r6, #16
  404480:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404482:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404486:	e005      	b.n	404494 <_svfprintf_r+0x9f8>
  404488:	f109 0908 	add.w	r9, r9, #8
  40448c:	3d10      	subs	r5, #16
  40448e:	2d10      	cmp	r5, #16
  404490:	f340 81db 	ble.w	40484a <_svfprintf_r+0xdae>
  404494:	3301      	adds	r3, #1
  404496:	3410      	adds	r4, #16
  404498:	2b07      	cmp	r3, #7
  40449a:	9425      	str	r4, [sp, #148]	; 0x94
  40449c:	9324      	str	r3, [sp, #144]	; 0x90
  40449e:	f8c9 a000 	str.w	sl, [r9]
  4044a2:	f8c9 6004 	str.w	r6, [r9, #4]
  4044a6:	ddef      	ble.n	404488 <_svfprintf_r+0x9ec>
  4044a8:	aa23      	add	r2, sp, #140	; 0x8c
  4044aa:	4659      	mov	r1, fp
  4044ac:	4638      	mov	r0, r7
  4044ae:	f004 f8f5 	bl	40869c <__ssprint_r>
  4044b2:	2800      	cmp	r0, #0
  4044b4:	f47f abeb 	bne.w	403c8e <_svfprintf_r+0x1f2>
  4044b8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4044ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044bc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4044c0:	e7e4      	b.n	40448c <_svfprintf_r+0x9f0>
  4044c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4044c4:	9a08      	ldr	r2, [sp, #32]
  4044c6:	1a9f      	subs	r7, r3, r2
  4044c8:	2f00      	cmp	r7, #0
  4044ca:	f77f ad25 	ble.w	403f18 <_svfprintf_r+0x47c>
  4044ce:	4a21      	ldr	r2, [pc, #132]	; (404554 <_svfprintf_r+0xab8>)
  4044d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044d2:	920f      	str	r2, [sp, #60]	; 0x3c
  4044d4:	2f10      	cmp	r7, #16
  4044d6:	dd2b      	ble.n	404530 <_svfprintf_r+0xa94>
  4044d8:	464a      	mov	r2, r9
  4044da:	4621      	mov	r1, r4
  4044dc:	46b9      	mov	r9, r7
  4044de:	2510      	movs	r5, #16
  4044e0:	4637      	mov	r7, r6
  4044e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4044e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4044e6:	e006      	b.n	4044f6 <_svfprintf_r+0xa5a>
  4044e8:	f1a9 0910 	sub.w	r9, r9, #16
  4044ec:	f1b9 0f10 	cmp.w	r9, #16
  4044f0:	f102 0208 	add.w	r2, r2, #8
  4044f4:	dd18      	ble.n	404528 <_svfprintf_r+0xa8c>
  4044f6:	3301      	adds	r3, #1
  4044f8:	3110      	adds	r1, #16
  4044fa:	2b07      	cmp	r3, #7
  4044fc:	9125      	str	r1, [sp, #148]	; 0x94
  4044fe:	9324      	str	r3, [sp, #144]	; 0x90
  404500:	f8c2 a000 	str.w	sl, [r2]
  404504:	6055      	str	r5, [r2, #4]
  404506:	ddef      	ble.n	4044e8 <_svfprintf_r+0xa4c>
  404508:	aa23      	add	r2, sp, #140	; 0x8c
  40450a:	4631      	mov	r1, r6
  40450c:	4620      	mov	r0, r4
  40450e:	f004 f8c5 	bl	40869c <__ssprint_r>
  404512:	2800      	cmp	r0, #0
  404514:	f47f abbb 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404518:	f1a9 0910 	sub.w	r9, r9, #16
  40451c:	f1b9 0f10 	cmp.w	r9, #16
  404520:	9925      	ldr	r1, [sp, #148]	; 0x94
  404522:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404524:	aa30      	add	r2, sp, #192	; 0xc0
  404526:	dce6      	bgt.n	4044f6 <_svfprintf_r+0xa5a>
  404528:	463e      	mov	r6, r7
  40452a:	460c      	mov	r4, r1
  40452c:	464f      	mov	r7, r9
  40452e:	4691      	mov	r9, r2
  404530:	3301      	adds	r3, #1
  404532:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404534:	9324      	str	r3, [sp, #144]	; 0x90
  404536:	443c      	add	r4, r7
  404538:	2b07      	cmp	r3, #7
  40453a:	9425      	str	r4, [sp, #148]	; 0x94
  40453c:	e889 0084 	stmia.w	r9, {r2, r7}
  404540:	f300 8245 	bgt.w	4049ce <_svfprintf_r+0xf32>
  404544:	f109 0908 	add.w	r9, r9, #8
  404548:	e4e6      	b.n	403f18 <_svfprintf_r+0x47c>
  40454a:	bf00      	nop
  40454c:	004098e8 	.word	0x004098e8
  404550:	00409904 	.word	0x00409904
  404554:	004098b4 	.word	0x004098b4
  404558:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40455a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  40455c:	2b01      	cmp	r3, #1
  40455e:	f340 8208 	ble.w	404972 <_svfprintf_r+0xed6>
  404562:	3501      	adds	r5, #1
  404564:	3401      	adds	r4, #1
  404566:	2301      	movs	r3, #1
  404568:	2d07      	cmp	r5, #7
  40456a:	9425      	str	r4, [sp, #148]	; 0x94
  40456c:	9524      	str	r5, [sp, #144]	; 0x90
  40456e:	f8c9 6000 	str.w	r6, [r9]
  404572:	f8c9 3004 	str.w	r3, [r9, #4]
  404576:	f300 820d 	bgt.w	404994 <_svfprintf_r+0xef8>
  40457a:	f109 0908 	add.w	r9, r9, #8
  40457e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404580:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404582:	f8c9 3000 	str.w	r3, [r9]
  404586:	3501      	adds	r5, #1
  404588:	4414      	add	r4, r2
  40458a:	2d07      	cmp	r5, #7
  40458c:	9425      	str	r4, [sp, #148]	; 0x94
  40458e:	9524      	str	r5, [sp, #144]	; 0x90
  404590:	f8c9 2004 	str.w	r2, [r9, #4]
  404594:	f300 820e 	bgt.w	4049b4 <_svfprintf_r+0xf18>
  404598:	f109 0908 	add.w	r9, r9, #8
  40459c:	2300      	movs	r3, #0
  40459e:	9814      	ldr	r0, [sp, #80]	; 0x50
  4045a0:	9915      	ldr	r1, [sp, #84]	; 0x54
  4045a2:	2200      	movs	r2, #0
  4045a4:	f004 fee6 	bl	409374 <__aeabi_dcmpeq>
  4045a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4045aa:	2800      	cmp	r0, #0
  4045ac:	f040 80c3 	bne.w	404736 <_svfprintf_r+0xc9a>
  4045b0:	3b01      	subs	r3, #1
  4045b2:	3501      	adds	r5, #1
  4045b4:	3601      	adds	r6, #1
  4045b6:	441c      	add	r4, r3
  4045b8:	2d07      	cmp	r5, #7
  4045ba:	9524      	str	r5, [sp, #144]	; 0x90
  4045bc:	9425      	str	r4, [sp, #148]	; 0x94
  4045be:	f8c9 6000 	str.w	r6, [r9]
  4045c2:	f8c9 3004 	str.w	r3, [r9, #4]
  4045c6:	f300 80f5 	bgt.w	4047b4 <_svfprintf_r+0xd18>
  4045ca:	f109 0908 	add.w	r9, r9, #8
  4045ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4045d0:	f8c9 2004 	str.w	r2, [r9, #4]
  4045d4:	3501      	adds	r5, #1
  4045d6:	4414      	add	r4, r2
  4045d8:	ab1f      	add	r3, sp, #124	; 0x7c
  4045da:	2d07      	cmp	r5, #7
  4045dc:	9425      	str	r4, [sp, #148]	; 0x94
  4045de:	9524      	str	r5, [sp, #144]	; 0x90
  4045e0:	f8c9 3000 	str.w	r3, [r9]
  4045e4:	f77f ace8 	ble.w	403fb8 <_svfprintf_r+0x51c>
  4045e8:	aa23      	add	r2, sp, #140	; 0x8c
  4045ea:	9909      	ldr	r1, [sp, #36]	; 0x24
  4045ec:	980a      	ldr	r0, [sp, #40]	; 0x28
  4045ee:	f004 f855 	bl	40869c <__ssprint_r>
  4045f2:	2800      	cmp	r0, #0
  4045f4:	f47f ab4b 	bne.w	403c8e <_svfprintf_r+0x1f2>
  4045f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4045fa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4045fe:	e4dd      	b.n	403fbc <_svfprintf_r+0x520>
  404600:	aa23      	add	r2, sp, #140	; 0x8c
  404602:	9909      	ldr	r1, [sp, #36]	; 0x24
  404604:	980a      	ldr	r0, [sp, #40]	; 0x28
  404606:	f004 f849 	bl	40869c <__ssprint_r>
  40460a:	2800      	cmp	r0, #0
  40460c:	f43f ad24 	beq.w	404058 <_svfprintf_r+0x5bc>
  404610:	f7ff bb3d 	b.w	403c8e <_svfprintf_r+0x1f2>
  404614:	aa23      	add	r2, sp, #140	; 0x8c
  404616:	9909      	ldr	r1, [sp, #36]	; 0x24
  404618:	980a      	ldr	r0, [sp, #40]	; 0x28
  40461a:	f004 f83f 	bl	40869c <__ssprint_r>
  40461e:	2800      	cmp	r0, #0
  404620:	f47f ab35 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404624:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404626:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40462a:	e4b4      	b.n	403f96 <_svfprintf_r+0x4fa>
  40462c:	aa23      	add	r2, sp, #140	; 0x8c
  40462e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404630:	980a      	ldr	r0, [sp, #40]	; 0x28
  404632:	f004 f833 	bl	40869c <__ssprint_r>
  404636:	2800      	cmp	r0, #0
  404638:	f47f ab29 	bne.w	403c8e <_svfprintf_r+0x1f2>
  40463c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40463e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404642:	e455      	b.n	403ef0 <_svfprintf_r+0x454>
  404644:	aa23      	add	r2, sp, #140	; 0x8c
  404646:	9909      	ldr	r1, [sp, #36]	; 0x24
  404648:	980a      	ldr	r0, [sp, #40]	; 0x28
  40464a:	f004 f827 	bl	40869c <__ssprint_r>
  40464e:	2800      	cmp	r0, #0
  404650:	f47f ab1d 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404654:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404656:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40465a:	e459      	b.n	403f10 <_svfprintf_r+0x474>
  40465c:	f1bb 0f00 	cmp.w	fp, #0
  404660:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404664:	f2c0 82d8 	blt.w	404c18 <_svfprintf_r+0x117c>
  404668:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40466c:	9307      	str	r3, [sp, #28]
  40466e:	ea54 0305 	orrs.w	r3, r4, r5
  404672:	f47f adcb 	bne.w	40420c <_svfprintf_r+0x770>
  404676:	f1bb 0f00 	cmp.w	fp, #0
  40467a:	f43f ae8d 	beq.w	404398 <_svfprintf_r+0x8fc>
  40467e:	2700      	movs	r7, #0
  404680:	e6b8      	b.n	4043f4 <_svfprintf_r+0x958>
  404682:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404684:	2d00      	cmp	r5, #0
  404686:	f340 82ca 	ble.w	404c1e <_svfprintf_r+0x1182>
  40468a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40468c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40468e:	4293      	cmp	r3, r2
  404690:	bfa8      	it	ge
  404692:	4613      	movge	r3, r2
  404694:	2b00      	cmp	r3, #0
  404696:	461d      	mov	r5, r3
  404698:	dd0d      	ble.n	4046b6 <_svfprintf_r+0xc1a>
  40469a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40469c:	f8c9 6000 	str.w	r6, [r9]
  4046a0:	3301      	adds	r3, #1
  4046a2:	442c      	add	r4, r5
  4046a4:	2b07      	cmp	r3, #7
  4046a6:	9425      	str	r4, [sp, #148]	; 0x94
  4046a8:	f8c9 5004 	str.w	r5, [r9, #4]
  4046ac:	9324      	str	r3, [sp, #144]	; 0x90
  4046ae:	f300 839c 	bgt.w	404dea <_svfprintf_r+0x134e>
  4046b2:	f109 0908 	add.w	r9, r9, #8
  4046b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4046b8:	2d00      	cmp	r5, #0
  4046ba:	bfa8      	it	ge
  4046bc:	1b5b      	subge	r3, r3, r5
  4046be:	2b00      	cmp	r3, #0
  4046c0:	461d      	mov	r5, r3
  4046c2:	f340 80f6 	ble.w	4048b2 <_svfprintf_r+0xe16>
  4046c6:	4aba      	ldr	r2, [pc, #744]	; (4049b0 <_svfprintf_r+0xf14>)
  4046c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4046ca:	920f      	str	r2, [sp, #60]	; 0x3c
  4046cc:	2d10      	cmp	r5, #16
  4046ce:	f340 828a 	ble.w	404be6 <_svfprintf_r+0x114a>
  4046d2:	4622      	mov	r2, r4
  4046d4:	2710      	movs	r7, #16
  4046d6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4046da:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4046dc:	e005      	b.n	4046ea <_svfprintf_r+0xc4e>
  4046de:	f109 0908 	add.w	r9, r9, #8
  4046e2:	3d10      	subs	r5, #16
  4046e4:	2d10      	cmp	r5, #16
  4046e6:	f340 827d 	ble.w	404be4 <_svfprintf_r+0x1148>
  4046ea:	3301      	adds	r3, #1
  4046ec:	3210      	adds	r2, #16
  4046ee:	2b07      	cmp	r3, #7
  4046f0:	9225      	str	r2, [sp, #148]	; 0x94
  4046f2:	9324      	str	r3, [sp, #144]	; 0x90
  4046f4:	f8c9 a000 	str.w	sl, [r9]
  4046f8:	f8c9 7004 	str.w	r7, [r9, #4]
  4046fc:	ddef      	ble.n	4046de <_svfprintf_r+0xc42>
  4046fe:	aa23      	add	r2, sp, #140	; 0x8c
  404700:	4621      	mov	r1, r4
  404702:	4658      	mov	r0, fp
  404704:	f003 ffca 	bl	40869c <__ssprint_r>
  404708:	2800      	cmp	r0, #0
  40470a:	f47f aac0 	bne.w	403c8e <_svfprintf_r+0x1f2>
  40470e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404710:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404712:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404716:	e7e4      	b.n	4046e2 <_svfprintf_r+0xc46>
  404718:	aa23      	add	r2, sp, #140	; 0x8c
  40471a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40471c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40471e:	f003 ffbd 	bl	40869c <__ssprint_r>
  404722:	2800      	cmp	r0, #0
  404724:	f47f aab3 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404728:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40472c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40472e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404732:	f7ff bbcd 	b.w	403ed0 <_svfprintf_r+0x434>
  404736:	1e5e      	subs	r6, r3, #1
  404738:	2e00      	cmp	r6, #0
  40473a:	f77f af48 	ble.w	4045ce <_svfprintf_r+0xb32>
  40473e:	4b9c      	ldr	r3, [pc, #624]	; (4049b0 <_svfprintf_r+0xf14>)
  404740:	930f      	str	r3, [sp, #60]	; 0x3c
  404742:	2e10      	cmp	r6, #16
  404744:	dd2c      	ble.n	4047a0 <_svfprintf_r+0xd04>
  404746:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  40474a:	2710      	movs	r7, #16
  40474c:	46b0      	mov	r8, r6
  40474e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404752:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404754:	e006      	b.n	404764 <_svfprintf_r+0xcc8>
  404756:	f1a8 0810 	sub.w	r8, r8, #16
  40475a:	f1b8 0f10 	cmp.w	r8, #16
  40475e:	f109 0908 	add.w	r9, r9, #8
  404762:	dd1a      	ble.n	40479a <_svfprintf_r+0xcfe>
  404764:	3501      	adds	r5, #1
  404766:	3410      	adds	r4, #16
  404768:	2d07      	cmp	r5, #7
  40476a:	9425      	str	r4, [sp, #148]	; 0x94
  40476c:	9524      	str	r5, [sp, #144]	; 0x90
  40476e:	f8c9 a000 	str.w	sl, [r9]
  404772:	f8c9 7004 	str.w	r7, [r9, #4]
  404776:	ddee      	ble.n	404756 <_svfprintf_r+0xcba>
  404778:	aa23      	add	r2, sp, #140	; 0x8c
  40477a:	4631      	mov	r1, r6
  40477c:	4658      	mov	r0, fp
  40477e:	f003 ff8d 	bl	40869c <__ssprint_r>
  404782:	2800      	cmp	r0, #0
  404784:	f47f aa83 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404788:	f1a8 0810 	sub.w	r8, r8, #16
  40478c:	f1b8 0f10 	cmp.w	r8, #16
  404790:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404792:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404794:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404798:	dce4      	bgt.n	404764 <_svfprintf_r+0xcc8>
  40479a:	4646      	mov	r6, r8
  40479c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  4047a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4047a2:	3501      	adds	r5, #1
  4047a4:	4434      	add	r4, r6
  4047a6:	2d07      	cmp	r5, #7
  4047a8:	9425      	str	r4, [sp, #148]	; 0x94
  4047aa:	9524      	str	r5, [sp, #144]	; 0x90
  4047ac:	e889 0048 	stmia.w	r9, {r3, r6}
  4047b0:	f77f af0b 	ble.w	4045ca <_svfprintf_r+0xb2e>
  4047b4:	aa23      	add	r2, sp, #140	; 0x8c
  4047b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4047b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4047ba:	f003 ff6f 	bl	40869c <__ssprint_r>
  4047be:	2800      	cmp	r0, #0
  4047c0:	f47f aa65 	bne.w	403c8e <_svfprintf_r+0x1f2>
  4047c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4047c6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4047c8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4047cc:	e6ff      	b.n	4045ce <_svfprintf_r+0xb32>
  4047ce:	9907      	ldr	r1, [sp, #28]
  4047d0:	f011 0210 	ands.w	r2, r1, #16
  4047d4:	f000 8108 	beq.w	4049e8 <_svfprintf_r+0xf4c>
  4047d8:	980e      	ldr	r0, [sp, #56]	; 0x38
  4047da:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4047de:	f1bb 0f00 	cmp.w	fp, #0
  4047e2:	6804      	ldr	r4, [r0, #0]
  4047e4:	f100 0704 	add.w	r7, r0, #4
  4047e8:	f04f 0500 	mov.w	r5, #0
  4047ec:	db26      	blt.n	40483c <_svfprintf_r+0xda0>
  4047ee:	460a      	mov	r2, r1
  4047f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  4047f4:	9207      	str	r2, [sp, #28]
  4047f6:	ea54 0205 	orrs.w	r2, r4, r5
  4047fa:	970e      	str	r7, [sp, #56]	; 0x38
  4047fc:	461f      	mov	r7, r3
  4047fe:	f47f aaef 	bne.w	403de0 <_svfprintf_r+0x344>
  404802:	e4c8      	b.n	404196 <_svfprintf_r+0x6fa>
  404804:	9b07      	ldr	r3, [sp, #28]
  404806:	06d9      	lsls	r1, r3, #27
  404808:	d42a      	bmi.n	404860 <_svfprintf_r+0xdc4>
  40480a:	9b07      	ldr	r3, [sp, #28]
  40480c:	065a      	lsls	r2, r3, #25
  40480e:	d527      	bpl.n	404860 <_svfprintf_r+0xdc4>
  404810:	990e      	ldr	r1, [sp, #56]	; 0x38
  404812:	f9b1 4000 	ldrsh.w	r4, [r1]
  404816:	3104      	adds	r1, #4
  404818:	17e5      	asrs	r5, r4, #31
  40481a:	4622      	mov	r2, r4
  40481c:	462b      	mov	r3, r5
  40481e:	910e      	str	r1, [sp, #56]	; 0x38
  404820:	f7ff bacb 	b.w	403dba <_svfprintf_r+0x31e>
  404824:	990e      	ldr	r1, [sp, #56]	; 0x38
  404826:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40482a:	f1bb 0f00 	cmp.w	fp, #0
  40482e:	680c      	ldr	r4, [r1, #0]
  404830:	f101 0704 	add.w	r7, r1, #4
  404834:	f04f 0500 	mov.w	r5, #0
  404838:	f280 8247 	bge.w	404cca <_svfprintf_r+0x122e>
  40483c:	970e      	str	r7, [sp, #56]	; 0x38
  40483e:	461f      	mov	r7, r3
  404840:	ea54 0305 	orrs.w	r3, r4, r5
  404844:	f47f aacc 	bne.w	403de0 <_svfprintf_r+0x344>
  404848:	e4aa      	b.n	4041a0 <_svfprintf_r+0x704>
  40484a:	3301      	adds	r3, #1
  40484c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40484e:	9324      	str	r3, [sp, #144]	; 0x90
  404850:	442c      	add	r4, r5
  404852:	2b07      	cmp	r3, #7
  404854:	9425      	str	r4, [sp, #148]	; 0x94
  404856:	e889 0024 	stmia.w	r9, {r2, r5}
  40485a:	f77f abad 	ble.w	403fb8 <_svfprintf_r+0x51c>
  40485e:	e6c3      	b.n	4045e8 <_svfprintf_r+0xb4c>
  404860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404862:	6814      	ldr	r4, [r2, #0]
  404864:	4613      	mov	r3, r2
  404866:	3304      	adds	r3, #4
  404868:	17e5      	asrs	r5, r4, #31
  40486a:	4622      	mov	r2, r4
  40486c:	930e      	str	r3, [sp, #56]	; 0x38
  40486e:	2a00      	cmp	r2, #0
  404870:	462b      	mov	r3, r5
  404872:	f173 0300 	sbcs.w	r3, r3, #0
  404876:	f6bf aaa5 	bge.w	403dc4 <_svfprintf_r+0x328>
  40487a:	4264      	negs	r4, r4
  40487c:	f04f 072d 	mov.w	r7, #45	; 0x2d
  404880:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404884:	f1bb 0f00 	cmp.w	fp, #0
  404888:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  40488c:	f6ff aaa8 	blt.w	403de0 <_svfprintf_r+0x344>
  404890:	9b07      	ldr	r3, [sp, #28]
  404892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404896:	9307      	str	r3, [sp, #28]
  404898:	f7ff baa2 	b.w	403de0 <_svfprintf_r+0x344>
  40489c:	aa23      	add	r2, sp, #140	; 0x8c
  40489e:	9909      	ldr	r1, [sp, #36]	; 0x24
  4048a0:	980a      	ldr	r0, [sp, #40]	; 0x28
  4048a2:	f003 fefb 	bl	40869c <__ssprint_r>
  4048a6:	2800      	cmp	r0, #0
  4048a8:	f47f a9f1 	bne.w	403c8e <_svfprintf_r+0x1f2>
  4048ac:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4048ae:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4048b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4048b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  4048b6:	4432      	add	r2, r6
  4048b8:	4617      	mov	r7, r2
  4048ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4048bc:	4293      	cmp	r3, r2
  4048be:	db47      	blt.n	404950 <_svfprintf_r+0xeb4>
  4048c0:	9a07      	ldr	r2, [sp, #28]
  4048c2:	07d5      	lsls	r5, r2, #31
  4048c4:	d444      	bmi.n	404950 <_svfprintf_r+0xeb4>
  4048c6:	9912      	ldr	r1, [sp, #72]	; 0x48
  4048c8:	440e      	add	r6, r1
  4048ca:	1bf5      	subs	r5, r6, r7
  4048cc:	1acb      	subs	r3, r1, r3
  4048ce:	429d      	cmp	r5, r3
  4048d0:	bfa8      	it	ge
  4048d2:	461d      	movge	r5, r3
  4048d4:	2d00      	cmp	r5, #0
  4048d6:	462e      	mov	r6, r5
  4048d8:	dd0d      	ble.n	4048f6 <_svfprintf_r+0xe5a>
  4048da:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4048dc:	f8c9 7000 	str.w	r7, [r9]
  4048e0:	3201      	adds	r2, #1
  4048e2:	442c      	add	r4, r5
  4048e4:	2a07      	cmp	r2, #7
  4048e6:	9425      	str	r4, [sp, #148]	; 0x94
  4048e8:	f8c9 5004 	str.w	r5, [r9, #4]
  4048ec:	9224      	str	r2, [sp, #144]	; 0x90
  4048ee:	f300 830b 	bgt.w	404f08 <_svfprintf_r+0x146c>
  4048f2:	f109 0908 	add.w	r9, r9, #8
  4048f6:	2e00      	cmp	r6, #0
  4048f8:	bfac      	ite	ge
  4048fa:	1b9d      	subge	r5, r3, r6
  4048fc:	461d      	movlt	r5, r3
  4048fe:	2d00      	cmp	r5, #0
  404900:	f77f ab5c 	ble.w	403fbc <_svfprintf_r+0x520>
  404904:	4a2a      	ldr	r2, [pc, #168]	; (4049b0 <_svfprintf_r+0xf14>)
  404906:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404908:	920f      	str	r2, [sp, #60]	; 0x3c
  40490a:	2d10      	cmp	r5, #16
  40490c:	dd9d      	ble.n	40484a <_svfprintf_r+0xdae>
  40490e:	2610      	movs	r6, #16
  404910:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404912:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404916:	e004      	b.n	404922 <_svfprintf_r+0xe86>
  404918:	f109 0908 	add.w	r9, r9, #8
  40491c:	3d10      	subs	r5, #16
  40491e:	2d10      	cmp	r5, #16
  404920:	dd93      	ble.n	40484a <_svfprintf_r+0xdae>
  404922:	3301      	adds	r3, #1
  404924:	3410      	adds	r4, #16
  404926:	2b07      	cmp	r3, #7
  404928:	9425      	str	r4, [sp, #148]	; 0x94
  40492a:	9324      	str	r3, [sp, #144]	; 0x90
  40492c:	f8c9 a000 	str.w	sl, [r9]
  404930:	f8c9 6004 	str.w	r6, [r9, #4]
  404934:	ddf0      	ble.n	404918 <_svfprintf_r+0xe7c>
  404936:	aa23      	add	r2, sp, #140	; 0x8c
  404938:	4659      	mov	r1, fp
  40493a:	4638      	mov	r0, r7
  40493c:	f003 feae 	bl	40869c <__ssprint_r>
  404940:	2800      	cmp	r0, #0
  404942:	f47f a9a4 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404946:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404948:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40494a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  40494e:	e7e5      	b.n	40491c <_svfprintf_r+0xe80>
  404950:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404952:	9816      	ldr	r0, [sp, #88]	; 0x58
  404954:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404956:	f8c9 1000 	str.w	r1, [r9]
  40495a:	3201      	adds	r2, #1
  40495c:	4404      	add	r4, r0
  40495e:	2a07      	cmp	r2, #7
  404960:	9425      	str	r4, [sp, #148]	; 0x94
  404962:	f8c9 0004 	str.w	r0, [r9, #4]
  404966:	9224      	str	r2, [sp, #144]	; 0x90
  404968:	f300 82a9 	bgt.w	404ebe <_svfprintf_r+0x1422>
  40496c:	f109 0908 	add.w	r9, r9, #8
  404970:	e7a9      	b.n	4048c6 <_svfprintf_r+0xe2a>
  404972:	9b07      	ldr	r3, [sp, #28]
  404974:	07d8      	lsls	r0, r3, #31
  404976:	f53f adf4 	bmi.w	404562 <_svfprintf_r+0xac6>
  40497a:	3501      	adds	r5, #1
  40497c:	3401      	adds	r4, #1
  40497e:	2301      	movs	r3, #1
  404980:	2d07      	cmp	r5, #7
  404982:	9425      	str	r4, [sp, #148]	; 0x94
  404984:	9524      	str	r5, [sp, #144]	; 0x90
  404986:	f8c9 6000 	str.w	r6, [r9]
  40498a:	f8c9 3004 	str.w	r3, [r9, #4]
  40498e:	f77f ae1c 	ble.w	4045ca <_svfprintf_r+0xb2e>
  404992:	e70f      	b.n	4047b4 <_svfprintf_r+0xd18>
  404994:	aa23      	add	r2, sp, #140	; 0x8c
  404996:	9909      	ldr	r1, [sp, #36]	; 0x24
  404998:	980a      	ldr	r0, [sp, #40]	; 0x28
  40499a:	f003 fe7f 	bl	40869c <__ssprint_r>
  40499e:	2800      	cmp	r0, #0
  4049a0:	f47f a975 	bne.w	403c8e <_svfprintf_r+0x1f2>
  4049a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049a6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4049a8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4049ac:	e5e7      	b.n	40457e <_svfprintf_r+0xae2>
  4049ae:	bf00      	nop
  4049b0:	004098b4 	.word	0x004098b4
  4049b4:	aa23      	add	r2, sp, #140	; 0x8c
  4049b6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4049b8:	980a      	ldr	r0, [sp, #40]	; 0x28
  4049ba:	f003 fe6f 	bl	40869c <__ssprint_r>
  4049be:	2800      	cmp	r0, #0
  4049c0:	f47f a965 	bne.w	403c8e <_svfprintf_r+0x1f2>
  4049c4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049c6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  4049c8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4049cc:	e5e6      	b.n	40459c <_svfprintf_r+0xb00>
  4049ce:	aa23      	add	r2, sp, #140	; 0x8c
  4049d0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4049d2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4049d4:	f003 fe62 	bl	40869c <__ssprint_r>
  4049d8:	2800      	cmp	r0, #0
  4049da:	f47f a958 	bne.w	403c8e <_svfprintf_r+0x1f2>
  4049de:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4049e4:	f7ff ba98 	b.w	403f18 <_svfprintf_r+0x47c>
  4049e8:	9907      	ldr	r1, [sp, #28]
  4049ea:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  4049ee:	f43f af19 	beq.w	404824 <_svfprintf_r+0xd88>
  4049f2:	980e      	ldr	r0, [sp, #56]	; 0x38
  4049f4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  4049f8:	f1bb 0f00 	cmp.w	fp, #0
  4049fc:	8804      	ldrh	r4, [r0, #0]
  4049fe:	f100 0704 	add.w	r7, r0, #4
  404a02:	f04f 0500 	mov.w	r5, #0
  404a06:	f2c0 81b9 	blt.w	404d7c <_svfprintf_r+0x12e0>
  404a0a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404a0e:	9307      	str	r3, [sp, #28]
  404a10:	ea54 0305 	orrs.w	r3, r4, r5
  404a14:	970e      	str	r7, [sp, #56]	; 0x38
  404a16:	4617      	mov	r7, r2
  404a18:	f47f a9e2 	bne.w	403de0 <_svfprintf_r+0x344>
  404a1c:	f7ff bbbb 	b.w	404196 <_svfprintf_r+0x6fa>
  404a20:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404a22:	4622      	mov	r2, r4
  404a24:	4620      	mov	r0, r4
  404a26:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404a28:	4623      	mov	r3, r4
  404a2a:	4621      	mov	r1, r4
  404a2c:	f004 fcd4 	bl	4093d8 <__aeabi_dcmpun>
  404a30:	2800      	cmp	r0, #0
  404a32:	f040 8317 	bne.w	405064 <_svfprintf_r+0x15c8>
  404a36:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a38:	f1bb 3fff 	cmp.w	fp, #4294967295
  404a3c:	f023 0320 	bic.w	r3, r3, #32
  404a40:	930d      	str	r3, [sp, #52]	; 0x34
  404a42:	f000 8270 	beq.w	404f26 <_svfprintf_r+0x148a>
  404a46:	2b47      	cmp	r3, #71	; 0x47
  404a48:	f000 8192 	beq.w	404d70 <_svfprintf_r+0x12d4>
  404a4c:	9b07      	ldr	r3, [sp, #28]
  404a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404a52:	9310      	str	r3, [sp, #64]	; 0x40
  404a54:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404a56:	1e1f      	subs	r7, r3, #0
  404a58:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404a5a:	9308      	str	r3, [sp, #32]
  404a5c:	bfbb      	ittet	lt
  404a5e:	463b      	movlt	r3, r7
  404a60:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404a64:	2300      	movge	r3, #0
  404a66:	232d      	movlt	r3, #45	; 0x2d
  404a68:	930f      	str	r3, [sp, #60]	; 0x3c
  404a6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404a6c:	2b66      	cmp	r3, #102	; 0x66
  404a6e:	f000 825d 	beq.w	404f2c <_svfprintf_r+0x1490>
  404a72:	2b46      	cmp	r3, #70	; 0x46
  404a74:	f000 8151 	beq.w	404d1a <_svfprintf_r+0x127e>
  404a78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404a7a:	9a08      	ldr	r2, [sp, #32]
  404a7c:	2b45      	cmp	r3, #69	; 0x45
  404a7e:	a821      	add	r0, sp, #132	; 0x84
  404a80:	a91e      	add	r1, sp, #120	; 0x78
  404a82:	bf0c      	ite	eq
  404a84:	f10b 0501 	addeq.w	r5, fp, #1
  404a88:	465d      	movne	r5, fp
  404a8a:	9004      	str	r0, [sp, #16]
  404a8c:	9103      	str	r1, [sp, #12]
  404a8e:	a81d      	add	r0, sp, #116	; 0x74
  404a90:	2102      	movs	r1, #2
  404a92:	463b      	mov	r3, r7
  404a94:	9002      	str	r0, [sp, #8]
  404a96:	9501      	str	r5, [sp, #4]
  404a98:	9100      	str	r1, [sp, #0]
  404a9a:	980a      	ldr	r0, [sp, #40]	; 0x28
  404a9c:	f001 fbc4 	bl	406228 <_dtoa_r>
  404aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404aa2:	2b67      	cmp	r3, #103	; 0x67
  404aa4:	4606      	mov	r6, r0
  404aa6:	f040 8290 	bne.w	404fca <_svfprintf_r+0x152e>
  404aaa:	9b07      	ldr	r3, [sp, #28]
  404aac:	07da      	lsls	r2, r3, #31
  404aae:	f140 82af 	bpl.w	405010 <_svfprintf_r+0x1574>
  404ab2:	1974      	adds	r4, r6, r5
  404ab4:	9808      	ldr	r0, [sp, #32]
  404ab6:	4639      	mov	r1, r7
  404ab8:	2200      	movs	r2, #0
  404aba:	2300      	movs	r3, #0
  404abc:	f004 fc5a 	bl	409374 <__aeabi_dcmpeq>
  404ac0:	2800      	cmp	r0, #0
  404ac2:	f040 8190 	bne.w	404de6 <_svfprintf_r+0x134a>
  404ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404ac8:	429c      	cmp	r4, r3
  404aca:	d906      	bls.n	404ada <_svfprintf_r+0x103e>
  404acc:	2130      	movs	r1, #48	; 0x30
  404ace:	1c5a      	adds	r2, r3, #1
  404ad0:	9221      	str	r2, [sp, #132]	; 0x84
  404ad2:	7019      	strb	r1, [r3, #0]
  404ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404ad6:	429c      	cmp	r4, r3
  404ad8:	d8f9      	bhi.n	404ace <_svfprintf_r+0x1032>
  404ada:	1b9b      	subs	r3, r3, r6
  404adc:	9312      	str	r3, [sp, #72]	; 0x48
  404ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404ae0:	2b47      	cmp	r3, #71	; 0x47
  404ae2:	f000 8179 	beq.w	404dd8 <_svfprintf_r+0x133c>
  404ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404ae8:	2b65      	cmp	r3, #101	; 0x65
  404aea:	f340 827d 	ble.w	404fe8 <_svfprintf_r+0x154c>
  404aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404af0:	2b66      	cmp	r3, #102	; 0x66
  404af2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404af4:	9313      	str	r3, [sp, #76]	; 0x4c
  404af6:	f000 825b 	beq.w	404fb0 <_svfprintf_r+0x1514>
  404afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404afc:	9912      	ldr	r1, [sp, #72]	; 0x48
  404afe:	428a      	cmp	r2, r1
  404b00:	f2c0 8230 	blt.w	404f64 <_svfprintf_r+0x14c8>
  404b04:	9b07      	ldr	r3, [sp, #28]
  404b06:	07d9      	lsls	r1, r3, #31
  404b08:	f100 8284 	bmi.w	405014 <_svfprintf_r+0x1578>
  404b0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404b10:	920d      	str	r2, [sp, #52]	; 0x34
  404b12:	2267      	movs	r2, #103	; 0x67
  404b14:	9211      	str	r2, [sp, #68]	; 0x44
  404b16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b18:	2a00      	cmp	r2, #0
  404b1a:	f040 8153 	bne.w	404dc4 <_svfprintf_r+0x1328>
  404b1e:	9308      	str	r3, [sp, #32]
  404b20:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404b22:	9307      	str	r3, [sp, #28]
  404b24:	4693      	mov	fp, r2
  404b26:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404b2a:	f7ff b97d 	b.w	403e28 <_svfprintf_r+0x38c>
  404b2e:	9907      	ldr	r1, [sp, #28]
  404b30:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  404b34:	d015      	beq.n	404b62 <_svfprintf_r+0x10c6>
  404b36:	980e      	ldr	r0, [sp, #56]	; 0x38
  404b38:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404b3c:	f1bb 0f00 	cmp.w	fp, #0
  404b40:	8804      	ldrh	r4, [r0, #0]
  404b42:	f100 0704 	add.w	r7, r0, #4
  404b46:	f04f 0500 	mov.w	r5, #0
  404b4a:	db16      	blt.n	404b7a <_svfprintf_r+0x10de>
  404b4c:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404b50:	9307      	str	r3, [sp, #28]
  404b52:	ea54 0305 	orrs.w	r3, r4, r5
  404b56:	970e      	str	r7, [sp, #56]	; 0x38
  404b58:	f43f ac3a 	beq.w	4043d0 <_svfprintf_r+0x934>
  404b5c:	4617      	mov	r7, r2
  404b5e:	f7ff b8c2 	b.w	403ce6 <_svfprintf_r+0x24a>
  404b62:	990e      	ldr	r1, [sp, #56]	; 0x38
  404b64:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404b68:	f1bb 0f00 	cmp.w	fp, #0
  404b6c:	680c      	ldr	r4, [r1, #0]
  404b6e:	f101 0704 	add.w	r7, r1, #4
  404b72:	f04f 0500 	mov.w	r5, #0
  404b76:	f280 80a5 	bge.w	404cc4 <_svfprintf_r+0x1228>
  404b7a:	970e      	str	r7, [sp, #56]	; 0x38
  404b7c:	2700      	movs	r7, #0
  404b7e:	f7ff b8b2 	b.w	403ce6 <_svfprintf_r+0x24a>
  404b82:	9b07      	ldr	r3, [sp, #28]
  404b84:	06df      	lsls	r7, r3, #27
  404b86:	d40b      	bmi.n	404ba0 <_svfprintf_r+0x1104>
  404b88:	9b07      	ldr	r3, [sp, #28]
  404b8a:	065e      	lsls	r6, r3, #25
  404b8c:	d508      	bpl.n	404ba0 <_svfprintf_r+0x1104>
  404b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404b90:	6813      	ldr	r3, [r2, #0]
  404b92:	3204      	adds	r2, #4
  404b94:	920e      	str	r2, [sp, #56]	; 0x38
  404b96:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  404b9a:	801a      	strh	r2, [r3, #0]
  404b9c:	f7fe bfa4 	b.w	403ae8 <_svfprintf_r+0x4c>
  404ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404ba2:	6813      	ldr	r3, [r2, #0]
  404ba4:	3204      	adds	r2, #4
  404ba6:	920e      	str	r2, [sp, #56]	; 0x38
  404ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404baa:	601a      	str	r2, [r3, #0]
  404bac:	f7fe bf9c 	b.w	403ae8 <_svfprintf_r+0x4c>
  404bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404bb2:	9b07      	ldr	r3, [sp, #28]
  404bb4:	f013 0f40 	tst.w	r3, #64	; 0x40
  404bb8:	4613      	mov	r3, r2
  404bba:	f103 0304 	add.w	r3, r3, #4
  404bbe:	bf0c      	ite	eq
  404bc0:	6814      	ldreq	r4, [r2, #0]
  404bc2:	8814      	ldrhne	r4, [r2, #0]
  404bc4:	930e      	str	r3, [sp, #56]	; 0x38
  404bc6:	2500      	movs	r5, #0
  404bc8:	f7ff bb02 	b.w	4041d0 <_svfprintf_r+0x734>
  404bcc:	2700      	movs	r7, #0
  404bce:	45bb      	cmp	fp, r7
  404bd0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404bd4:	f6ff ac0e 	blt.w	4043f4 <_svfprintf_r+0x958>
  404bd8:	9b07      	ldr	r3, [sp, #28]
  404bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404bde:	9307      	str	r3, [sp, #28]
  404be0:	f7ff bbd6 	b.w	404390 <_svfprintf_r+0x8f4>
  404be4:	4614      	mov	r4, r2
  404be6:	3301      	adds	r3, #1
  404be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bea:	9324      	str	r3, [sp, #144]	; 0x90
  404bec:	442c      	add	r4, r5
  404bee:	2b07      	cmp	r3, #7
  404bf0:	9425      	str	r4, [sp, #148]	; 0x94
  404bf2:	e889 0024 	stmia.w	r9, {r2, r5}
  404bf6:	f73f ae51 	bgt.w	40489c <_svfprintf_r+0xe00>
  404bfa:	f109 0908 	add.w	r9, r9, #8
  404bfe:	e658      	b.n	4048b2 <_svfprintf_r+0xe16>
  404c00:	aa23      	add	r2, sp, #140	; 0x8c
  404c02:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c04:	980a      	ldr	r0, [sp, #40]	; 0x28
  404c06:	f003 fd49 	bl	40869c <__ssprint_r>
  404c0a:	2800      	cmp	r0, #0
  404c0c:	f47f a83f 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404c10:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c12:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404c16:	e40f      	b.n	404438 <_svfprintf_r+0x99c>
  404c18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404c1a:	f7ff bbe4 	b.w	4043e6 <_svfprintf_r+0x94a>
  404c1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c20:	4ab5      	ldr	r2, [pc, #724]	; (404ef8 <_svfprintf_r+0x145c>)
  404c22:	f8c9 2000 	str.w	r2, [r9]
  404c26:	3301      	adds	r3, #1
  404c28:	3401      	adds	r4, #1
  404c2a:	2201      	movs	r2, #1
  404c2c:	2b07      	cmp	r3, #7
  404c2e:	9425      	str	r4, [sp, #148]	; 0x94
  404c30:	9324      	str	r3, [sp, #144]	; 0x90
  404c32:	f8c9 2004 	str.w	r2, [r9, #4]
  404c36:	f300 808e 	bgt.w	404d56 <_svfprintf_r+0x12ba>
  404c3a:	f109 0908 	add.w	r9, r9, #8
  404c3e:	b92d      	cbnz	r5, 404c4c <_svfprintf_r+0x11b0>
  404c40:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404c42:	b91b      	cbnz	r3, 404c4c <_svfprintf_r+0x11b0>
  404c44:	9b07      	ldr	r3, [sp, #28]
  404c46:	07df      	lsls	r7, r3, #31
  404c48:	f57f a9b8 	bpl.w	403fbc <_svfprintf_r+0x520>
  404c4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c4e:	9916      	ldr	r1, [sp, #88]	; 0x58
  404c50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  404c52:	f8c9 2000 	str.w	r2, [r9]
  404c56:	3301      	adds	r3, #1
  404c58:	440c      	add	r4, r1
  404c5a:	2b07      	cmp	r3, #7
  404c5c:	9425      	str	r4, [sp, #148]	; 0x94
  404c5e:	f8c9 1004 	str.w	r1, [r9, #4]
  404c62:	9324      	str	r3, [sp, #144]	; 0x90
  404c64:	f300 81c2 	bgt.w	404fec <_svfprintf_r+0x1550>
  404c68:	f109 0908 	add.w	r9, r9, #8
  404c6c:	426d      	negs	r5, r5
  404c6e:	2d00      	cmp	r5, #0
  404c70:	f340 809b 	ble.w	404daa <_svfprintf_r+0x130e>
  404c74:	4aa1      	ldr	r2, [pc, #644]	; (404efc <_svfprintf_r+0x1460>)
  404c76:	920f      	str	r2, [sp, #60]	; 0x3c
  404c78:	2d10      	cmp	r5, #16
  404c7a:	f340 80c3 	ble.w	404e04 <_svfprintf_r+0x1368>
  404c7e:	4622      	mov	r2, r4
  404c80:	2710      	movs	r7, #16
  404c82:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404c86:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404c88:	e005      	b.n	404c96 <_svfprintf_r+0x11fa>
  404c8a:	f109 0908 	add.w	r9, r9, #8
  404c8e:	3d10      	subs	r5, #16
  404c90:	2d10      	cmp	r5, #16
  404c92:	f340 80b6 	ble.w	404e02 <_svfprintf_r+0x1366>
  404c96:	3301      	adds	r3, #1
  404c98:	3210      	adds	r2, #16
  404c9a:	2b07      	cmp	r3, #7
  404c9c:	9225      	str	r2, [sp, #148]	; 0x94
  404c9e:	9324      	str	r3, [sp, #144]	; 0x90
  404ca0:	f8c9 a000 	str.w	sl, [r9]
  404ca4:	f8c9 7004 	str.w	r7, [r9, #4]
  404ca8:	ddef      	ble.n	404c8a <_svfprintf_r+0x11ee>
  404caa:	aa23      	add	r2, sp, #140	; 0x8c
  404cac:	4621      	mov	r1, r4
  404cae:	4658      	mov	r0, fp
  404cb0:	f003 fcf4 	bl	40869c <__ssprint_r>
  404cb4:	2800      	cmp	r0, #0
  404cb6:	f47e afea 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404cba:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404cbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404cbe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404cc2:	e7e4      	b.n	404c8e <_svfprintf_r+0x11f2>
  404cc4:	9a07      	ldr	r2, [sp, #28]
  404cc6:	f7ff ba38 	b.w	40413a <_svfprintf_r+0x69e>
  404cca:	9a07      	ldr	r2, [sp, #28]
  404ccc:	e590      	b.n	4047f0 <_svfprintf_r+0xd54>
  404cce:	9b07      	ldr	r3, [sp, #28]
  404cd0:	f043 0320 	orr.w	r3, r3, #32
  404cd4:	9307      	str	r3, [sp, #28]
  404cd6:	f108 0801 	add.w	r8, r8, #1
  404cda:	f898 3000 	ldrb.w	r3, [r8]
  404cde:	f7fe bf36 	b.w	403b4e <_svfprintf_r+0xb2>
  404ce2:	aa23      	add	r2, sp, #140	; 0x8c
  404ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ce6:	980a      	ldr	r0, [sp, #40]	; 0x28
  404ce8:	f003 fcd8 	bl	40869c <__ssprint_r>
  404cec:	2800      	cmp	r0, #0
  404cee:	f47e afce 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404cf2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404cf4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404cf8:	f7ff bbb6 	b.w	404468 <_svfprintf_r+0x9cc>
  404cfc:	2140      	movs	r1, #64	; 0x40
  404cfe:	980a      	ldr	r0, [sp, #40]	; 0x28
  404d00:	f7fe f958 	bl	402fb4 <_malloc_r>
  404d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404d06:	6010      	str	r0, [r2, #0]
  404d08:	6110      	str	r0, [r2, #16]
  404d0a:	2800      	cmp	r0, #0
  404d0c:	f000 81e5 	beq.w	4050da <_svfprintf_r+0x163e>
  404d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404d12:	2340      	movs	r3, #64	; 0x40
  404d14:	6153      	str	r3, [r2, #20]
  404d16:	f7fe bed8 	b.w	403aca <_svfprintf_r+0x2e>
  404d1a:	a821      	add	r0, sp, #132	; 0x84
  404d1c:	a91e      	add	r1, sp, #120	; 0x78
  404d1e:	9004      	str	r0, [sp, #16]
  404d20:	9103      	str	r1, [sp, #12]
  404d22:	a81d      	add	r0, sp, #116	; 0x74
  404d24:	2103      	movs	r1, #3
  404d26:	9002      	str	r0, [sp, #8]
  404d28:	9a08      	ldr	r2, [sp, #32]
  404d2a:	f8cd b004 	str.w	fp, [sp, #4]
  404d2e:	463b      	mov	r3, r7
  404d30:	9100      	str	r1, [sp, #0]
  404d32:	980a      	ldr	r0, [sp, #40]	; 0x28
  404d34:	f001 fa78 	bl	406228 <_dtoa_r>
  404d38:	465d      	mov	r5, fp
  404d3a:	4606      	mov	r6, r0
  404d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d3e:	2b46      	cmp	r3, #70	; 0x46
  404d40:	eb06 0405 	add.w	r4, r6, r5
  404d44:	f47f aeb6 	bne.w	404ab4 <_svfprintf_r+0x1018>
  404d48:	7833      	ldrb	r3, [r6, #0]
  404d4a:	2b30      	cmp	r3, #48	; 0x30
  404d4c:	f000 817c 	beq.w	405048 <_svfprintf_r+0x15ac>
  404d50:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404d52:	442c      	add	r4, r5
  404d54:	e6ae      	b.n	404ab4 <_svfprintf_r+0x1018>
  404d56:	aa23      	add	r2, sp, #140	; 0x8c
  404d58:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d5a:	980a      	ldr	r0, [sp, #40]	; 0x28
  404d5c:	f003 fc9e 	bl	40869c <__ssprint_r>
  404d60:	2800      	cmp	r0, #0
  404d62:	f47e af94 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404d66:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404d68:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d6a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404d6e:	e766      	b.n	404c3e <_svfprintf_r+0x11a2>
  404d70:	f1bb 0f00 	cmp.w	fp, #0
  404d74:	bf08      	it	eq
  404d76:	f04f 0b01 	moveq.w	fp, #1
  404d7a:	e667      	b.n	404a4c <_svfprintf_r+0xfb0>
  404d7c:	970e      	str	r7, [sp, #56]	; 0x38
  404d7e:	4617      	mov	r7, r2
  404d80:	e55e      	b.n	404840 <_svfprintf_r+0xda4>
  404d82:	4630      	mov	r0, r6
  404d84:	f7fe fe1c 	bl	4039c0 <strlen>
  404d88:	46a3      	mov	fp, r4
  404d8a:	4603      	mov	r3, r0
  404d8c:	900d      	str	r0, [sp, #52]	; 0x34
  404d8e:	f7ff baf4 	b.w	40437a <_svfprintf_r+0x8de>
  404d92:	aa23      	add	r2, sp, #140	; 0x8c
  404d94:	9909      	ldr	r1, [sp, #36]	; 0x24
  404d96:	980a      	ldr	r0, [sp, #40]	; 0x28
  404d98:	f003 fc80 	bl	40869c <__ssprint_r>
  404d9c:	2800      	cmp	r0, #0
  404d9e:	f47e af76 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404da2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404da4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404da6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404daa:	9912      	ldr	r1, [sp, #72]	; 0x48
  404dac:	f8c9 6000 	str.w	r6, [r9]
  404db0:	3301      	adds	r3, #1
  404db2:	440c      	add	r4, r1
  404db4:	2b07      	cmp	r3, #7
  404db6:	9425      	str	r4, [sp, #148]	; 0x94
  404db8:	9324      	str	r3, [sp, #144]	; 0x90
  404dba:	f8c9 1004 	str.w	r1, [r9, #4]
  404dbe:	f77f a8fb 	ble.w	403fb8 <_svfprintf_r+0x51c>
  404dc2:	e411      	b.n	4045e8 <_svfprintf_r+0xb4c>
  404dc4:	272d      	movs	r7, #45	; 0x2d
  404dc6:	9308      	str	r3, [sp, #32]
  404dc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404dca:	9307      	str	r3, [sp, #28]
  404dcc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404dd0:	f04f 0b00 	mov.w	fp, #0
  404dd4:	f7ff b829 	b.w	403e2a <_svfprintf_r+0x38e>
  404dd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404dda:	1cdd      	adds	r5, r3, #3
  404ddc:	db1e      	blt.n	404e1c <_svfprintf_r+0x1380>
  404dde:	459b      	cmp	fp, r3
  404de0:	db1c      	blt.n	404e1c <_svfprintf_r+0x1380>
  404de2:	9313      	str	r3, [sp, #76]	; 0x4c
  404de4:	e689      	b.n	404afa <_svfprintf_r+0x105e>
  404de6:	4623      	mov	r3, r4
  404de8:	e677      	b.n	404ada <_svfprintf_r+0x103e>
  404dea:	aa23      	add	r2, sp, #140	; 0x8c
  404dec:	9909      	ldr	r1, [sp, #36]	; 0x24
  404dee:	980a      	ldr	r0, [sp, #40]	; 0x28
  404df0:	f003 fc54 	bl	40869c <__ssprint_r>
  404df4:	2800      	cmp	r0, #0
  404df6:	f47e af4a 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404dfa:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404dfc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404e00:	e459      	b.n	4046b6 <_svfprintf_r+0xc1a>
  404e02:	4614      	mov	r4, r2
  404e04:	3301      	adds	r3, #1
  404e06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404e08:	9324      	str	r3, [sp, #144]	; 0x90
  404e0a:	442c      	add	r4, r5
  404e0c:	2b07      	cmp	r3, #7
  404e0e:	9425      	str	r4, [sp, #148]	; 0x94
  404e10:	e889 0024 	stmia.w	r9, {r2, r5}
  404e14:	dcbd      	bgt.n	404d92 <_svfprintf_r+0x12f6>
  404e16:	f109 0908 	add.w	r9, r9, #8
  404e1a:	e7c6      	b.n	404daa <_svfprintf_r+0x130e>
  404e1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404e1e:	3a02      	subs	r2, #2
  404e20:	9211      	str	r2, [sp, #68]	; 0x44
  404e22:	3b01      	subs	r3, #1
  404e24:	2b00      	cmp	r3, #0
  404e26:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404e2a:	931d      	str	r3, [sp, #116]	; 0x74
  404e2c:	bfb8      	it	lt
  404e2e:	425b      	neglt	r3, r3
  404e30:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  404e34:	bfb4      	ite	lt
  404e36:	222d      	movlt	r2, #45	; 0x2d
  404e38:	222b      	movge	r2, #43	; 0x2b
  404e3a:	2b09      	cmp	r3, #9
  404e3c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  404e40:	f340 80f1 	ble.w	405026 <_svfprintf_r+0x158a>
  404e44:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  404e48:	4604      	mov	r4, r0
  404e4a:	4a2d      	ldr	r2, [pc, #180]	; (404f00 <_svfprintf_r+0x1464>)
  404e4c:	fb82 2103 	smull	r2, r1, r2, r3
  404e50:	17da      	asrs	r2, r3, #31
  404e52:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  404e56:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  404e5a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  404e5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  404e62:	2a09      	cmp	r2, #9
  404e64:	4613      	mov	r3, r2
  404e66:	f804 1d01 	strb.w	r1, [r4, #-1]!
  404e6a:	dcee      	bgt.n	404e4a <_svfprintf_r+0x13ae>
  404e6c:	4621      	mov	r1, r4
  404e6e:	3330      	adds	r3, #48	; 0x30
  404e70:	b2da      	uxtb	r2, r3
  404e72:	f801 2d01 	strb.w	r2, [r1, #-1]!
  404e76:	4288      	cmp	r0, r1
  404e78:	f240 813a 	bls.w	4050f0 <_svfprintf_r+0x1654>
  404e7c:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  404e80:	4623      	mov	r3, r4
  404e82:	e001      	b.n	404e88 <_svfprintf_r+0x13ec>
  404e84:	f813 2b01 	ldrb.w	r2, [r3], #1
  404e88:	f801 2b01 	strb.w	r2, [r1], #1
  404e8c:	4298      	cmp	r0, r3
  404e8e:	d1f9      	bne.n	404e84 <_svfprintf_r+0x13e8>
  404e90:	1c43      	adds	r3, r0, #1
  404e92:	1b1b      	subs	r3, r3, r4
  404e94:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  404e98:	4413      	add	r3, r2
  404e9a:	aa1f      	add	r2, sp, #124	; 0x7c
  404e9c:	1a9b      	subs	r3, r3, r2
  404e9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404ea0:	9319      	str	r3, [sp, #100]	; 0x64
  404ea2:	2a01      	cmp	r2, #1
  404ea4:	4413      	add	r3, r2
  404ea6:	930d      	str	r3, [sp, #52]	; 0x34
  404ea8:	f340 80ea 	ble.w	405080 <_svfprintf_r+0x15e4>
  404eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404eae:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404eb0:	4413      	add	r3, r2
  404eb2:	2200      	movs	r2, #0
  404eb4:	930d      	str	r3, [sp, #52]	; 0x34
  404eb6:	9213      	str	r2, [sp, #76]	; 0x4c
  404eb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ebc:	e62b      	b.n	404b16 <_svfprintf_r+0x107a>
  404ebe:	aa23      	add	r2, sp, #140	; 0x8c
  404ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ec2:	980a      	ldr	r0, [sp, #40]	; 0x28
  404ec4:	f003 fbea 	bl	40869c <__ssprint_r>
  404ec8:	2800      	cmp	r0, #0
  404eca:	f47e aee0 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404ece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404ed0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404ed2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404ed6:	e4f6      	b.n	4048c6 <_svfprintf_r+0xe2a>
  404ed8:	2d06      	cmp	r5, #6
  404eda:	462b      	mov	r3, r5
  404edc:	bf28      	it	cs
  404ede:	2306      	movcs	r3, #6
  404ee0:	930d      	str	r3, [sp, #52]	; 0x34
  404ee2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404ee6:	46b3      	mov	fp, r6
  404ee8:	970e      	str	r7, [sp, #56]	; 0x38
  404eea:	9613      	str	r6, [sp, #76]	; 0x4c
  404eec:	4637      	mov	r7, r6
  404eee:	9308      	str	r3, [sp, #32]
  404ef0:	4e04      	ldr	r6, [pc, #16]	; (404f04 <_svfprintf_r+0x1468>)
  404ef2:	f7fe bf99 	b.w	403e28 <_svfprintf_r+0x38c>
  404ef6:	bf00      	nop
  404ef8:	00409904 	.word	0x00409904
  404efc:	004098b4 	.word	0x004098b4
  404f00:	66666667 	.word	0x66666667
  404f04:	004098fc 	.word	0x004098fc
  404f08:	aa23      	add	r2, sp, #140	; 0x8c
  404f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f0c:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f0e:	f003 fbc5 	bl	40869c <__ssprint_r>
  404f12:	2800      	cmp	r0, #0
  404f14:	f47e aebb 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404f18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404f1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404f1c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f1e:	1ad3      	subs	r3, r2, r3
  404f20:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f24:	e4e7      	b.n	4048f6 <_svfprintf_r+0xe5a>
  404f26:	f04f 0b06 	mov.w	fp, #6
  404f2a:	e58f      	b.n	404a4c <_svfprintf_r+0xfb0>
  404f2c:	a821      	add	r0, sp, #132	; 0x84
  404f2e:	a91e      	add	r1, sp, #120	; 0x78
  404f30:	9004      	str	r0, [sp, #16]
  404f32:	9103      	str	r1, [sp, #12]
  404f34:	a81d      	add	r0, sp, #116	; 0x74
  404f36:	2103      	movs	r1, #3
  404f38:	9002      	str	r0, [sp, #8]
  404f3a:	9a08      	ldr	r2, [sp, #32]
  404f3c:	f8cd b004 	str.w	fp, [sp, #4]
  404f40:	463b      	mov	r3, r7
  404f42:	9100      	str	r1, [sp, #0]
  404f44:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f46:	f001 f96f 	bl	406228 <_dtoa_r>
  404f4a:	465d      	mov	r5, fp
  404f4c:	4606      	mov	r6, r0
  404f4e:	eb00 040b 	add.w	r4, r0, fp
  404f52:	e6f9      	b.n	404d48 <_svfprintf_r+0x12ac>
  404f54:	9307      	str	r3, [sp, #28]
  404f56:	f7ff b959 	b.w	40420c <_svfprintf_r+0x770>
  404f5a:	272d      	movs	r7, #45	; 0x2d
  404f5c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404f60:	f7ff b8b2 	b.w	4040c8 <_svfprintf_r+0x62c>
  404f64:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404f66:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404f68:	4413      	add	r3, r2
  404f6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404f6c:	930d      	str	r3, [sp, #52]	; 0x34
  404f6e:	2a00      	cmp	r2, #0
  404f70:	dd7e      	ble.n	405070 <_svfprintf_r+0x15d4>
  404f72:	2267      	movs	r2, #103	; 0x67
  404f74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404f78:	9211      	str	r2, [sp, #68]	; 0x44
  404f7a:	e5cc      	b.n	404b16 <_svfprintf_r+0x107a>
  404f7c:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  404f80:	970e      	str	r7, [sp, #56]	; 0x38
  404f82:	9308      	str	r3, [sp, #32]
  404f84:	950d      	str	r5, [sp, #52]	; 0x34
  404f86:	4683      	mov	fp, r0
  404f88:	9013      	str	r0, [sp, #76]	; 0x4c
  404f8a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404f8e:	f7fe bf4b 	b.w	403e28 <_svfprintf_r+0x38c>
  404f92:	9b07      	ldr	r3, [sp, #28]
  404f94:	07db      	lsls	r3, r3, #31
  404f96:	465f      	mov	r7, fp
  404f98:	d505      	bpl.n	404fa6 <_svfprintf_r+0x150a>
  404f9a:	ae40      	add	r6, sp, #256	; 0x100
  404f9c:	2330      	movs	r3, #48	; 0x30
  404f9e:	f806 3d41 	strb.w	r3, [r6, #-65]!
  404fa2:	f7fe bf37 	b.w	403e14 <_svfprintf_r+0x378>
  404fa6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  404faa:	ae30      	add	r6, sp, #192	; 0xc0
  404fac:	f7fe bf35 	b.w	403e1a <_svfprintf_r+0x37e>
  404fb0:	2b00      	cmp	r3, #0
  404fb2:	dd7d      	ble.n	4050b0 <_svfprintf_r+0x1614>
  404fb4:	f1bb 0f00 	cmp.w	fp, #0
  404fb8:	d13d      	bne.n	405036 <_svfprintf_r+0x159a>
  404fba:	9a07      	ldr	r2, [sp, #28]
  404fbc:	07d4      	lsls	r4, r2, #31
  404fbe:	d43a      	bmi.n	405036 <_svfprintf_r+0x159a>
  404fc0:	461a      	mov	r2, r3
  404fc2:	920d      	str	r2, [sp, #52]	; 0x34
  404fc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404fc8:	e5a5      	b.n	404b16 <_svfprintf_r+0x107a>
  404fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404fcc:	2b47      	cmp	r3, #71	; 0x47
  404fce:	f47f ad70 	bne.w	404ab2 <_svfprintf_r+0x1016>
  404fd2:	9b07      	ldr	r3, [sp, #28]
  404fd4:	07db      	lsls	r3, r3, #31
  404fd6:	f53f aeb1 	bmi.w	404d3c <_svfprintf_r+0x12a0>
  404fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
  404fdc:	1b9b      	subs	r3, r3, r6
  404fde:	9312      	str	r3, [sp, #72]	; 0x48
  404fe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404fe2:	2b47      	cmp	r3, #71	; 0x47
  404fe4:	f43f aef8 	beq.w	404dd8 <_svfprintf_r+0x133c>
  404fe8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404fea:	e71a      	b.n	404e22 <_svfprintf_r+0x1386>
  404fec:	aa23      	add	r2, sp, #140	; 0x8c
  404fee:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ff0:	980a      	ldr	r0, [sp, #40]	; 0x28
  404ff2:	f003 fb53 	bl	40869c <__ssprint_r>
  404ff6:	2800      	cmp	r0, #0
  404ff8:	f47e ae49 	bne.w	403c8e <_svfprintf_r+0x1f2>
  404ffc:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404ffe:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405000:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405002:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405006:	e631      	b.n	404c6c <_svfprintf_r+0x11d0>
  405008:	46a0      	mov	r8, r4
  40500a:	2500      	movs	r5, #0
  40500c:	f7fe bda1 	b.w	403b52 <_svfprintf_r+0xb6>
  405010:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405012:	e562      	b.n	404ada <_svfprintf_r+0x103e>
  405014:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405018:	4413      	add	r3, r2
  40501a:	2267      	movs	r2, #103	; 0x67
  40501c:	930d      	str	r3, [sp, #52]	; 0x34
  40501e:	9211      	str	r2, [sp, #68]	; 0x44
  405020:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405024:	e577      	b.n	404b16 <_svfprintf_r+0x107a>
  405026:	3330      	adds	r3, #48	; 0x30
  405028:	2230      	movs	r2, #48	; 0x30
  40502a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40502e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405032:	ab20      	add	r3, sp, #128	; 0x80
  405034:	e731      	b.n	404e9a <_svfprintf_r+0x13fe>
  405036:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405038:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40503a:	189d      	adds	r5, r3, r2
  40503c:	eb05 030b 	add.w	r3, r5, fp
  405040:	930d      	str	r3, [sp, #52]	; 0x34
  405042:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405046:	e566      	b.n	404b16 <_svfprintf_r+0x107a>
  405048:	9808      	ldr	r0, [sp, #32]
  40504a:	4639      	mov	r1, r7
  40504c:	2200      	movs	r2, #0
  40504e:	2300      	movs	r3, #0
  405050:	f004 f990 	bl	409374 <__aeabi_dcmpeq>
  405054:	2800      	cmp	r0, #0
  405056:	f47f ae7b 	bne.w	404d50 <_svfprintf_r+0x12b4>
  40505a:	f1c5 0501 	rsb	r5, r5, #1
  40505e:	951d      	str	r5, [sp, #116]	; 0x74
  405060:	442c      	add	r4, r5
  405062:	e527      	b.n	404ab4 <_svfprintf_r+0x1018>
  405064:	4e32      	ldr	r6, [pc, #200]	; (405130 <_svfprintf_r+0x1694>)
  405066:	4b33      	ldr	r3, [pc, #204]	; (405134 <_svfprintf_r+0x1698>)
  405068:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40506c:	f7ff b82e 	b.w	4040cc <_svfprintf_r+0x630>
  405070:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  405074:	f1c3 0301 	rsb	r3, r3, #1
  405078:	441a      	add	r2, r3
  40507a:	4613      	mov	r3, r2
  40507c:	920d      	str	r2, [sp, #52]	; 0x34
  40507e:	e778      	b.n	404f72 <_svfprintf_r+0x14d6>
  405080:	9b07      	ldr	r3, [sp, #28]
  405082:	f013 0301 	ands.w	r3, r3, #1
  405086:	f47f af11 	bne.w	404eac <_svfprintf_r+0x1410>
  40508a:	9313      	str	r3, [sp, #76]	; 0x4c
  40508c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40508e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405092:	e540      	b.n	404b16 <_svfprintf_r+0x107a>
  405094:	980e      	ldr	r0, [sp, #56]	; 0x38
  405096:	f898 3001 	ldrb.w	r3, [r8, #1]
  40509a:	6805      	ldr	r5, [r0, #0]
  40509c:	3004      	adds	r0, #4
  40509e:	2d00      	cmp	r5, #0
  4050a0:	900e      	str	r0, [sp, #56]	; 0x38
  4050a2:	46a0      	mov	r8, r4
  4050a4:	f6be ad53 	bge.w	403b4e <_svfprintf_r+0xb2>
  4050a8:	f04f 35ff 	mov.w	r5, #4294967295
  4050ac:	f7fe bd4f 	b.w	403b4e <_svfprintf_r+0xb2>
  4050b0:	f1bb 0f00 	cmp.w	fp, #0
  4050b4:	d102      	bne.n	4050bc <_svfprintf_r+0x1620>
  4050b6:	9b07      	ldr	r3, [sp, #28]
  4050b8:	07d8      	lsls	r0, r3, #31
  4050ba:	d507      	bpl.n	4050cc <_svfprintf_r+0x1630>
  4050bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4050be:	1c5d      	adds	r5, r3, #1
  4050c0:	eb05 030b 	add.w	r3, r5, fp
  4050c4:	930d      	str	r3, [sp, #52]	; 0x34
  4050c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4050ca:	e524      	b.n	404b16 <_svfprintf_r+0x107a>
  4050cc:	2301      	movs	r3, #1
  4050ce:	930d      	str	r3, [sp, #52]	; 0x34
  4050d0:	e521      	b.n	404b16 <_svfprintf_r+0x107a>
  4050d2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050d6:	f7ff b921 	b.w	40431c <_svfprintf_r+0x880>
  4050da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4050dc:	230c      	movs	r3, #12
  4050de:	6013      	str	r3, [r2, #0]
  4050e0:	f04f 30ff 	mov.w	r0, #4294967295
  4050e4:	f7fe bddc 	b.w	403ca0 <_svfprintf_r+0x204>
  4050e8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050ec:	f7ff b8f9 	b.w	4042e2 <_svfprintf_r+0x846>
  4050f0:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  4050f4:	e6d1      	b.n	404e9a <_svfprintf_r+0x13fe>
  4050f6:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4050fa:	f7fe bdd9 	b.w	403cb0 <_svfprintf_r+0x214>
  4050fe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405102:	f7ff b857 	b.w	4041b4 <_svfprintf_r+0x718>
  405106:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40510a:	f7ff b825 	b.w	404158 <_svfprintf_r+0x6bc>
  40510e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405112:	f7ff b94c 	b.w	4043ae <_svfprintf_r+0x912>
  405116:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40511a:	f7fe bff3 	b.w	404104 <_svfprintf_r+0x668>
  40511e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405122:	f7fe bfa3 	b.w	40406c <_svfprintf_r+0x5d0>
  405126:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40512a:	f7fe be33 	b.w	403d94 <_svfprintf_r+0x2f8>
  40512e:	bf00      	nop
  405130:	004098d0 	.word	0x004098d0
  405134:	004098cc 	.word	0x004098cc

00405138 <__sprint_r.part.0>:
  405138:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40513a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40513e:	049c      	lsls	r4, r3, #18
  405140:	4692      	mov	sl, r2
  405142:	d52c      	bpl.n	40519e <__sprint_r.part.0+0x66>
  405144:	6893      	ldr	r3, [r2, #8]
  405146:	6812      	ldr	r2, [r2, #0]
  405148:	b33b      	cbz	r3, 40519a <__sprint_r.part.0+0x62>
  40514a:	460f      	mov	r7, r1
  40514c:	4680      	mov	r8, r0
  40514e:	f102 0908 	add.w	r9, r2, #8
  405152:	e919 0060 	ldmdb	r9, {r5, r6}
  405156:	08b6      	lsrs	r6, r6, #2
  405158:	d017      	beq.n	40518a <__sprint_r.part.0+0x52>
  40515a:	3d04      	subs	r5, #4
  40515c:	2400      	movs	r4, #0
  40515e:	e001      	b.n	405164 <__sprint_r.part.0+0x2c>
  405160:	42a6      	cmp	r6, r4
  405162:	d010      	beq.n	405186 <__sprint_r.part.0+0x4e>
  405164:	463a      	mov	r2, r7
  405166:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40516a:	4640      	mov	r0, r8
  40516c:	f002 f92a 	bl	4073c4 <_fputwc_r>
  405170:	1c43      	adds	r3, r0, #1
  405172:	f104 0401 	add.w	r4, r4, #1
  405176:	d1f3      	bne.n	405160 <__sprint_r.part.0+0x28>
  405178:	2300      	movs	r3, #0
  40517a:	f8ca 3008 	str.w	r3, [sl, #8]
  40517e:	f8ca 3004 	str.w	r3, [sl, #4]
  405182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405186:	f8da 3008 	ldr.w	r3, [sl, #8]
  40518a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
  40518e:	f8ca 3008 	str.w	r3, [sl, #8]
  405192:	f109 0908 	add.w	r9, r9, #8
  405196:	2b00      	cmp	r3, #0
  405198:	d1db      	bne.n	405152 <__sprint_r.part.0+0x1a>
  40519a:	2000      	movs	r0, #0
  40519c:	e7ec      	b.n	405178 <__sprint_r.part.0+0x40>
  40519e:	f002 fa59 	bl	407654 <__sfvwrite_r>
  4051a2:	2300      	movs	r3, #0
  4051a4:	f8ca 3008 	str.w	r3, [sl, #8]
  4051a8:	f8ca 3004 	str.w	r3, [sl, #4]
  4051ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004051b0 <_vfiprintf_r>:
  4051b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4051b4:	b0ab      	sub	sp, #172	; 0xac
  4051b6:	461c      	mov	r4, r3
  4051b8:	9100      	str	r1, [sp, #0]
  4051ba:	4690      	mov	r8, r2
  4051bc:	9304      	str	r3, [sp, #16]
  4051be:	9005      	str	r0, [sp, #20]
  4051c0:	b118      	cbz	r0, 4051ca <_vfiprintf_r+0x1a>
  4051c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4051c4:	2b00      	cmp	r3, #0
  4051c6:	f000 80de 	beq.w	405386 <_vfiprintf_r+0x1d6>
  4051ca:	9800      	ldr	r0, [sp, #0]
  4051cc:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
  4051d0:	b28a      	uxth	r2, r1
  4051d2:	0495      	lsls	r5, r2, #18
  4051d4:	d407      	bmi.n	4051e6 <_vfiprintf_r+0x36>
  4051d6:	6e43      	ldr	r3, [r0, #100]	; 0x64
  4051d8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
  4051dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4051e0:	8182      	strh	r2, [r0, #12]
  4051e2:	6643      	str	r3, [r0, #100]	; 0x64
  4051e4:	b292      	uxth	r2, r2
  4051e6:	0711      	lsls	r1, r2, #28
  4051e8:	f140 80b1 	bpl.w	40534e <_vfiprintf_r+0x19e>
  4051ec:	9b00      	ldr	r3, [sp, #0]
  4051ee:	691b      	ldr	r3, [r3, #16]
  4051f0:	2b00      	cmp	r3, #0
  4051f2:	f000 80ac 	beq.w	40534e <_vfiprintf_r+0x19e>
  4051f6:	f002 021a 	and.w	r2, r2, #26
  4051fa:	2a0a      	cmp	r2, #10
  4051fc:	f000 80b5 	beq.w	40536a <_vfiprintf_r+0x1ba>
  405200:	2300      	movs	r3, #0
  405202:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
  405206:	9302      	str	r3, [sp, #8]
  405208:	930f      	str	r3, [sp, #60]	; 0x3c
  40520a:	930e      	str	r3, [sp, #56]	; 0x38
  40520c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  405210:	46da      	mov	sl, fp
  405212:	f898 3000 	ldrb.w	r3, [r8]
  405216:	4644      	mov	r4, r8
  405218:	b1fb      	cbz	r3, 40525a <_vfiprintf_r+0xaa>
  40521a:	2b25      	cmp	r3, #37	; 0x25
  40521c:	d102      	bne.n	405224 <_vfiprintf_r+0x74>
  40521e:	e01c      	b.n	40525a <_vfiprintf_r+0xaa>
  405220:	2b25      	cmp	r3, #37	; 0x25
  405222:	d003      	beq.n	40522c <_vfiprintf_r+0x7c>
  405224:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405228:	2b00      	cmp	r3, #0
  40522a:	d1f9      	bne.n	405220 <_vfiprintf_r+0x70>
  40522c:	ebc8 0504 	rsb	r5, r8, r4
  405230:	b19d      	cbz	r5, 40525a <_vfiprintf_r+0xaa>
  405232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405234:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405236:	f8ca 8000 	str.w	r8, [sl]
  40523a:	3301      	adds	r3, #1
  40523c:	442a      	add	r2, r5
  40523e:	2b07      	cmp	r3, #7
  405240:	f8ca 5004 	str.w	r5, [sl, #4]
  405244:	920f      	str	r2, [sp, #60]	; 0x3c
  405246:	930e      	str	r3, [sp, #56]	; 0x38
  405248:	dd7b      	ble.n	405342 <_vfiprintf_r+0x192>
  40524a:	2a00      	cmp	r2, #0
  40524c:	f040 8528 	bne.w	405ca0 <_vfiprintf_r+0xaf0>
  405250:	9b02      	ldr	r3, [sp, #8]
  405252:	920e      	str	r2, [sp, #56]	; 0x38
  405254:	442b      	add	r3, r5
  405256:	46da      	mov	sl, fp
  405258:	9302      	str	r3, [sp, #8]
  40525a:	7823      	ldrb	r3, [r4, #0]
  40525c:	2b00      	cmp	r3, #0
  40525e:	f000 843e 	beq.w	405ade <_vfiprintf_r+0x92e>
  405262:	2100      	movs	r1, #0
  405264:	f04f 0300 	mov.w	r3, #0
  405268:	f04f 32ff 	mov.w	r2, #4294967295
  40526c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405270:	f104 0801 	add.w	r8, r4, #1
  405274:	7863      	ldrb	r3, [r4, #1]
  405276:	9201      	str	r2, [sp, #4]
  405278:	4608      	mov	r0, r1
  40527a:	460e      	mov	r6, r1
  40527c:	460c      	mov	r4, r1
  40527e:	f108 0801 	add.w	r8, r8, #1
  405282:	f1a3 0220 	sub.w	r2, r3, #32
  405286:	2a58      	cmp	r2, #88	; 0x58
  405288:	f200 8393 	bhi.w	4059b2 <_vfiprintf_r+0x802>
  40528c:	e8df f012 	tbh	[pc, r2, lsl #1]
  405290:	03910346 	.word	0x03910346
  405294:	034e0391 	.word	0x034e0391
  405298:	03910391 	.word	0x03910391
  40529c:	03910391 	.word	0x03910391
  4052a0:	03910391 	.word	0x03910391
  4052a4:	02670289 	.word	0x02670289
  4052a8:	00800391 	.word	0x00800391
  4052ac:	0391026c 	.word	0x0391026c
  4052b0:	025901c6 	.word	0x025901c6
  4052b4:	02590259 	.word	0x02590259
  4052b8:	02590259 	.word	0x02590259
  4052bc:	02590259 	.word	0x02590259
  4052c0:	02590259 	.word	0x02590259
  4052c4:	03910391 	.word	0x03910391
  4052c8:	03910391 	.word	0x03910391
  4052cc:	03910391 	.word	0x03910391
  4052d0:	03910391 	.word	0x03910391
  4052d4:	03910391 	.word	0x03910391
  4052d8:	039101cb 	.word	0x039101cb
  4052dc:	03910391 	.word	0x03910391
  4052e0:	03910391 	.word	0x03910391
  4052e4:	03910391 	.word	0x03910391
  4052e8:	03910391 	.word	0x03910391
  4052ec:	02140391 	.word	0x02140391
  4052f0:	03910391 	.word	0x03910391
  4052f4:	03910391 	.word	0x03910391
  4052f8:	02ee0391 	.word	0x02ee0391
  4052fc:	03910391 	.word	0x03910391
  405300:	03910311 	.word	0x03910311
  405304:	03910391 	.word	0x03910391
  405308:	03910391 	.word	0x03910391
  40530c:	03910391 	.word	0x03910391
  405310:	03910391 	.word	0x03910391
  405314:	03340391 	.word	0x03340391
  405318:	0391038a 	.word	0x0391038a
  40531c:	03910391 	.word	0x03910391
  405320:	038a0367 	.word	0x038a0367
  405324:	03910391 	.word	0x03910391
  405328:	0391036c 	.word	0x0391036c
  40532c:	02950379 	.word	0x02950379
  405330:	02e90085 	.word	0x02e90085
  405334:	029b0391 	.word	0x029b0391
  405338:	02ba0391 	.word	0x02ba0391
  40533c:	03910391 	.word	0x03910391
  405340:	0353      	.short	0x0353
  405342:	f10a 0a08 	add.w	sl, sl, #8
  405346:	9b02      	ldr	r3, [sp, #8]
  405348:	442b      	add	r3, r5
  40534a:	9302      	str	r3, [sp, #8]
  40534c:	e785      	b.n	40525a <_vfiprintf_r+0xaa>
  40534e:	9900      	ldr	r1, [sp, #0]
  405350:	9805      	ldr	r0, [sp, #20]
  405352:	f000 fe61 	bl	406018 <__swsetup_r>
  405356:	2800      	cmp	r0, #0
  405358:	f040 8558 	bne.w	405e0c <_vfiprintf_r+0xc5c>
  40535c:	9b00      	ldr	r3, [sp, #0]
  40535e:	899a      	ldrh	r2, [r3, #12]
  405360:	f002 021a 	and.w	r2, r2, #26
  405364:	2a0a      	cmp	r2, #10
  405366:	f47f af4b 	bne.w	405200 <_vfiprintf_r+0x50>
  40536a:	9900      	ldr	r1, [sp, #0]
  40536c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  405370:	2b00      	cmp	r3, #0
  405372:	f6ff af45 	blt.w	405200 <_vfiprintf_r+0x50>
  405376:	4623      	mov	r3, r4
  405378:	4642      	mov	r2, r8
  40537a:	9805      	ldr	r0, [sp, #20]
  40537c:	f000 fe16 	bl	405fac <__sbprintf>
  405380:	b02b      	add	sp, #172	; 0xac
  405382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405386:	f001 ffb3 	bl	4072f0 <__sinit>
  40538a:	e71e      	b.n	4051ca <_vfiprintf_r+0x1a>
  40538c:	4264      	negs	r4, r4
  40538e:	9304      	str	r3, [sp, #16]
  405390:	f046 0604 	orr.w	r6, r6, #4
  405394:	f898 3000 	ldrb.w	r3, [r8]
  405398:	e771      	b.n	40527e <_vfiprintf_r+0xce>
  40539a:	2130      	movs	r1, #48	; 0x30
  40539c:	9804      	ldr	r0, [sp, #16]
  40539e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
  4053a2:	9901      	ldr	r1, [sp, #4]
  4053a4:	9406      	str	r4, [sp, #24]
  4053a6:	f04f 0300 	mov.w	r3, #0
  4053aa:	2278      	movs	r2, #120	; 0x78
  4053ac:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4053b0:	2900      	cmp	r1, #0
  4053b2:	4603      	mov	r3, r0
  4053b4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
  4053b8:	6804      	ldr	r4, [r0, #0]
  4053ba:	f103 0304 	add.w	r3, r3, #4
  4053be:	f04f 0500 	mov.w	r5, #0
  4053c2:	f046 0202 	orr.w	r2, r6, #2
  4053c6:	f2c0 8525 	blt.w	405e14 <_vfiprintf_r+0xc64>
  4053ca:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4053ce:	ea54 0205 	orrs.w	r2, r4, r5
  4053d2:	f046 0602 	orr.w	r6, r6, #2
  4053d6:	9304      	str	r3, [sp, #16]
  4053d8:	f040 84bf 	bne.w	405d5a <_vfiprintf_r+0xbaa>
  4053dc:	48b3      	ldr	r0, [pc, #716]	; (4056ac <_vfiprintf_r+0x4fc>)
  4053de:	9b01      	ldr	r3, [sp, #4]
  4053e0:	2b00      	cmp	r3, #0
  4053e2:	f040 841c 	bne.w	405c1e <_vfiprintf_r+0xa6e>
  4053e6:	4699      	mov	r9, r3
  4053e8:	2300      	movs	r3, #0
  4053ea:	9301      	str	r3, [sp, #4]
  4053ec:	9303      	str	r3, [sp, #12]
  4053ee:	465f      	mov	r7, fp
  4053f0:	9b01      	ldr	r3, [sp, #4]
  4053f2:	9a03      	ldr	r2, [sp, #12]
  4053f4:	4293      	cmp	r3, r2
  4053f6:	bfb8      	it	lt
  4053f8:	4613      	movlt	r3, r2
  4053fa:	461d      	mov	r5, r3
  4053fc:	f1b9 0f00 	cmp.w	r9, #0
  405400:	d000      	beq.n	405404 <_vfiprintf_r+0x254>
  405402:	3501      	adds	r5, #1
  405404:	f016 0302 	ands.w	r3, r6, #2
  405408:	9307      	str	r3, [sp, #28]
  40540a:	bf18      	it	ne
  40540c:	3502      	addne	r5, #2
  40540e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
  405412:	9308      	str	r3, [sp, #32]
  405414:	f040 82f1 	bne.w	4059fa <_vfiprintf_r+0x84a>
  405418:	9b06      	ldr	r3, [sp, #24]
  40541a:	1b5c      	subs	r4, r3, r5
  40541c:	2c00      	cmp	r4, #0
  40541e:	f340 82ec 	ble.w	4059fa <_vfiprintf_r+0x84a>
  405422:	2c10      	cmp	r4, #16
  405424:	f340 8556 	ble.w	405ed4 <_vfiprintf_r+0xd24>
  405428:	f8df 9284 	ldr.w	r9, [pc, #644]	; 4056b0 <_vfiprintf_r+0x500>
  40542c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
  405430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405432:	46d4      	mov	ip, sl
  405434:	2310      	movs	r3, #16
  405436:	46c2      	mov	sl, r8
  405438:	4670      	mov	r0, lr
  40543a:	46a8      	mov	r8, r5
  40543c:	464d      	mov	r5, r9
  40543e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405442:	e007      	b.n	405454 <_vfiprintf_r+0x2a4>
  405444:	f100 0e02 	add.w	lr, r0, #2
  405448:	f10c 0c08 	add.w	ip, ip, #8
  40544c:	4608      	mov	r0, r1
  40544e:	3c10      	subs	r4, #16
  405450:	2c10      	cmp	r4, #16
  405452:	dd13      	ble.n	40547c <_vfiprintf_r+0x2cc>
  405454:	1c41      	adds	r1, r0, #1
  405456:	3210      	adds	r2, #16
  405458:	2907      	cmp	r1, #7
  40545a:	920f      	str	r2, [sp, #60]	; 0x3c
  40545c:	f8cc 5000 	str.w	r5, [ip]
  405460:	f8cc 3004 	str.w	r3, [ip, #4]
  405464:	910e      	str	r1, [sp, #56]	; 0x38
  405466:	dded      	ble.n	405444 <_vfiprintf_r+0x294>
  405468:	2a00      	cmp	r2, #0
  40546a:	f040 82b7 	bne.w	4059dc <_vfiprintf_r+0x82c>
  40546e:	3c10      	subs	r4, #16
  405470:	2c10      	cmp	r4, #16
  405472:	4610      	mov	r0, r2
  405474:	f04f 0e01 	mov.w	lr, #1
  405478:	46dc      	mov	ip, fp
  40547a:	dceb      	bgt.n	405454 <_vfiprintf_r+0x2a4>
  40547c:	46a9      	mov	r9, r5
  40547e:	4670      	mov	r0, lr
  405480:	4645      	mov	r5, r8
  405482:	46d0      	mov	r8, sl
  405484:	46e2      	mov	sl, ip
  405486:	4422      	add	r2, r4
  405488:	2807      	cmp	r0, #7
  40548a:	920f      	str	r2, [sp, #60]	; 0x3c
  40548c:	f8ca 9000 	str.w	r9, [sl]
  405490:	f8ca 4004 	str.w	r4, [sl, #4]
  405494:	900e      	str	r0, [sp, #56]	; 0x38
  405496:	f300 8375 	bgt.w	405b84 <_vfiprintf_r+0x9d4>
  40549a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  40549e:	f10a 0a08 	add.w	sl, sl, #8
  4054a2:	f100 0e01 	add.w	lr, r0, #1
  4054a6:	2b00      	cmp	r3, #0
  4054a8:	f040 82b0 	bne.w	405a0c <_vfiprintf_r+0x85c>
  4054ac:	9b07      	ldr	r3, [sp, #28]
  4054ae:	2b00      	cmp	r3, #0
  4054b0:	f000 82c3 	beq.w	405a3a <_vfiprintf_r+0x88a>
  4054b4:	3202      	adds	r2, #2
  4054b6:	a90c      	add	r1, sp, #48	; 0x30
  4054b8:	2302      	movs	r3, #2
  4054ba:	f1be 0f07 	cmp.w	lr, #7
  4054be:	920f      	str	r2, [sp, #60]	; 0x3c
  4054c0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  4054c4:	e88a 000a 	stmia.w	sl, {r1, r3}
  4054c8:	f340 8378 	ble.w	405bbc <_vfiprintf_r+0xa0c>
  4054cc:	2a00      	cmp	r2, #0
  4054ce:	f040 840a 	bne.w	405ce6 <_vfiprintf_r+0xb36>
  4054d2:	9b08      	ldr	r3, [sp, #32]
  4054d4:	2b80      	cmp	r3, #128	; 0x80
  4054d6:	f04f 0e01 	mov.w	lr, #1
  4054da:	4610      	mov	r0, r2
  4054dc:	46da      	mov	sl, fp
  4054de:	f040 82b0 	bne.w	405a42 <_vfiprintf_r+0x892>
  4054e2:	9b06      	ldr	r3, [sp, #24]
  4054e4:	1b5c      	subs	r4, r3, r5
  4054e6:	2c00      	cmp	r4, #0
  4054e8:	f340 82ab 	ble.w	405a42 <_vfiprintf_r+0x892>
  4054ec:	2c10      	cmp	r4, #16
  4054ee:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 4056b4 <_vfiprintf_r+0x504>
  4054f2:	f340 850b 	ble.w	405f0c <_vfiprintf_r+0xd5c>
  4054f6:	46d6      	mov	lr, sl
  4054f8:	2310      	movs	r3, #16
  4054fa:	46c2      	mov	sl, r8
  4054fc:	46a8      	mov	r8, r5
  4054fe:	464d      	mov	r5, r9
  405500:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405504:	e007      	b.n	405516 <_vfiprintf_r+0x366>
  405506:	f100 0c02 	add.w	ip, r0, #2
  40550a:	f10e 0e08 	add.w	lr, lr, #8
  40550e:	4608      	mov	r0, r1
  405510:	3c10      	subs	r4, #16
  405512:	2c10      	cmp	r4, #16
  405514:	dd13      	ble.n	40553e <_vfiprintf_r+0x38e>
  405516:	1c41      	adds	r1, r0, #1
  405518:	3210      	adds	r2, #16
  40551a:	2907      	cmp	r1, #7
  40551c:	920f      	str	r2, [sp, #60]	; 0x3c
  40551e:	f8ce 5000 	str.w	r5, [lr]
  405522:	f8ce 3004 	str.w	r3, [lr, #4]
  405526:	910e      	str	r1, [sp, #56]	; 0x38
  405528:	dded      	ble.n	405506 <_vfiprintf_r+0x356>
  40552a:	2a00      	cmp	r2, #0
  40552c:	f040 8315 	bne.w	405b5a <_vfiprintf_r+0x9aa>
  405530:	3c10      	subs	r4, #16
  405532:	2c10      	cmp	r4, #16
  405534:	f04f 0c01 	mov.w	ip, #1
  405538:	4610      	mov	r0, r2
  40553a:	46de      	mov	lr, fp
  40553c:	dceb      	bgt.n	405516 <_vfiprintf_r+0x366>
  40553e:	46a9      	mov	r9, r5
  405540:	4645      	mov	r5, r8
  405542:	46d0      	mov	r8, sl
  405544:	46f2      	mov	sl, lr
  405546:	4422      	add	r2, r4
  405548:	f1bc 0f07 	cmp.w	ip, #7
  40554c:	920f      	str	r2, [sp, #60]	; 0x3c
  40554e:	f8ca 9000 	str.w	r9, [sl]
  405552:	f8ca 4004 	str.w	r4, [sl, #4]
  405556:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  40555a:	f300 83d2 	bgt.w	405d02 <_vfiprintf_r+0xb52>
  40555e:	9b01      	ldr	r3, [sp, #4]
  405560:	9903      	ldr	r1, [sp, #12]
  405562:	1a5c      	subs	r4, r3, r1
  405564:	2c00      	cmp	r4, #0
  405566:	f10a 0a08 	add.w	sl, sl, #8
  40556a:	f10c 0e01 	add.w	lr, ip, #1
  40556e:	4660      	mov	r0, ip
  405570:	f300 826d 	bgt.w	405a4e <_vfiprintf_r+0x89e>
  405574:	9903      	ldr	r1, [sp, #12]
  405576:	f8ca 7000 	str.w	r7, [sl]
  40557a:	440a      	add	r2, r1
  40557c:	f1be 0f07 	cmp.w	lr, #7
  405580:	920f      	str	r2, [sp, #60]	; 0x3c
  405582:	f8ca 1004 	str.w	r1, [sl, #4]
  405586:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  40558a:	f340 82ce 	ble.w	405b2a <_vfiprintf_r+0x97a>
  40558e:	2a00      	cmp	r2, #0
  405590:	f040 833a 	bne.w	405c08 <_vfiprintf_r+0xa58>
  405594:	0770      	lsls	r0, r6, #29
  405596:	920e      	str	r2, [sp, #56]	; 0x38
  405598:	d538      	bpl.n	40560c <_vfiprintf_r+0x45c>
  40559a:	9b06      	ldr	r3, [sp, #24]
  40559c:	1b5c      	subs	r4, r3, r5
  40559e:	2c00      	cmp	r4, #0
  4055a0:	dd34      	ble.n	40560c <_vfiprintf_r+0x45c>
  4055a2:	46da      	mov	sl, fp
  4055a4:	2c10      	cmp	r4, #16
  4055a6:	f340 84ab 	ble.w	405f00 <_vfiprintf_r+0xd50>
  4055aa:	f8df 9104 	ldr.w	r9, [pc, #260]	; 4056b0 <_vfiprintf_r+0x500>
  4055ae:	990e      	ldr	r1, [sp, #56]	; 0x38
  4055b0:	464f      	mov	r7, r9
  4055b2:	2610      	movs	r6, #16
  4055b4:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4055b8:	e006      	b.n	4055c8 <_vfiprintf_r+0x418>
  4055ba:	1c88      	adds	r0, r1, #2
  4055bc:	f10a 0a08 	add.w	sl, sl, #8
  4055c0:	4619      	mov	r1, r3
  4055c2:	3c10      	subs	r4, #16
  4055c4:	2c10      	cmp	r4, #16
  4055c6:	dd13      	ble.n	4055f0 <_vfiprintf_r+0x440>
  4055c8:	1c4b      	adds	r3, r1, #1
  4055ca:	3210      	adds	r2, #16
  4055cc:	2b07      	cmp	r3, #7
  4055ce:	920f      	str	r2, [sp, #60]	; 0x3c
  4055d0:	f8ca 7000 	str.w	r7, [sl]
  4055d4:	f8ca 6004 	str.w	r6, [sl, #4]
  4055d8:	930e      	str	r3, [sp, #56]	; 0x38
  4055da:	ddee      	ble.n	4055ba <_vfiprintf_r+0x40a>
  4055dc:	2a00      	cmp	r2, #0
  4055de:	f040 828e 	bne.w	405afe <_vfiprintf_r+0x94e>
  4055e2:	3c10      	subs	r4, #16
  4055e4:	2c10      	cmp	r4, #16
  4055e6:	f04f 0001 	mov.w	r0, #1
  4055ea:	4611      	mov	r1, r2
  4055ec:	46da      	mov	sl, fp
  4055ee:	dceb      	bgt.n	4055c8 <_vfiprintf_r+0x418>
  4055f0:	46b9      	mov	r9, r7
  4055f2:	4422      	add	r2, r4
  4055f4:	2807      	cmp	r0, #7
  4055f6:	920f      	str	r2, [sp, #60]	; 0x3c
  4055f8:	f8ca 9000 	str.w	r9, [sl]
  4055fc:	f8ca 4004 	str.w	r4, [sl, #4]
  405600:	900e      	str	r0, [sp, #56]	; 0x38
  405602:	f340 829b 	ble.w	405b3c <_vfiprintf_r+0x98c>
  405606:	2a00      	cmp	r2, #0
  405608:	f040 8425 	bne.w	405e56 <_vfiprintf_r+0xca6>
  40560c:	9b02      	ldr	r3, [sp, #8]
  40560e:	9a06      	ldr	r2, [sp, #24]
  405610:	42aa      	cmp	r2, r5
  405612:	bfac      	ite	ge
  405614:	189b      	addge	r3, r3, r2
  405616:	195b      	addlt	r3, r3, r5
  405618:	9302      	str	r3, [sp, #8]
  40561a:	e299      	b.n	405b50 <_vfiprintf_r+0x9a0>
  40561c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  405620:	f898 3000 	ldrb.w	r3, [r8]
  405624:	e62b      	b.n	40527e <_vfiprintf_r+0xce>
  405626:	9406      	str	r4, [sp, #24]
  405628:	2900      	cmp	r1, #0
  40562a:	f040 84af 	bne.w	405f8c <_vfiprintf_r+0xddc>
  40562e:	f046 0610 	orr.w	r6, r6, #16
  405632:	06b3      	lsls	r3, r6, #26
  405634:	f140 8312 	bpl.w	405c5c <_vfiprintf_r+0xaac>
  405638:	9904      	ldr	r1, [sp, #16]
  40563a:	3107      	adds	r1, #7
  40563c:	f021 0107 	bic.w	r1, r1, #7
  405640:	e9d1 2300 	ldrd	r2, r3, [r1]
  405644:	3108      	adds	r1, #8
  405646:	9104      	str	r1, [sp, #16]
  405648:	4614      	mov	r4, r2
  40564a:	461d      	mov	r5, r3
  40564c:	2a00      	cmp	r2, #0
  40564e:	f173 0300 	sbcs.w	r3, r3, #0
  405652:	f2c0 8386 	blt.w	405d62 <_vfiprintf_r+0xbb2>
  405656:	9b01      	ldr	r3, [sp, #4]
  405658:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  40565c:	2b00      	cmp	r3, #0
  40565e:	f2c0 831a 	blt.w	405c96 <_vfiprintf_r+0xae6>
  405662:	ea54 0305 	orrs.w	r3, r4, r5
  405666:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  40566a:	f000 80ed 	beq.w	405848 <_vfiprintf_r+0x698>
  40566e:	2d00      	cmp	r5, #0
  405670:	bf08      	it	eq
  405672:	2c0a      	cmpeq	r4, #10
  405674:	f0c0 80ed 	bcc.w	405852 <_vfiprintf_r+0x6a2>
  405678:	465f      	mov	r7, fp
  40567a:	4620      	mov	r0, r4
  40567c:	4629      	mov	r1, r5
  40567e:	220a      	movs	r2, #10
  405680:	2300      	movs	r3, #0
  405682:	f003 fee7 	bl	409454 <__aeabi_uldivmod>
  405686:	3230      	adds	r2, #48	; 0x30
  405688:	f807 2d01 	strb.w	r2, [r7, #-1]!
  40568c:	4620      	mov	r0, r4
  40568e:	4629      	mov	r1, r5
  405690:	2300      	movs	r3, #0
  405692:	220a      	movs	r2, #10
  405694:	f003 fede 	bl	409454 <__aeabi_uldivmod>
  405698:	4604      	mov	r4, r0
  40569a:	460d      	mov	r5, r1
  40569c:	ea54 0305 	orrs.w	r3, r4, r5
  4056a0:	d1eb      	bne.n	40567a <_vfiprintf_r+0x4ca>
  4056a2:	ebc7 030b 	rsb	r3, r7, fp
  4056a6:	9303      	str	r3, [sp, #12]
  4056a8:	e6a2      	b.n	4053f0 <_vfiprintf_r+0x240>
  4056aa:	bf00      	nop
  4056ac:	004098e8 	.word	0x004098e8
  4056b0:	00409928 	.word	0x00409928
  4056b4:	00409918 	.word	0x00409918
  4056b8:	9406      	str	r4, [sp, #24]
  4056ba:	2900      	cmp	r1, #0
  4056bc:	f040 8462 	bne.w	405f84 <_vfiprintf_r+0xdd4>
  4056c0:	f046 0610 	orr.w	r6, r6, #16
  4056c4:	f016 0320 	ands.w	r3, r6, #32
  4056c8:	f000 82ae 	beq.w	405c28 <_vfiprintf_r+0xa78>
  4056cc:	9b04      	ldr	r3, [sp, #16]
  4056ce:	3307      	adds	r3, #7
  4056d0:	f023 0307 	bic.w	r3, r3, #7
  4056d4:	f04f 0200 	mov.w	r2, #0
  4056d8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  4056dc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4056e0:	f103 0208 	add.w	r2, r3, #8
  4056e4:	9b01      	ldr	r3, [sp, #4]
  4056e6:	9204      	str	r2, [sp, #16]
  4056e8:	2b00      	cmp	r3, #0
  4056ea:	f2c0 8174 	blt.w	4059d6 <_vfiprintf_r+0x826>
  4056ee:	ea54 0305 	orrs.w	r3, r4, r5
  4056f2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4056f6:	f040 816e 	bne.w	4059d6 <_vfiprintf_r+0x826>
  4056fa:	9b01      	ldr	r3, [sp, #4]
  4056fc:	2b00      	cmp	r3, #0
  4056fe:	f000 8430 	beq.w	405f62 <_vfiprintf_r+0xdb2>
  405702:	f04f 0900 	mov.w	r9, #0
  405706:	2400      	movs	r4, #0
  405708:	2500      	movs	r5, #0
  40570a:	465f      	mov	r7, fp
  40570c:	08e2      	lsrs	r2, r4, #3
  40570e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  405712:	08e9      	lsrs	r1, r5, #3
  405714:	f004 0307 	and.w	r3, r4, #7
  405718:	460d      	mov	r5, r1
  40571a:	4614      	mov	r4, r2
  40571c:	3330      	adds	r3, #48	; 0x30
  40571e:	ea54 0205 	orrs.w	r2, r4, r5
  405722:	f807 3d01 	strb.w	r3, [r7, #-1]!
  405726:	d1f1      	bne.n	40570c <_vfiprintf_r+0x55c>
  405728:	07f4      	lsls	r4, r6, #31
  40572a:	d5ba      	bpl.n	4056a2 <_vfiprintf_r+0x4f2>
  40572c:	2b30      	cmp	r3, #48	; 0x30
  40572e:	d0b8      	beq.n	4056a2 <_vfiprintf_r+0x4f2>
  405730:	2230      	movs	r2, #48	; 0x30
  405732:	1e7b      	subs	r3, r7, #1
  405734:	f807 2c01 	strb.w	r2, [r7, #-1]
  405738:	ebc3 020b 	rsb	r2, r3, fp
  40573c:	9203      	str	r2, [sp, #12]
  40573e:	461f      	mov	r7, r3
  405740:	e656      	b.n	4053f0 <_vfiprintf_r+0x240>
  405742:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405746:	2400      	movs	r4, #0
  405748:	f818 3b01 	ldrb.w	r3, [r8], #1
  40574c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405750:	eb02 0444 	add.w	r4, r2, r4, lsl #1
  405754:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405758:	2a09      	cmp	r2, #9
  40575a:	d9f5      	bls.n	405748 <_vfiprintf_r+0x598>
  40575c:	e591      	b.n	405282 <_vfiprintf_r+0xd2>
  40575e:	f898 3000 	ldrb.w	r3, [r8]
  405762:	2101      	movs	r1, #1
  405764:	202b      	movs	r0, #43	; 0x2b
  405766:	e58a      	b.n	40527e <_vfiprintf_r+0xce>
  405768:	f898 3000 	ldrb.w	r3, [r8]
  40576c:	2b2a      	cmp	r3, #42	; 0x2a
  40576e:	f108 0501 	add.w	r5, r8, #1
  405772:	f000 83dd 	beq.w	405f30 <_vfiprintf_r+0xd80>
  405776:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  40577a:	2a09      	cmp	r2, #9
  40577c:	46a8      	mov	r8, r5
  40577e:	bf98      	it	ls
  405780:	2500      	movls	r5, #0
  405782:	f200 83ce 	bhi.w	405f22 <_vfiprintf_r+0xd72>
  405786:	f818 3b01 	ldrb.w	r3, [r8], #1
  40578a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40578e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
  405792:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  405796:	2a09      	cmp	r2, #9
  405798:	d9f5      	bls.n	405786 <_vfiprintf_r+0x5d6>
  40579a:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
  40579e:	9201      	str	r2, [sp, #4]
  4057a0:	e56f      	b.n	405282 <_vfiprintf_r+0xd2>
  4057a2:	9a04      	ldr	r2, [sp, #16]
  4057a4:	6814      	ldr	r4, [r2, #0]
  4057a6:	4613      	mov	r3, r2
  4057a8:	2c00      	cmp	r4, #0
  4057aa:	f103 0304 	add.w	r3, r3, #4
  4057ae:	f6ff aded 	blt.w	40538c <_vfiprintf_r+0x1dc>
  4057b2:	9304      	str	r3, [sp, #16]
  4057b4:	f898 3000 	ldrb.w	r3, [r8]
  4057b8:	e561      	b.n	40527e <_vfiprintf_r+0xce>
  4057ba:	9406      	str	r4, [sp, #24]
  4057bc:	2900      	cmp	r1, #0
  4057be:	d081      	beq.n	4056c4 <_vfiprintf_r+0x514>
  4057c0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4057c4:	e77e      	b.n	4056c4 <_vfiprintf_r+0x514>
  4057c6:	9a04      	ldr	r2, [sp, #16]
  4057c8:	9406      	str	r4, [sp, #24]
  4057ca:	6817      	ldr	r7, [r2, #0]
  4057cc:	f04f 0300 	mov.w	r3, #0
  4057d0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4057d4:	1d14      	adds	r4, r2, #4
  4057d6:	9b01      	ldr	r3, [sp, #4]
  4057d8:	2f00      	cmp	r7, #0
  4057da:	f000 8386 	beq.w	405eea <_vfiprintf_r+0xd3a>
  4057de:	2b00      	cmp	r3, #0
  4057e0:	f2c0 835f 	blt.w	405ea2 <_vfiprintf_r+0xcf2>
  4057e4:	461a      	mov	r2, r3
  4057e6:	2100      	movs	r1, #0
  4057e8:	4638      	mov	r0, r7
  4057ea:	f002 f961 	bl	407ab0 <memchr>
  4057ee:	2800      	cmp	r0, #0
  4057f0:	f000 838f 	beq.w	405f12 <_vfiprintf_r+0xd62>
  4057f4:	1bc3      	subs	r3, r0, r7
  4057f6:	9303      	str	r3, [sp, #12]
  4057f8:	2300      	movs	r3, #0
  4057fa:	9404      	str	r4, [sp, #16]
  4057fc:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405800:	9301      	str	r3, [sp, #4]
  405802:	e5f5      	b.n	4053f0 <_vfiprintf_r+0x240>
  405804:	9406      	str	r4, [sp, #24]
  405806:	2900      	cmp	r1, #0
  405808:	f040 83b9 	bne.w	405f7e <_vfiprintf_r+0xdce>
  40580c:	f016 0920 	ands.w	r9, r6, #32
  405810:	d135      	bne.n	40587e <_vfiprintf_r+0x6ce>
  405812:	f016 0310 	ands.w	r3, r6, #16
  405816:	d103      	bne.n	405820 <_vfiprintf_r+0x670>
  405818:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  40581c:	f040 832a 	bne.w	405e74 <_vfiprintf_r+0xcc4>
  405820:	9a04      	ldr	r2, [sp, #16]
  405822:	4613      	mov	r3, r2
  405824:	6814      	ldr	r4, [r2, #0]
  405826:	9a01      	ldr	r2, [sp, #4]
  405828:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  40582c:	2a00      	cmp	r2, #0
  40582e:	f103 0304 	add.w	r3, r3, #4
  405832:	f04f 0500 	mov.w	r5, #0
  405836:	f2c0 8332 	blt.w	405e9e <_vfiprintf_r+0xcee>
  40583a:	ea54 0205 	orrs.w	r2, r4, r5
  40583e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405842:	9304      	str	r3, [sp, #16]
  405844:	f47f af13 	bne.w	40566e <_vfiprintf_r+0x4be>
  405848:	9b01      	ldr	r3, [sp, #4]
  40584a:	2b00      	cmp	r3, #0
  40584c:	f43f adcc 	beq.w	4053e8 <_vfiprintf_r+0x238>
  405850:	2400      	movs	r4, #0
  405852:	af2a      	add	r7, sp, #168	; 0xa8
  405854:	3430      	adds	r4, #48	; 0x30
  405856:	f807 4d41 	strb.w	r4, [r7, #-65]!
  40585a:	ebc7 030b 	rsb	r3, r7, fp
  40585e:	9303      	str	r3, [sp, #12]
  405860:	e5c6      	b.n	4053f0 <_vfiprintf_r+0x240>
  405862:	f046 0620 	orr.w	r6, r6, #32
  405866:	f898 3000 	ldrb.w	r3, [r8]
  40586a:	e508      	b.n	40527e <_vfiprintf_r+0xce>
  40586c:	9406      	str	r4, [sp, #24]
  40586e:	2900      	cmp	r1, #0
  405870:	f040 836e 	bne.w	405f50 <_vfiprintf_r+0xda0>
  405874:	f046 0610 	orr.w	r6, r6, #16
  405878:	f016 0920 	ands.w	r9, r6, #32
  40587c:	d0c9      	beq.n	405812 <_vfiprintf_r+0x662>
  40587e:	9b04      	ldr	r3, [sp, #16]
  405880:	3307      	adds	r3, #7
  405882:	f023 0307 	bic.w	r3, r3, #7
  405886:	f04f 0200 	mov.w	r2, #0
  40588a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  40588e:	e9d3 4500 	ldrd	r4, r5, [r3]
  405892:	f103 0208 	add.w	r2, r3, #8
  405896:	9b01      	ldr	r3, [sp, #4]
  405898:	9204      	str	r2, [sp, #16]
  40589a:	2b00      	cmp	r3, #0
  40589c:	f2c0 81f9 	blt.w	405c92 <_vfiprintf_r+0xae2>
  4058a0:	ea54 0305 	orrs.w	r3, r4, r5
  4058a4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4058a8:	f04f 0900 	mov.w	r9, #0
  4058ac:	f47f aedf 	bne.w	40566e <_vfiprintf_r+0x4be>
  4058b0:	e7ca      	b.n	405848 <_vfiprintf_r+0x698>
  4058b2:	9406      	str	r4, [sp, #24]
  4058b4:	2900      	cmp	r1, #0
  4058b6:	f040 8351 	bne.w	405f5c <_vfiprintf_r+0xdac>
  4058ba:	06b2      	lsls	r2, r6, #26
  4058bc:	48ae      	ldr	r0, [pc, #696]	; (405b78 <_vfiprintf_r+0x9c8>)
  4058be:	d541      	bpl.n	405944 <_vfiprintf_r+0x794>
  4058c0:	9a04      	ldr	r2, [sp, #16]
  4058c2:	3207      	adds	r2, #7
  4058c4:	f022 0207 	bic.w	r2, r2, #7
  4058c8:	e9d2 4500 	ldrd	r4, r5, [r2]
  4058cc:	f102 0108 	add.w	r1, r2, #8
  4058d0:	9104      	str	r1, [sp, #16]
  4058d2:	f016 0901 	ands.w	r9, r6, #1
  4058d6:	f000 8177 	beq.w	405bc8 <_vfiprintf_r+0xa18>
  4058da:	ea54 0205 	orrs.w	r2, r4, r5
  4058de:	f040 8226 	bne.w	405d2e <_vfiprintf_r+0xb7e>
  4058e2:	f04f 0300 	mov.w	r3, #0
  4058e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4058ea:	9b01      	ldr	r3, [sp, #4]
  4058ec:	2b00      	cmp	r3, #0
  4058ee:	f2c0 8196 	blt.w	405c1e <_vfiprintf_r+0xa6e>
  4058f2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  4058f6:	e572      	b.n	4053de <_vfiprintf_r+0x22e>
  4058f8:	9a04      	ldr	r2, [sp, #16]
  4058fa:	9406      	str	r4, [sp, #24]
  4058fc:	6813      	ldr	r3, [r2, #0]
  4058fe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  405902:	4613      	mov	r3, r2
  405904:	f04f 0100 	mov.w	r1, #0
  405908:	2501      	movs	r5, #1
  40590a:	3304      	adds	r3, #4
  40590c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
  405910:	9304      	str	r3, [sp, #16]
  405912:	9503      	str	r5, [sp, #12]
  405914:	af10      	add	r7, sp, #64	; 0x40
  405916:	2300      	movs	r3, #0
  405918:	9301      	str	r3, [sp, #4]
  40591a:	e573      	b.n	405404 <_vfiprintf_r+0x254>
  40591c:	f898 3000 	ldrb.w	r3, [r8]
  405920:	2800      	cmp	r0, #0
  405922:	f47f acac 	bne.w	40527e <_vfiprintf_r+0xce>
  405926:	2101      	movs	r1, #1
  405928:	2020      	movs	r0, #32
  40592a:	e4a8      	b.n	40527e <_vfiprintf_r+0xce>
  40592c:	f046 0601 	orr.w	r6, r6, #1
  405930:	f898 3000 	ldrb.w	r3, [r8]
  405934:	e4a3      	b.n	40527e <_vfiprintf_r+0xce>
  405936:	9406      	str	r4, [sp, #24]
  405938:	2900      	cmp	r1, #0
  40593a:	f040 830c 	bne.w	405f56 <_vfiprintf_r+0xda6>
  40593e:	06b2      	lsls	r2, r6, #26
  405940:	488e      	ldr	r0, [pc, #568]	; (405b7c <_vfiprintf_r+0x9cc>)
  405942:	d4bd      	bmi.n	4058c0 <_vfiprintf_r+0x710>
  405944:	9904      	ldr	r1, [sp, #16]
  405946:	06f7      	lsls	r7, r6, #27
  405948:	460a      	mov	r2, r1
  40594a:	f100 819d 	bmi.w	405c88 <_vfiprintf_r+0xad8>
  40594e:	0675      	lsls	r5, r6, #25
  405950:	f140 819a 	bpl.w	405c88 <_vfiprintf_r+0xad8>
  405954:	3204      	adds	r2, #4
  405956:	880c      	ldrh	r4, [r1, #0]
  405958:	9204      	str	r2, [sp, #16]
  40595a:	2500      	movs	r5, #0
  40595c:	e7b9      	b.n	4058d2 <_vfiprintf_r+0x722>
  40595e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  405962:	f898 3000 	ldrb.w	r3, [r8]
  405966:	e48a      	b.n	40527e <_vfiprintf_r+0xce>
  405968:	f898 3000 	ldrb.w	r3, [r8]
  40596c:	2b6c      	cmp	r3, #108	; 0x6c
  40596e:	bf03      	ittte	eq
  405970:	f898 3001 	ldrbeq.w	r3, [r8, #1]
  405974:	f046 0620 	orreq.w	r6, r6, #32
  405978:	f108 0801 	addeq.w	r8, r8, #1
  40597c:	f046 0610 	orrne.w	r6, r6, #16
  405980:	e47d      	b.n	40527e <_vfiprintf_r+0xce>
  405982:	2900      	cmp	r1, #0
  405984:	f040 8309 	bne.w	405f9a <_vfiprintf_r+0xdea>
  405988:	06b4      	lsls	r4, r6, #26
  40598a:	f140 821c 	bpl.w	405dc6 <_vfiprintf_r+0xc16>
  40598e:	9a04      	ldr	r2, [sp, #16]
  405990:	9902      	ldr	r1, [sp, #8]
  405992:	6813      	ldr	r3, [r2, #0]
  405994:	17cd      	asrs	r5, r1, #31
  405996:	4608      	mov	r0, r1
  405998:	3204      	adds	r2, #4
  40599a:	4629      	mov	r1, r5
  40599c:	9204      	str	r2, [sp, #16]
  40599e:	e9c3 0100 	strd	r0, r1, [r3]
  4059a2:	e436      	b.n	405212 <_vfiprintf_r+0x62>
  4059a4:	9406      	str	r4, [sp, #24]
  4059a6:	2900      	cmp	r1, #0
  4059a8:	f43f ae43 	beq.w	405632 <_vfiprintf_r+0x482>
  4059ac:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  4059b0:	e63f      	b.n	405632 <_vfiprintf_r+0x482>
  4059b2:	9406      	str	r4, [sp, #24]
  4059b4:	2900      	cmp	r1, #0
  4059b6:	f040 82ed 	bne.w	405f94 <_vfiprintf_r+0xde4>
  4059ba:	2b00      	cmp	r3, #0
  4059bc:	f000 808f 	beq.w	405ade <_vfiprintf_r+0x92e>
  4059c0:	2501      	movs	r5, #1
  4059c2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
  4059c6:	f04f 0300 	mov.w	r3, #0
  4059ca:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  4059ce:	9503      	str	r5, [sp, #12]
  4059d0:	af10      	add	r7, sp, #64	; 0x40
  4059d2:	e7a0      	b.n	405916 <_vfiprintf_r+0x766>
  4059d4:	9304      	str	r3, [sp, #16]
  4059d6:	f04f 0900 	mov.w	r9, #0
  4059da:	e696      	b.n	40570a <_vfiprintf_r+0x55a>
  4059dc:	aa0d      	add	r2, sp, #52	; 0x34
  4059de:	9900      	ldr	r1, [sp, #0]
  4059e0:	9309      	str	r3, [sp, #36]	; 0x24
  4059e2:	4648      	mov	r0, r9
  4059e4:	f7ff fba8 	bl	405138 <__sprint_r.part.0>
  4059e8:	2800      	cmp	r0, #0
  4059ea:	d17f      	bne.n	405aec <_vfiprintf_r+0x93c>
  4059ec:	980e      	ldr	r0, [sp, #56]	; 0x38
  4059ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4059f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4059f2:	f100 0e01 	add.w	lr, r0, #1
  4059f6:	46dc      	mov	ip, fp
  4059f8:	e529      	b.n	40544e <_vfiprintf_r+0x29e>
  4059fa:	980e      	ldr	r0, [sp, #56]	; 0x38
  4059fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4059fe:	f100 0e01 	add.w	lr, r0, #1
  405a02:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405a06:	2b00      	cmp	r3, #0
  405a08:	f43f ad50 	beq.w	4054ac <_vfiprintf_r+0x2fc>
  405a0c:	3201      	adds	r2, #1
  405a0e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  405a12:	2301      	movs	r3, #1
  405a14:	f1be 0f07 	cmp.w	lr, #7
  405a18:	920f      	str	r2, [sp, #60]	; 0x3c
  405a1a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405a1e:	e88a 000a 	stmia.w	sl, {r1, r3}
  405a22:	f340 80bf 	ble.w	405ba4 <_vfiprintf_r+0x9f4>
  405a26:	2a00      	cmp	r2, #0
  405a28:	f040 814e 	bne.w	405cc8 <_vfiprintf_r+0xb18>
  405a2c:	9907      	ldr	r1, [sp, #28]
  405a2e:	2900      	cmp	r1, #0
  405a30:	f040 80be 	bne.w	405bb0 <_vfiprintf_r+0xa00>
  405a34:	469e      	mov	lr, r3
  405a36:	4610      	mov	r0, r2
  405a38:	46da      	mov	sl, fp
  405a3a:	9b08      	ldr	r3, [sp, #32]
  405a3c:	2b80      	cmp	r3, #128	; 0x80
  405a3e:	f43f ad50 	beq.w	4054e2 <_vfiprintf_r+0x332>
  405a42:	9b01      	ldr	r3, [sp, #4]
  405a44:	9903      	ldr	r1, [sp, #12]
  405a46:	1a5c      	subs	r4, r3, r1
  405a48:	2c00      	cmp	r4, #0
  405a4a:	f77f ad93 	ble.w	405574 <_vfiprintf_r+0x3c4>
  405a4e:	2c10      	cmp	r4, #16
  405a50:	f8df 912c 	ldr.w	r9, [pc, #300]	; 405b80 <_vfiprintf_r+0x9d0>
  405a54:	dd25      	ble.n	405aa2 <_vfiprintf_r+0x8f2>
  405a56:	46d4      	mov	ip, sl
  405a58:	2310      	movs	r3, #16
  405a5a:	46c2      	mov	sl, r8
  405a5c:	46a8      	mov	r8, r5
  405a5e:	464d      	mov	r5, r9
  405a60:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405a64:	e007      	b.n	405a76 <_vfiprintf_r+0x8c6>
  405a66:	f100 0e02 	add.w	lr, r0, #2
  405a6a:	f10c 0c08 	add.w	ip, ip, #8
  405a6e:	4608      	mov	r0, r1
  405a70:	3c10      	subs	r4, #16
  405a72:	2c10      	cmp	r4, #16
  405a74:	dd11      	ble.n	405a9a <_vfiprintf_r+0x8ea>
  405a76:	1c41      	adds	r1, r0, #1
  405a78:	3210      	adds	r2, #16
  405a7a:	2907      	cmp	r1, #7
  405a7c:	920f      	str	r2, [sp, #60]	; 0x3c
  405a7e:	f8cc 5000 	str.w	r5, [ip]
  405a82:	f8cc 3004 	str.w	r3, [ip, #4]
  405a86:	910e      	str	r1, [sp, #56]	; 0x38
  405a88:	dded      	ble.n	405a66 <_vfiprintf_r+0x8b6>
  405a8a:	b9d2      	cbnz	r2, 405ac2 <_vfiprintf_r+0x912>
  405a8c:	3c10      	subs	r4, #16
  405a8e:	2c10      	cmp	r4, #16
  405a90:	f04f 0e01 	mov.w	lr, #1
  405a94:	4610      	mov	r0, r2
  405a96:	46dc      	mov	ip, fp
  405a98:	dced      	bgt.n	405a76 <_vfiprintf_r+0x8c6>
  405a9a:	46a9      	mov	r9, r5
  405a9c:	4645      	mov	r5, r8
  405a9e:	46d0      	mov	r8, sl
  405aa0:	46e2      	mov	sl, ip
  405aa2:	4422      	add	r2, r4
  405aa4:	f1be 0f07 	cmp.w	lr, #7
  405aa8:	920f      	str	r2, [sp, #60]	; 0x3c
  405aaa:	f8ca 9000 	str.w	r9, [sl]
  405aae:	f8ca 4004 	str.w	r4, [sl, #4]
  405ab2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
  405ab6:	dc2e      	bgt.n	405b16 <_vfiprintf_r+0x966>
  405ab8:	f10a 0a08 	add.w	sl, sl, #8
  405abc:	f10e 0e01 	add.w	lr, lr, #1
  405ac0:	e558      	b.n	405574 <_vfiprintf_r+0x3c4>
  405ac2:	aa0d      	add	r2, sp, #52	; 0x34
  405ac4:	9900      	ldr	r1, [sp, #0]
  405ac6:	9301      	str	r3, [sp, #4]
  405ac8:	4648      	mov	r0, r9
  405aca:	f7ff fb35 	bl	405138 <__sprint_r.part.0>
  405ace:	b968      	cbnz	r0, 405aec <_vfiprintf_r+0x93c>
  405ad0:	980e      	ldr	r0, [sp, #56]	; 0x38
  405ad2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405ad4:	9b01      	ldr	r3, [sp, #4]
  405ad6:	f100 0e01 	add.w	lr, r0, #1
  405ada:	46dc      	mov	ip, fp
  405adc:	e7c8      	b.n	405a70 <_vfiprintf_r+0x8c0>
  405ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405ae0:	b123      	cbz	r3, 405aec <_vfiprintf_r+0x93c>
  405ae2:	9805      	ldr	r0, [sp, #20]
  405ae4:	9900      	ldr	r1, [sp, #0]
  405ae6:	aa0d      	add	r2, sp, #52	; 0x34
  405ae8:	f7ff fb26 	bl	405138 <__sprint_r.part.0>
  405aec:	9b00      	ldr	r3, [sp, #0]
  405aee:	899b      	ldrh	r3, [r3, #12]
  405af0:	065a      	lsls	r2, r3, #25
  405af2:	f100 818b 	bmi.w	405e0c <_vfiprintf_r+0xc5c>
  405af6:	9802      	ldr	r0, [sp, #8]
  405af8:	b02b      	add	sp, #172	; 0xac
  405afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405afe:	aa0d      	add	r2, sp, #52	; 0x34
  405b00:	9900      	ldr	r1, [sp, #0]
  405b02:	4648      	mov	r0, r9
  405b04:	f7ff fb18 	bl	405138 <__sprint_r.part.0>
  405b08:	2800      	cmp	r0, #0
  405b0a:	d1ef      	bne.n	405aec <_vfiprintf_r+0x93c>
  405b0c:	990e      	ldr	r1, [sp, #56]	; 0x38
  405b0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405b10:	1c48      	adds	r0, r1, #1
  405b12:	46da      	mov	sl, fp
  405b14:	e555      	b.n	4055c2 <_vfiprintf_r+0x412>
  405b16:	2a00      	cmp	r2, #0
  405b18:	f040 80fb 	bne.w	405d12 <_vfiprintf_r+0xb62>
  405b1c:	9a03      	ldr	r2, [sp, #12]
  405b1e:	921b      	str	r2, [sp, #108]	; 0x6c
  405b20:	2301      	movs	r3, #1
  405b22:	920f      	str	r2, [sp, #60]	; 0x3c
  405b24:	971a      	str	r7, [sp, #104]	; 0x68
  405b26:	930e      	str	r3, [sp, #56]	; 0x38
  405b28:	46da      	mov	sl, fp
  405b2a:	f10a 0a08 	add.w	sl, sl, #8
  405b2e:	0771      	lsls	r1, r6, #29
  405b30:	d504      	bpl.n	405b3c <_vfiprintf_r+0x98c>
  405b32:	9b06      	ldr	r3, [sp, #24]
  405b34:	1b5c      	subs	r4, r3, r5
  405b36:	2c00      	cmp	r4, #0
  405b38:	f73f ad34 	bgt.w	4055a4 <_vfiprintf_r+0x3f4>
  405b3c:	9b02      	ldr	r3, [sp, #8]
  405b3e:	9906      	ldr	r1, [sp, #24]
  405b40:	42a9      	cmp	r1, r5
  405b42:	bfac      	ite	ge
  405b44:	185b      	addge	r3, r3, r1
  405b46:	195b      	addlt	r3, r3, r5
  405b48:	9302      	str	r3, [sp, #8]
  405b4a:	2a00      	cmp	r2, #0
  405b4c:	f040 80b3 	bne.w	405cb6 <_vfiprintf_r+0xb06>
  405b50:	2300      	movs	r3, #0
  405b52:	930e      	str	r3, [sp, #56]	; 0x38
  405b54:	46da      	mov	sl, fp
  405b56:	f7ff bb5c 	b.w	405212 <_vfiprintf_r+0x62>
  405b5a:	aa0d      	add	r2, sp, #52	; 0x34
  405b5c:	9900      	ldr	r1, [sp, #0]
  405b5e:	9307      	str	r3, [sp, #28]
  405b60:	4648      	mov	r0, r9
  405b62:	f7ff fae9 	bl	405138 <__sprint_r.part.0>
  405b66:	2800      	cmp	r0, #0
  405b68:	d1c0      	bne.n	405aec <_vfiprintf_r+0x93c>
  405b6a:	980e      	ldr	r0, [sp, #56]	; 0x38
  405b6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405b6e:	9b07      	ldr	r3, [sp, #28]
  405b70:	f100 0c01 	add.w	ip, r0, #1
  405b74:	46de      	mov	lr, fp
  405b76:	e4cb      	b.n	405510 <_vfiprintf_r+0x360>
  405b78:	004098d4 	.word	0x004098d4
  405b7c:	004098e8 	.word	0x004098e8
  405b80:	00409918 	.word	0x00409918
  405b84:	2a00      	cmp	r2, #0
  405b86:	f040 8133 	bne.w	405df0 <_vfiprintf_r+0xc40>
  405b8a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
  405b8e:	2b00      	cmp	r3, #0
  405b90:	f000 80f5 	beq.w	405d7e <_vfiprintf_r+0xbce>
  405b94:	2301      	movs	r3, #1
  405b96:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
  405b9a:	461a      	mov	r2, r3
  405b9c:	931b      	str	r3, [sp, #108]	; 0x6c
  405b9e:	469e      	mov	lr, r3
  405ba0:	911a      	str	r1, [sp, #104]	; 0x68
  405ba2:	46da      	mov	sl, fp
  405ba4:	4670      	mov	r0, lr
  405ba6:	f10a 0a08 	add.w	sl, sl, #8
  405baa:	f10e 0e01 	add.w	lr, lr, #1
  405bae:	e47d      	b.n	4054ac <_vfiprintf_r+0x2fc>
  405bb0:	a90c      	add	r1, sp, #48	; 0x30
  405bb2:	2202      	movs	r2, #2
  405bb4:	469e      	mov	lr, r3
  405bb6:	911a      	str	r1, [sp, #104]	; 0x68
  405bb8:	921b      	str	r2, [sp, #108]	; 0x6c
  405bba:	46da      	mov	sl, fp
  405bbc:	4670      	mov	r0, lr
  405bbe:	f10a 0a08 	add.w	sl, sl, #8
  405bc2:	f10e 0e01 	add.w	lr, lr, #1
  405bc6:	e738      	b.n	405a3a <_vfiprintf_r+0x88a>
  405bc8:	9b01      	ldr	r3, [sp, #4]
  405bca:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405bce:	2b00      	cmp	r3, #0
  405bd0:	f2c0 812a 	blt.w	405e28 <_vfiprintf_r+0xc78>
  405bd4:	ea54 0305 	orrs.w	r3, r4, r5
  405bd8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405bdc:	f43f abff 	beq.w	4053de <_vfiprintf_r+0x22e>
  405be0:	465f      	mov	r7, fp
  405be2:	0923      	lsrs	r3, r4, #4
  405be4:	f004 010f 	and.w	r1, r4, #15
  405be8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  405bec:	092a      	lsrs	r2, r5, #4
  405bee:	461c      	mov	r4, r3
  405bf0:	4615      	mov	r5, r2
  405bf2:	5c43      	ldrb	r3, [r0, r1]
  405bf4:	f807 3d01 	strb.w	r3, [r7, #-1]!
  405bf8:	ea54 0305 	orrs.w	r3, r4, r5
  405bfc:	d1f1      	bne.n	405be2 <_vfiprintf_r+0xa32>
  405bfe:	ebc7 030b 	rsb	r3, r7, fp
  405c02:	9303      	str	r3, [sp, #12]
  405c04:	f7ff bbf4 	b.w	4053f0 <_vfiprintf_r+0x240>
  405c08:	aa0d      	add	r2, sp, #52	; 0x34
  405c0a:	9900      	ldr	r1, [sp, #0]
  405c0c:	9805      	ldr	r0, [sp, #20]
  405c0e:	f7ff fa93 	bl	405138 <__sprint_r.part.0>
  405c12:	2800      	cmp	r0, #0
  405c14:	f47f af6a 	bne.w	405aec <_vfiprintf_r+0x93c>
  405c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405c1a:	46da      	mov	sl, fp
  405c1c:	e787      	b.n	405b2e <_vfiprintf_r+0x97e>
  405c1e:	f04f 0900 	mov.w	r9, #0
  405c22:	2400      	movs	r4, #0
  405c24:	2500      	movs	r5, #0
  405c26:	e7db      	b.n	405be0 <_vfiprintf_r+0xa30>
  405c28:	f016 0210 	ands.w	r2, r6, #16
  405c2c:	f000 80b2 	beq.w	405d94 <_vfiprintf_r+0xbe4>
  405c30:	9904      	ldr	r1, [sp, #16]
  405c32:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405c36:	460a      	mov	r2, r1
  405c38:	680c      	ldr	r4, [r1, #0]
  405c3a:	9901      	ldr	r1, [sp, #4]
  405c3c:	2900      	cmp	r1, #0
  405c3e:	f102 0204 	add.w	r2, r2, #4
  405c42:	f04f 0500 	mov.w	r5, #0
  405c46:	f2c0 8159 	blt.w	405efc <_vfiprintf_r+0xd4c>
  405c4a:	ea54 0105 	orrs.w	r1, r4, r5
  405c4e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405c52:	9204      	str	r2, [sp, #16]
  405c54:	f43f ad51 	beq.w	4056fa <_vfiprintf_r+0x54a>
  405c58:	4699      	mov	r9, r3
  405c5a:	e556      	b.n	40570a <_vfiprintf_r+0x55a>
  405c5c:	06f7      	lsls	r7, r6, #27
  405c5e:	d40a      	bmi.n	405c76 <_vfiprintf_r+0xac6>
  405c60:	0675      	lsls	r5, r6, #25
  405c62:	d508      	bpl.n	405c76 <_vfiprintf_r+0xac6>
  405c64:	9904      	ldr	r1, [sp, #16]
  405c66:	f9b1 4000 	ldrsh.w	r4, [r1]
  405c6a:	3104      	adds	r1, #4
  405c6c:	17e5      	asrs	r5, r4, #31
  405c6e:	4622      	mov	r2, r4
  405c70:	462b      	mov	r3, r5
  405c72:	9104      	str	r1, [sp, #16]
  405c74:	e4ea      	b.n	40564c <_vfiprintf_r+0x49c>
  405c76:	9a04      	ldr	r2, [sp, #16]
  405c78:	6814      	ldr	r4, [r2, #0]
  405c7a:	4613      	mov	r3, r2
  405c7c:	3304      	adds	r3, #4
  405c7e:	17e5      	asrs	r5, r4, #31
  405c80:	9304      	str	r3, [sp, #16]
  405c82:	4622      	mov	r2, r4
  405c84:	462b      	mov	r3, r5
  405c86:	e4e1      	b.n	40564c <_vfiprintf_r+0x49c>
  405c88:	6814      	ldr	r4, [r2, #0]
  405c8a:	3204      	adds	r2, #4
  405c8c:	9204      	str	r2, [sp, #16]
  405c8e:	2500      	movs	r5, #0
  405c90:	e61f      	b.n	4058d2 <_vfiprintf_r+0x722>
  405c92:	f04f 0900 	mov.w	r9, #0
  405c96:	ea54 0305 	orrs.w	r3, r4, r5
  405c9a:	f47f ace8 	bne.w	40566e <_vfiprintf_r+0x4be>
  405c9e:	e5d8      	b.n	405852 <_vfiprintf_r+0x6a2>
  405ca0:	aa0d      	add	r2, sp, #52	; 0x34
  405ca2:	9900      	ldr	r1, [sp, #0]
  405ca4:	9805      	ldr	r0, [sp, #20]
  405ca6:	f7ff fa47 	bl	405138 <__sprint_r.part.0>
  405caa:	2800      	cmp	r0, #0
  405cac:	f47f af1e 	bne.w	405aec <_vfiprintf_r+0x93c>
  405cb0:	46da      	mov	sl, fp
  405cb2:	f7ff bb48 	b.w	405346 <_vfiprintf_r+0x196>
  405cb6:	aa0d      	add	r2, sp, #52	; 0x34
  405cb8:	9900      	ldr	r1, [sp, #0]
  405cba:	9805      	ldr	r0, [sp, #20]
  405cbc:	f7ff fa3c 	bl	405138 <__sprint_r.part.0>
  405cc0:	2800      	cmp	r0, #0
  405cc2:	f43f af45 	beq.w	405b50 <_vfiprintf_r+0x9a0>
  405cc6:	e711      	b.n	405aec <_vfiprintf_r+0x93c>
  405cc8:	aa0d      	add	r2, sp, #52	; 0x34
  405cca:	9900      	ldr	r1, [sp, #0]
  405ccc:	9805      	ldr	r0, [sp, #20]
  405cce:	f7ff fa33 	bl	405138 <__sprint_r.part.0>
  405cd2:	2800      	cmp	r0, #0
  405cd4:	f47f af0a 	bne.w	405aec <_vfiprintf_r+0x93c>
  405cd8:	980e      	ldr	r0, [sp, #56]	; 0x38
  405cda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405cdc:	f100 0e01 	add.w	lr, r0, #1
  405ce0:	46da      	mov	sl, fp
  405ce2:	f7ff bbe3 	b.w	4054ac <_vfiprintf_r+0x2fc>
  405ce6:	aa0d      	add	r2, sp, #52	; 0x34
  405ce8:	9900      	ldr	r1, [sp, #0]
  405cea:	9805      	ldr	r0, [sp, #20]
  405cec:	f7ff fa24 	bl	405138 <__sprint_r.part.0>
  405cf0:	2800      	cmp	r0, #0
  405cf2:	f47f aefb 	bne.w	405aec <_vfiprintf_r+0x93c>
  405cf6:	980e      	ldr	r0, [sp, #56]	; 0x38
  405cf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405cfa:	f100 0e01 	add.w	lr, r0, #1
  405cfe:	46da      	mov	sl, fp
  405d00:	e69b      	b.n	405a3a <_vfiprintf_r+0x88a>
  405d02:	2a00      	cmp	r2, #0
  405d04:	f040 80d8 	bne.w	405eb8 <_vfiprintf_r+0xd08>
  405d08:	f04f 0e01 	mov.w	lr, #1
  405d0c:	4610      	mov	r0, r2
  405d0e:	46da      	mov	sl, fp
  405d10:	e697      	b.n	405a42 <_vfiprintf_r+0x892>
  405d12:	aa0d      	add	r2, sp, #52	; 0x34
  405d14:	9900      	ldr	r1, [sp, #0]
  405d16:	9805      	ldr	r0, [sp, #20]
  405d18:	f7ff fa0e 	bl	405138 <__sprint_r.part.0>
  405d1c:	2800      	cmp	r0, #0
  405d1e:	f47f aee5 	bne.w	405aec <_vfiprintf_r+0x93c>
  405d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405d24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405d26:	f103 0e01 	add.w	lr, r3, #1
  405d2a:	46da      	mov	sl, fp
  405d2c:	e422      	b.n	405574 <_vfiprintf_r+0x3c4>
  405d2e:	2230      	movs	r2, #48	; 0x30
  405d30:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
  405d34:	9a01      	ldr	r2, [sp, #4]
  405d36:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  405d3a:	2a00      	cmp	r2, #0
  405d3c:	f04f 0300 	mov.w	r3, #0
  405d40:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405d44:	f046 0302 	orr.w	r3, r6, #2
  405d48:	f2c0 80cb 	blt.w	405ee2 <_vfiprintf_r+0xd32>
  405d4c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405d50:	f046 0602 	orr.w	r6, r6, #2
  405d54:	f04f 0900 	mov.w	r9, #0
  405d58:	e742      	b.n	405be0 <_vfiprintf_r+0xa30>
  405d5a:	f04f 0900 	mov.w	r9, #0
  405d5e:	4890      	ldr	r0, [pc, #576]	; (405fa0 <_vfiprintf_r+0xdf0>)
  405d60:	e73e      	b.n	405be0 <_vfiprintf_r+0xa30>
  405d62:	9b01      	ldr	r3, [sp, #4]
  405d64:	4264      	negs	r4, r4
  405d66:	f04f 092d 	mov.w	r9, #45	; 0x2d
  405d6a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  405d6e:	2b00      	cmp	r3, #0
  405d70:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405d74:	f6ff ac7b 	blt.w	40566e <_vfiprintf_r+0x4be>
  405d78:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405d7c:	e477      	b.n	40566e <_vfiprintf_r+0x4be>
  405d7e:	9b07      	ldr	r3, [sp, #28]
  405d80:	2b00      	cmp	r3, #0
  405d82:	d072      	beq.n	405e6a <_vfiprintf_r+0xcba>
  405d84:	ab0c      	add	r3, sp, #48	; 0x30
  405d86:	2202      	movs	r2, #2
  405d88:	931a      	str	r3, [sp, #104]	; 0x68
  405d8a:	921b      	str	r2, [sp, #108]	; 0x6c
  405d8c:	f04f 0e01 	mov.w	lr, #1
  405d90:	46da      	mov	sl, fp
  405d92:	e713      	b.n	405bbc <_vfiprintf_r+0xa0c>
  405d94:	f016 0940 	ands.w	r9, r6, #64	; 0x40
  405d98:	d048      	beq.n	405e2c <_vfiprintf_r+0xc7c>
  405d9a:	9904      	ldr	r1, [sp, #16]
  405d9c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
  405da0:	460b      	mov	r3, r1
  405da2:	880c      	ldrh	r4, [r1, #0]
  405da4:	9901      	ldr	r1, [sp, #4]
  405da6:	2900      	cmp	r1, #0
  405da8:	f103 0304 	add.w	r3, r3, #4
  405dac:	f04f 0500 	mov.w	r5, #0
  405db0:	f6ff ae10 	blt.w	4059d4 <_vfiprintf_r+0x824>
  405db4:	ea54 0105 	orrs.w	r1, r4, r5
  405db8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405dbc:	9304      	str	r3, [sp, #16]
  405dbe:	f43f ac9c 	beq.w	4056fa <_vfiprintf_r+0x54a>
  405dc2:	4691      	mov	r9, r2
  405dc4:	e4a1      	b.n	40570a <_vfiprintf_r+0x55a>
  405dc6:	06f0      	lsls	r0, r6, #27
  405dc8:	d40a      	bmi.n	405de0 <_vfiprintf_r+0xc30>
  405dca:	0671      	lsls	r1, r6, #25
  405dcc:	d508      	bpl.n	405de0 <_vfiprintf_r+0xc30>
  405dce:	9a04      	ldr	r2, [sp, #16]
  405dd0:	6813      	ldr	r3, [r2, #0]
  405dd2:	3204      	adds	r2, #4
  405dd4:	9204      	str	r2, [sp, #16]
  405dd6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  405dda:	801a      	strh	r2, [r3, #0]
  405ddc:	f7ff ba19 	b.w	405212 <_vfiprintf_r+0x62>
  405de0:	9a04      	ldr	r2, [sp, #16]
  405de2:	6813      	ldr	r3, [r2, #0]
  405de4:	3204      	adds	r2, #4
  405de6:	9204      	str	r2, [sp, #16]
  405de8:	9a02      	ldr	r2, [sp, #8]
  405dea:	601a      	str	r2, [r3, #0]
  405dec:	f7ff ba11 	b.w	405212 <_vfiprintf_r+0x62>
  405df0:	aa0d      	add	r2, sp, #52	; 0x34
  405df2:	9900      	ldr	r1, [sp, #0]
  405df4:	9805      	ldr	r0, [sp, #20]
  405df6:	f7ff f99f 	bl	405138 <__sprint_r.part.0>
  405dfa:	2800      	cmp	r0, #0
  405dfc:	f47f ae76 	bne.w	405aec <_vfiprintf_r+0x93c>
  405e00:	980e      	ldr	r0, [sp, #56]	; 0x38
  405e02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405e04:	f100 0e01 	add.w	lr, r0, #1
  405e08:	46da      	mov	sl, fp
  405e0a:	e5fa      	b.n	405a02 <_vfiprintf_r+0x852>
  405e0c:	f04f 30ff 	mov.w	r0, #4294967295
  405e10:	f7ff bab6 	b.w	405380 <_vfiprintf_r+0x1d0>
  405e14:	4862      	ldr	r0, [pc, #392]	; (405fa0 <_vfiprintf_r+0xdf0>)
  405e16:	4616      	mov	r6, r2
  405e18:	ea54 0205 	orrs.w	r2, r4, r5
  405e1c:	9304      	str	r3, [sp, #16]
  405e1e:	f04f 0900 	mov.w	r9, #0
  405e22:	f47f aedd 	bne.w	405be0 <_vfiprintf_r+0xa30>
  405e26:	e6fc      	b.n	405c22 <_vfiprintf_r+0xa72>
  405e28:	9b04      	ldr	r3, [sp, #16]
  405e2a:	e7f5      	b.n	405e18 <_vfiprintf_r+0xc68>
  405e2c:	9a04      	ldr	r2, [sp, #16]
  405e2e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
  405e32:	4613      	mov	r3, r2
  405e34:	6814      	ldr	r4, [r2, #0]
  405e36:	9a01      	ldr	r2, [sp, #4]
  405e38:	2a00      	cmp	r2, #0
  405e3a:	f103 0304 	add.w	r3, r3, #4
  405e3e:	f04f 0500 	mov.w	r5, #0
  405e42:	f6ff adc7 	blt.w	4059d4 <_vfiprintf_r+0x824>
  405e46:	ea54 0205 	orrs.w	r2, r4, r5
  405e4a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405e4e:	9304      	str	r3, [sp, #16]
  405e50:	f47f ac5b 	bne.w	40570a <_vfiprintf_r+0x55a>
  405e54:	e451      	b.n	4056fa <_vfiprintf_r+0x54a>
  405e56:	aa0d      	add	r2, sp, #52	; 0x34
  405e58:	9900      	ldr	r1, [sp, #0]
  405e5a:	9805      	ldr	r0, [sp, #20]
  405e5c:	f7ff f96c 	bl	405138 <__sprint_r.part.0>
  405e60:	2800      	cmp	r0, #0
  405e62:	f47f ae43 	bne.w	405aec <_vfiprintf_r+0x93c>
  405e66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405e68:	e668      	b.n	405b3c <_vfiprintf_r+0x98c>
  405e6a:	4610      	mov	r0, r2
  405e6c:	f04f 0e01 	mov.w	lr, #1
  405e70:	46da      	mov	sl, fp
  405e72:	e5e6      	b.n	405a42 <_vfiprintf_r+0x892>
  405e74:	9904      	ldr	r1, [sp, #16]
  405e76:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  405e7a:	460a      	mov	r2, r1
  405e7c:	880c      	ldrh	r4, [r1, #0]
  405e7e:	9901      	ldr	r1, [sp, #4]
  405e80:	2900      	cmp	r1, #0
  405e82:	f102 0204 	add.w	r2, r2, #4
  405e86:	f04f 0500 	mov.w	r5, #0
  405e8a:	db4e      	blt.n	405f2a <_vfiprintf_r+0xd7a>
  405e8c:	ea54 0105 	orrs.w	r1, r4, r5
  405e90:	f026 0680 	bic.w	r6, r6, #128	; 0x80
  405e94:	9204      	str	r2, [sp, #16]
  405e96:	4699      	mov	r9, r3
  405e98:	f47f abe9 	bne.w	40566e <_vfiprintf_r+0x4be>
  405e9c:	e4d4      	b.n	405848 <_vfiprintf_r+0x698>
  405e9e:	9304      	str	r3, [sp, #16]
  405ea0:	e6f9      	b.n	405c96 <_vfiprintf_r+0xae6>
  405ea2:	4638      	mov	r0, r7
  405ea4:	9404      	str	r4, [sp, #16]
  405ea6:	f7fd fd8b 	bl	4039c0 <strlen>
  405eaa:	2300      	movs	r3, #0
  405eac:	9003      	str	r0, [sp, #12]
  405eae:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405eb2:	9301      	str	r3, [sp, #4]
  405eb4:	f7ff ba9c 	b.w	4053f0 <_vfiprintf_r+0x240>
  405eb8:	aa0d      	add	r2, sp, #52	; 0x34
  405eba:	9900      	ldr	r1, [sp, #0]
  405ebc:	9805      	ldr	r0, [sp, #20]
  405ebe:	f7ff f93b 	bl	405138 <__sprint_r.part.0>
  405ec2:	2800      	cmp	r0, #0
  405ec4:	f47f ae12 	bne.w	405aec <_vfiprintf_r+0x93c>
  405ec8:	980e      	ldr	r0, [sp, #56]	; 0x38
  405eca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405ecc:	f100 0e01 	add.w	lr, r0, #1
  405ed0:	46da      	mov	sl, fp
  405ed2:	e5b6      	b.n	405a42 <_vfiprintf_r+0x892>
  405ed4:	980e      	ldr	r0, [sp, #56]	; 0x38
  405ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405ed8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 405fa8 <_vfiprintf_r+0xdf8>
  405edc:	3001      	adds	r0, #1
  405ede:	f7ff bad2 	b.w	405486 <_vfiprintf_r+0x2d6>
  405ee2:	461e      	mov	r6, r3
  405ee4:	f04f 0900 	mov.w	r9, #0
  405ee8:	e67a      	b.n	405be0 <_vfiprintf_r+0xa30>
  405eea:	2b06      	cmp	r3, #6
  405eec:	bf28      	it	cs
  405eee:	2306      	movcs	r3, #6
  405ef0:	9303      	str	r3, [sp, #12]
  405ef2:	9404      	str	r4, [sp, #16]
  405ef4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  405ef8:	4f2a      	ldr	r7, [pc, #168]	; (405fa4 <_vfiprintf_r+0xdf4>)
  405efa:	e50c      	b.n	405916 <_vfiprintf_r+0x766>
  405efc:	9204      	str	r2, [sp, #16]
  405efe:	e56a      	b.n	4059d6 <_vfiprintf_r+0x826>
  405f00:	980e      	ldr	r0, [sp, #56]	; 0x38
  405f02:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 405fa8 <_vfiprintf_r+0xdf8>
  405f06:	3001      	adds	r0, #1
  405f08:	f7ff bb73 	b.w	4055f2 <_vfiprintf_r+0x442>
  405f0c:	46f4      	mov	ip, lr
  405f0e:	f7ff bb1a 	b.w	405546 <_vfiprintf_r+0x396>
  405f12:	9b01      	ldr	r3, [sp, #4]
  405f14:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
  405f18:	9303      	str	r3, [sp, #12]
  405f1a:	9404      	str	r4, [sp, #16]
  405f1c:	9001      	str	r0, [sp, #4]
  405f1e:	f7ff ba67 	b.w	4053f0 <_vfiprintf_r+0x240>
  405f22:	2200      	movs	r2, #0
  405f24:	9201      	str	r2, [sp, #4]
  405f26:	f7ff b9ac 	b.w	405282 <_vfiprintf_r+0xd2>
  405f2a:	9204      	str	r2, [sp, #16]
  405f2c:	4699      	mov	r9, r3
  405f2e:	e6b2      	b.n	405c96 <_vfiprintf_r+0xae6>
  405f30:	9a04      	ldr	r2, [sp, #16]
  405f32:	6813      	ldr	r3, [r2, #0]
  405f34:	9301      	str	r3, [sp, #4]
  405f36:	3204      	adds	r2, #4
  405f38:	2b00      	cmp	r3, #0
  405f3a:	9204      	str	r2, [sp, #16]
  405f3c:	f898 3001 	ldrb.w	r3, [r8, #1]
  405f40:	46a8      	mov	r8, r5
  405f42:	f6bf a99c 	bge.w	40527e <_vfiprintf_r+0xce>
  405f46:	f04f 32ff 	mov.w	r2, #4294967295
  405f4a:	9201      	str	r2, [sp, #4]
  405f4c:	f7ff b997 	b.w	40527e <_vfiprintf_r+0xce>
  405f50:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f54:	e48e      	b.n	405874 <_vfiprintf_r+0x6c4>
  405f56:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f5a:	e4f0      	b.n	40593e <_vfiprintf_r+0x78e>
  405f5c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f60:	e4ab      	b.n	4058ba <_vfiprintf_r+0x70a>
  405f62:	4699      	mov	r9, r3
  405f64:	07f3      	lsls	r3, r6, #31
  405f66:	d505      	bpl.n	405f74 <_vfiprintf_r+0xdc4>
  405f68:	af2a      	add	r7, sp, #168	; 0xa8
  405f6a:	2330      	movs	r3, #48	; 0x30
  405f6c:	f807 3d41 	strb.w	r3, [r7, #-65]!
  405f70:	f7ff bb97 	b.w	4056a2 <_vfiprintf_r+0x4f2>
  405f74:	9b01      	ldr	r3, [sp, #4]
  405f76:	9303      	str	r3, [sp, #12]
  405f78:	465f      	mov	r7, fp
  405f7a:	f7ff ba39 	b.w	4053f0 <_vfiprintf_r+0x240>
  405f7e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f82:	e443      	b.n	40580c <_vfiprintf_r+0x65c>
  405f84:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f88:	f7ff bb9a 	b.w	4056c0 <_vfiprintf_r+0x510>
  405f8c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f90:	f7ff bb4d 	b.w	40562e <_vfiprintf_r+0x47e>
  405f94:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f98:	e50f      	b.n	4059ba <_vfiprintf_r+0x80a>
  405f9a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
  405f9e:	e4f3      	b.n	405988 <_vfiprintf_r+0x7d8>
  405fa0:	004098e8 	.word	0x004098e8
  405fa4:	004098fc 	.word	0x004098fc
  405fa8:	00409928 	.word	0x00409928

00405fac <__sbprintf>:
  405fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  405fae:	460c      	mov	r4, r1
  405fb0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
  405fb4:	8989      	ldrh	r1, [r1, #12]
  405fb6:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405fb8:	89e5      	ldrh	r5, [r4, #14]
  405fba:	9619      	str	r6, [sp, #100]	; 0x64
  405fbc:	f021 0102 	bic.w	r1, r1, #2
  405fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405fc2:	f8ad 500e 	strh.w	r5, [sp, #14]
  405fc6:	2500      	movs	r5, #0
  405fc8:	69e7      	ldr	r7, [r4, #28]
  405fca:	f8ad 100c 	strh.w	r1, [sp, #12]
  405fce:	9609      	str	r6, [sp, #36]	; 0x24
  405fd0:	9506      	str	r5, [sp, #24]
  405fd2:	ae1a      	add	r6, sp, #104	; 0x68
  405fd4:	f44f 6580 	mov.w	r5, #1024	; 0x400
  405fd8:	4669      	mov	r1, sp
  405fda:	9600      	str	r6, [sp, #0]
  405fdc:	9604      	str	r6, [sp, #16]
  405fde:	9502      	str	r5, [sp, #8]
  405fe0:	9505      	str	r5, [sp, #20]
  405fe2:	9707      	str	r7, [sp, #28]
  405fe4:	4606      	mov	r6, r0
  405fe6:	f7ff f8e3 	bl	4051b0 <_vfiprintf_r>
  405fea:	1e05      	subs	r5, r0, #0
  405fec:	db07      	blt.n	405ffe <__sbprintf+0x52>
  405fee:	4630      	mov	r0, r6
  405ff0:	4669      	mov	r1, sp
  405ff2:	f001 f8e9 	bl	4071c8 <_fflush_r>
  405ff6:	2800      	cmp	r0, #0
  405ff8:	bf18      	it	ne
  405ffa:	f04f 35ff 	movne.w	r5, #4294967295
  405ffe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  406002:	065b      	lsls	r3, r3, #25
  406004:	d503      	bpl.n	40600e <__sbprintf+0x62>
  406006:	89a3      	ldrh	r3, [r4, #12]
  406008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40600c:	81a3      	strh	r3, [r4, #12]
  40600e:	4628      	mov	r0, r5
  406010:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
  406014:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406016:	bf00      	nop

00406018 <__swsetup_r>:
  406018:	b538      	push	{r3, r4, r5, lr}
  40601a:	4b30      	ldr	r3, [pc, #192]	; (4060dc <__swsetup_r+0xc4>)
  40601c:	681b      	ldr	r3, [r3, #0]
  40601e:	4605      	mov	r5, r0
  406020:	460c      	mov	r4, r1
  406022:	b113      	cbz	r3, 40602a <__swsetup_r+0x12>
  406024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406026:	2a00      	cmp	r2, #0
  406028:	d038      	beq.n	40609c <__swsetup_r+0x84>
  40602a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40602e:	b293      	uxth	r3, r2
  406030:	0718      	lsls	r0, r3, #28
  406032:	d50c      	bpl.n	40604e <__swsetup_r+0x36>
  406034:	6920      	ldr	r0, [r4, #16]
  406036:	b1a8      	cbz	r0, 406064 <__swsetup_r+0x4c>
  406038:	f013 0201 	ands.w	r2, r3, #1
  40603c:	d01e      	beq.n	40607c <__swsetup_r+0x64>
  40603e:	6963      	ldr	r3, [r4, #20]
  406040:	2200      	movs	r2, #0
  406042:	425b      	negs	r3, r3
  406044:	61a3      	str	r3, [r4, #24]
  406046:	60a2      	str	r2, [r4, #8]
  406048:	b1f0      	cbz	r0, 406088 <__swsetup_r+0x70>
  40604a:	2000      	movs	r0, #0
  40604c:	bd38      	pop	{r3, r4, r5, pc}
  40604e:	06d9      	lsls	r1, r3, #27
  406050:	d53c      	bpl.n	4060cc <__swsetup_r+0xb4>
  406052:	0758      	lsls	r0, r3, #29
  406054:	d426      	bmi.n	4060a4 <__swsetup_r+0x8c>
  406056:	6920      	ldr	r0, [r4, #16]
  406058:	f042 0308 	orr.w	r3, r2, #8
  40605c:	81a3      	strh	r3, [r4, #12]
  40605e:	b29b      	uxth	r3, r3
  406060:	2800      	cmp	r0, #0
  406062:	d1e9      	bne.n	406038 <__swsetup_r+0x20>
  406064:	f403 7220 	and.w	r2, r3, #640	; 0x280
  406068:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40606c:	d0e4      	beq.n	406038 <__swsetup_r+0x20>
  40606e:	4628      	mov	r0, r5
  406070:	4621      	mov	r1, r4
  406072:	f001 fcd9 	bl	407a28 <__smakebuf_r>
  406076:	89a3      	ldrh	r3, [r4, #12]
  406078:	6920      	ldr	r0, [r4, #16]
  40607a:	e7dd      	b.n	406038 <__swsetup_r+0x20>
  40607c:	0799      	lsls	r1, r3, #30
  40607e:	bf58      	it	pl
  406080:	6962      	ldrpl	r2, [r4, #20]
  406082:	60a2      	str	r2, [r4, #8]
  406084:	2800      	cmp	r0, #0
  406086:	d1e0      	bne.n	40604a <__swsetup_r+0x32>
  406088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40608c:	061a      	lsls	r2, r3, #24
  40608e:	d5dd      	bpl.n	40604c <__swsetup_r+0x34>
  406090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406094:	81a3      	strh	r3, [r4, #12]
  406096:	f04f 30ff 	mov.w	r0, #4294967295
  40609a:	bd38      	pop	{r3, r4, r5, pc}
  40609c:	4618      	mov	r0, r3
  40609e:	f001 f927 	bl	4072f0 <__sinit>
  4060a2:	e7c2      	b.n	40602a <__swsetup_r+0x12>
  4060a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4060a6:	b151      	cbz	r1, 4060be <__swsetup_r+0xa6>
  4060a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4060ac:	4299      	cmp	r1, r3
  4060ae:	d004      	beq.n	4060ba <__swsetup_r+0xa2>
  4060b0:	4628      	mov	r0, r5
  4060b2:	f001 f9e7 	bl	407484 <_free_r>
  4060b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4060ba:	2300      	movs	r3, #0
  4060bc:	6323      	str	r3, [r4, #48]	; 0x30
  4060be:	2300      	movs	r3, #0
  4060c0:	6920      	ldr	r0, [r4, #16]
  4060c2:	6063      	str	r3, [r4, #4]
  4060c4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4060c8:	6020      	str	r0, [r4, #0]
  4060ca:	e7c5      	b.n	406058 <__swsetup_r+0x40>
  4060cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4060d0:	2309      	movs	r3, #9
  4060d2:	602b      	str	r3, [r5, #0]
  4060d4:	f04f 30ff 	mov.w	r0, #4294967295
  4060d8:	81a2      	strh	r2, [r4, #12]
  4060da:	bd38      	pop	{r3, r4, r5, pc}
  4060dc:	20400438 	.word	0x20400438

004060e0 <register_fini>:
  4060e0:	4b02      	ldr	r3, [pc, #8]	; (4060ec <register_fini+0xc>)
  4060e2:	b113      	cbz	r3, 4060ea <register_fini+0xa>
  4060e4:	4802      	ldr	r0, [pc, #8]	; (4060f0 <register_fini+0x10>)
  4060e6:	f000 b805 	b.w	4060f4 <atexit>
  4060ea:	4770      	bx	lr
  4060ec:	00000000 	.word	0x00000000
  4060f0:	00407305 	.word	0x00407305

004060f4 <atexit>:
  4060f4:	2300      	movs	r3, #0
  4060f6:	4601      	mov	r1, r0
  4060f8:	461a      	mov	r2, r3
  4060fa:	4618      	mov	r0, r3
  4060fc:	f002 bbf2 	b.w	4088e4 <__register_exitproc>

00406100 <quorem>:
  406100:	6902      	ldr	r2, [r0, #16]
  406102:	690b      	ldr	r3, [r1, #16]
  406104:	4293      	cmp	r3, r2
  406106:	f300 808d 	bgt.w	406224 <quorem+0x124>
  40610a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40610e:	f103 38ff 	add.w	r8, r3, #4294967295
  406112:	f101 0714 	add.w	r7, r1, #20
  406116:	f100 0b14 	add.w	fp, r0, #20
  40611a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40611e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406122:	ea4f 0488 	mov.w	r4, r8, lsl #2
  406126:	b083      	sub	sp, #12
  406128:	3201      	adds	r2, #1
  40612a:	fbb3 f9f2 	udiv	r9, r3, r2
  40612e:	eb0b 0304 	add.w	r3, fp, r4
  406132:	9400      	str	r4, [sp, #0]
  406134:	eb07 0a04 	add.w	sl, r7, r4
  406138:	9301      	str	r3, [sp, #4]
  40613a:	f1b9 0f00 	cmp.w	r9, #0
  40613e:	d039      	beq.n	4061b4 <quorem+0xb4>
  406140:	2500      	movs	r5, #0
  406142:	46bc      	mov	ip, r7
  406144:	46de      	mov	lr, fp
  406146:	462b      	mov	r3, r5
  406148:	f85c 6b04 	ldr.w	r6, [ip], #4
  40614c:	f8de 2000 	ldr.w	r2, [lr]
  406150:	b2b4      	uxth	r4, r6
  406152:	fb09 5504 	mla	r5, r9, r4, r5
  406156:	0c36      	lsrs	r6, r6, #16
  406158:	0c2c      	lsrs	r4, r5, #16
  40615a:	fb09 4406 	mla	r4, r9, r6, r4
  40615e:	b2ad      	uxth	r5, r5
  406160:	1b5b      	subs	r3, r3, r5
  406162:	b2a6      	uxth	r6, r4
  406164:	fa13 f382 	uxtah	r3, r3, r2
  406168:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  40616c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406170:	b29b      	uxth	r3, r3
  406172:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406176:	45e2      	cmp	sl, ip
  406178:	f84e 3b04 	str.w	r3, [lr], #4
  40617c:	ea4f 4514 	mov.w	r5, r4, lsr #16
  406180:	ea4f 4326 	mov.w	r3, r6, asr #16
  406184:	d2e0      	bcs.n	406148 <quorem+0x48>
  406186:	9b00      	ldr	r3, [sp, #0]
  406188:	f85b 3003 	ldr.w	r3, [fp, r3]
  40618c:	b993      	cbnz	r3, 4061b4 <quorem+0xb4>
  40618e:	9c01      	ldr	r4, [sp, #4]
  406190:	1f23      	subs	r3, r4, #4
  406192:	459b      	cmp	fp, r3
  406194:	d20c      	bcs.n	4061b0 <quorem+0xb0>
  406196:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40619a:	b94b      	cbnz	r3, 4061b0 <quorem+0xb0>
  40619c:	f1a4 0308 	sub.w	r3, r4, #8
  4061a0:	e002      	b.n	4061a8 <quorem+0xa8>
  4061a2:	681a      	ldr	r2, [r3, #0]
  4061a4:	3b04      	subs	r3, #4
  4061a6:	b91a      	cbnz	r2, 4061b0 <quorem+0xb0>
  4061a8:	459b      	cmp	fp, r3
  4061aa:	f108 38ff 	add.w	r8, r8, #4294967295
  4061ae:	d3f8      	bcc.n	4061a2 <quorem+0xa2>
  4061b0:	f8c0 8010 	str.w	r8, [r0, #16]
  4061b4:	4604      	mov	r4, r0
  4061b6:	f001 ff37 	bl	408028 <__mcmp>
  4061ba:	2800      	cmp	r0, #0
  4061bc:	db2e      	blt.n	40621c <quorem+0x11c>
  4061be:	f109 0901 	add.w	r9, r9, #1
  4061c2:	465d      	mov	r5, fp
  4061c4:	2300      	movs	r3, #0
  4061c6:	f857 1b04 	ldr.w	r1, [r7], #4
  4061ca:	6828      	ldr	r0, [r5, #0]
  4061cc:	b28a      	uxth	r2, r1
  4061ce:	1a9a      	subs	r2, r3, r2
  4061d0:	0c09      	lsrs	r1, r1, #16
  4061d2:	fa12 f280 	uxtah	r2, r2, r0
  4061d6:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  4061da:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4061de:	b291      	uxth	r1, r2
  4061e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  4061e4:	45ba      	cmp	sl, r7
  4061e6:	f845 1b04 	str.w	r1, [r5], #4
  4061ea:	ea4f 4323 	mov.w	r3, r3, asr #16
  4061ee:	d2ea      	bcs.n	4061c6 <quorem+0xc6>
  4061f0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4061f4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4061f8:	b982      	cbnz	r2, 40621c <quorem+0x11c>
  4061fa:	1f1a      	subs	r2, r3, #4
  4061fc:	4593      	cmp	fp, r2
  4061fe:	d20b      	bcs.n	406218 <quorem+0x118>
  406200:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406204:	b942      	cbnz	r2, 406218 <quorem+0x118>
  406206:	3b08      	subs	r3, #8
  406208:	e002      	b.n	406210 <quorem+0x110>
  40620a:	681a      	ldr	r2, [r3, #0]
  40620c:	3b04      	subs	r3, #4
  40620e:	b91a      	cbnz	r2, 406218 <quorem+0x118>
  406210:	459b      	cmp	fp, r3
  406212:	f108 38ff 	add.w	r8, r8, #4294967295
  406216:	d3f8      	bcc.n	40620a <quorem+0x10a>
  406218:	f8c4 8010 	str.w	r8, [r4, #16]
  40621c:	4648      	mov	r0, r9
  40621e:	b003      	add	sp, #12
  406220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406224:	2000      	movs	r0, #0
  406226:	4770      	bx	lr

00406228 <_dtoa_r>:
  406228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40622c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40622e:	b097      	sub	sp, #92	; 0x5c
  406230:	4681      	mov	r9, r0
  406232:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  406234:	4692      	mov	sl, r2
  406236:	469b      	mov	fp, r3
  406238:	b149      	cbz	r1, 40624e <_dtoa_r+0x26>
  40623a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40623c:	604a      	str	r2, [r1, #4]
  40623e:	2301      	movs	r3, #1
  406240:	4093      	lsls	r3, r2
  406242:	608b      	str	r3, [r1, #8]
  406244:	f001 fd0e 	bl	407c64 <_Bfree>
  406248:	2300      	movs	r3, #0
  40624a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  40624e:	f1bb 0f00 	cmp.w	fp, #0
  406252:	46d8      	mov	r8, fp
  406254:	db33      	blt.n	4062be <_dtoa_r+0x96>
  406256:	2300      	movs	r3, #0
  406258:	6023      	str	r3, [r4, #0]
  40625a:	4ba5      	ldr	r3, [pc, #660]	; (4064f0 <_dtoa_r+0x2c8>)
  40625c:	461a      	mov	r2, r3
  40625e:	ea08 0303 	and.w	r3, r8, r3
  406262:	4293      	cmp	r3, r2
  406264:	d014      	beq.n	406290 <_dtoa_r+0x68>
  406266:	4650      	mov	r0, sl
  406268:	4659      	mov	r1, fp
  40626a:	2200      	movs	r2, #0
  40626c:	2300      	movs	r3, #0
  40626e:	f003 f881 	bl	409374 <__aeabi_dcmpeq>
  406272:	4605      	mov	r5, r0
  406274:	b348      	cbz	r0, 4062ca <_dtoa_r+0xa2>
  406276:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406278:	2301      	movs	r3, #1
  40627a:	6013      	str	r3, [r2, #0]
  40627c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40627e:	2b00      	cmp	r3, #0
  406280:	f000 80c5 	beq.w	40640e <_dtoa_r+0x1e6>
  406284:	489b      	ldr	r0, [pc, #620]	; (4064f4 <_dtoa_r+0x2cc>)
  406286:	6018      	str	r0, [r3, #0]
  406288:	3801      	subs	r0, #1
  40628a:	b017      	add	sp, #92	; 0x5c
  40628c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406290:	9a22      	ldr	r2, [sp, #136]	; 0x88
  406292:	f242 730f 	movw	r3, #9999	; 0x270f
  406296:	6013      	str	r3, [r2, #0]
  406298:	f1ba 0f00 	cmp.w	sl, #0
  40629c:	f000 80a2 	beq.w	4063e4 <_dtoa_r+0x1bc>
  4062a0:	4895      	ldr	r0, [pc, #596]	; (4064f8 <_dtoa_r+0x2d0>)
  4062a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4062a4:	2b00      	cmp	r3, #0
  4062a6:	d0f0      	beq.n	40628a <_dtoa_r+0x62>
  4062a8:	78c3      	ldrb	r3, [r0, #3]
  4062aa:	2b00      	cmp	r3, #0
  4062ac:	f000 80b1 	beq.w	406412 <_dtoa_r+0x1ea>
  4062b0:	f100 0308 	add.w	r3, r0, #8
  4062b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4062b6:	6013      	str	r3, [r2, #0]
  4062b8:	b017      	add	sp, #92	; 0x5c
  4062ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4062be:	2301      	movs	r3, #1
  4062c0:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  4062c4:	6023      	str	r3, [r4, #0]
  4062c6:	46c3      	mov	fp, r8
  4062c8:	e7c7      	b.n	40625a <_dtoa_r+0x32>
  4062ca:	aa14      	add	r2, sp, #80	; 0x50
  4062cc:	ab15      	add	r3, sp, #84	; 0x54
  4062ce:	9201      	str	r2, [sp, #4]
  4062d0:	9300      	str	r3, [sp, #0]
  4062d2:	4652      	mov	r2, sl
  4062d4:	465b      	mov	r3, fp
  4062d6:	4648      	mov	r0, r9
  4062d8:	f001 ff50 	bl	40817c <__d2b>
  4062dc:	ea5f 5418 	movs.w	r4, r8, lsr #20
  4062e0:	9008      	str	r0, [sp, #32]
  4062e2:	f040 8088 	bne.w	4063f6 <_dtoa_r+0x1ce>
  4062e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4062e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
  4062ea:	442c      	add	r4, r5
  4062ec:	f204 4332 	addw	r3, r4, #1074	; 0x432
  4062f0:	2b20      	cmp	r3, #32
  4062f2:	f340 8291 	ble.w	406818 <_dtoa_r+0x5f0>
  4062f6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4062fa:	f204 4012 	addw	r0, r4, #1042	; 0x412
  4062fe:	fa08 f803 	lsl.w	r8, r8, r3
  406302:	fa2a f000 	lsr.w	r0, sl, r0
  406306:	ea40 0008 	orr.w	r0, r0, r8
  40630a:	f002 fd55 	bl	408db8 <__aeabi_ui2d>
  40630e:	2301      	movs	r3, #1
  406310:	3c01      	subs	r4, #1
  406312:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406316:	9310      	str	r3, [sp, #64]	; 0x40
  406318:	2200      	movs	r2, #0
  40631a:	4b78      	ldr	r3, [pc, #480]	; (4064fc <_dtoa_r+0x2d4>)
  40631c:	f002 fc0e 	bl	408b3c <__aeabi_dsub>
  406320:	a36d      	add	r3, pc, #436	; (adr r3, 4064d8 <_dtoa_r+0x2b0>)
  406322:	e9d3 2300 	ldrd	r2, r3, [r3]
  406326:	f002 fdbd 	bl	408ea4 <__aeabi_dmul>
  40632a:	a36d      	add	r3, pc, #436	; (adr r3, 4064e0 <_dtoa_r+0x2b8>)
  40632c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406330:	f002 fc06 	bl	408b40 <__adddf3>
  406334:	4606      	mov	r6, r0
  406336:	4620      	mov	r0, r4
  406338:	460f      	mov	r7, r1
  40633a:	f002 fd4d 	bl	408dd8 <__aeabi_i2d>
  40633e:	a36a      	add	r3, pc, #424	; (adr r3, 4064e8 <_dtoa_r+0x2c0>)
  406340:	e9d3 2300 	ldrd	r2, r3, [r3]
  406344:	f002 fdae 	bl	408ea4 <__aeabi_dmul>
  406348:	4602      	mov	r2, r0
  40634a:	460b      	mov	r3, r1
  40634c:	4630      	mov	r0, r6
  40634e:	4639      	mov	r1, r7
  406350:	f002 fbf6 	bl	408b40 <__adddf3>
  406354:	4606      	mov	r6, r0
  406356:	460f      	mov	r7, r1
  406358:	f003 f854 	bl	409404 <__aeabi_d2iz>
  40635c:	2200      	movs	r2, #0
  40635e:	9004      	str	r0, [sp, #16]
  406360:	2300      	movs	r3, #0
  406362:	4630      	mov	r0, r6
  406364:	4639      	mov	r1, r7
  406366:	f003 f80f 	bl	409388 <__aeabi_dcmplt>
  40636a:	2800      	cmp	r0, #0
  40636c:	f040 8230 	bne.w	4067d0 <_dtoa_r+0x5a8>
  406370:	9e04      	ldr	r6, [sp, #16]
  406372:	2e16      	cmp	r6, #22
  406374:	f200 8229 	bhi.w	4067ca <_dtoa_r+0x5a2>
  406378:	4b61      	ldr	r3, [pc, #388]	; (406500 <_dtoa_r+0x2d8>)
  40637a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  40637e:	e9d3 0100 	ldrd	r0, r1, [r3]
  406382:	4652      	mov	r2, sl
  406384:	465b      	mov	r3, fp
  406386:	f003 f81d 	bl	4093c4 <__aeabi_dcmpgt>
  40638a:	2800      	cmp	r0, #0
  40638c:	f000 8249 	beq.w	406822 <_dtoa_r+0x5fa>
  406390:	1e73      	subs	r3, r6, #1
  406392:	9304      	str	r3, [sp, #16]
  406394:	2300      	movs	r3, #0
  406396:	930c      	str	r3, [sp, #48]	; 0x30
  406398:	1b2c      	subs	r4, r5, r4
  40639a:	1e63      	subs	r3, r4, #1
  40639c:	9302      	str	r3, [sp, #8]
  40639e:	f100 8232 	bmi.w	406806 <_dtoa_r+0x5de>
  4063a2:	2300      	movs	r3, #0
  4063a4:	9305      	str	r3, [sp, #20]
  4063a6:	9b04      	ldr	r3, [sp, #16]
  4063a8:	2b00      	cmp	r3, #0
  4063aa:	f2c0 8223 	blt.w	4067f4 <_dtoa_r+0x5cc>
  4063ae:	9a02      	ldr	r2, [sp, #8]
  4063b0:	930b      	str	r3, [sp, #44]	; 0x2c
  4063b2:	4611      	mov	r1, r2
  4063b4:	4419      	add	r1, r3
  4063b6:	2300      	movs	r3, #0
  4063b8:	9102      	str	r1, [sp, #8]
  4063ba:	930a      	str	r3, [sp, #40]	; 0x28
  4063bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4063be:	2b09      	cmp	r3, #9
  4063c0:	d829      	bhi.n	406416 <_dtoa_r+0x1ee>
  4063c2:	2b05      	cmp	r3, #5
  4063c4:	f340 8658 	ble.w	407078 <_dtoa_r+0xe50>
  4063c8:	3b04      	subs	r3, #4
  4063ca:	9320      	str	r3, [sp, #128]	; 0x80
  4063cc:	2500      	movs	r5, #0
  4063ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4063d0:	3b02      	subs	r3, #2
  4063d2:	2b03      	cmp	r3, #3
  4063d4:	f200 8635 	bhi.w	407042 <_dtoa_r+0xe1a>
  4063d8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4063dc:	0228032c 	.word	0x0228032c
  4063e0:	04590337 	.word	0x04590337
  4063e4:	4b44      	ldr	r3, [pc, #272]	; (4064f8 <_dtoa_r+0x2d0>)
  4063e6:	4a47      	ldr	r2, [pc, #284]	; (406504 <_dtoa_r+0x2dc>)
  4063e8:	f3c8 0013 	ubfx	r0, r8, #0, #20
  4063ec:	2800      	cmp	r0, #0
  4063ee:	bf14      	ite	ne
  4063f0:	4618      	movne	r0, r3
  4063f2:	4610      	moveq	r0, r2
  4063f4:	e755      	b.n	4062a2 <_dtoa_r+0x7a>
  4063f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4063fa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  4063fe:	9510      	str	r5, [sp, #64]	; 0x40
  406400:	4650      	mov	r0, sl
  406402:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  406406:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  40640a:	9d14      	ldr	r5, [sp, #80]	; 0x50
  40640c:	e784      	b.n	406318 <_dtoa_r+0xf0>
  40640e:	483e      	ldr	r0, [pc, #248]	; (406508 <_dtoa_r+0x2e0>)
  406410:	e73b      	b.n	40628a <_dtoa_r+0x62>
  406412:	1cc3      	adds	r3, r0, #3
  406414:	e74e      	b.n	4062b4 <_dtoa_r+0x8c>
  406416:	2100      	movs	r1, #0
  406418:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40641c:	4648      	mov	r0, r9
  40641e:	9120      	str	r1, [sp, #128]	; 0x80
  406420:	f001 fbfa 	bl	407c18 <_Balloc>
  406424:	f04f 33ff 	mov.w	r3, #4294967295
  406428:	9306      	str	r3, [sp, #24]
  40642a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40642c:	930d      	str	r3, [sp, #52]	; 0x34
  40642e:	2301      	movs	r3, #1
  406430:	9007      	str	r0, [sp, #28]
  406432:	9221      	str	r2, [sp, #132]	; 0x84
  406434:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  406438:	9309      	str	r3, [sp, #36]	; 0x24
  40643a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40643c:	2b00      	cmp	r3, #0
  40643e:	f2c0 80d1 	blt.w	4065e4 <_dtoa_r+0x3bc>
  406442:	9a04      	ldr	r2, [sp, #16]
  406444:	2a0e      	cmp	r2, #14
  406446:	f300 80cd 	bgt.w	4065e4 <_dtoa_r+0x3bc>
  40644a:	4b2d      	ldr	r3, [pc, #180]	; (406500 <_dtoa_r+0x2d8>)
  40644c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406450:	e9d3 3400 	ldrd	r3, r4, [r3]
  406454:	e9cd 3402 	strd	r3, r4, [sp, #8]
  406458:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40645a:	2b00      	cmp	r3, #0
  40645c:	f2c0 8300 	blt.w	406a60 <_dtoa_r+0x838>
  406460:	4656      	mov	r6, sl
  406462:	465f      	mov	r7, fp
  406464:	4650      	mov	r0, sl
  406466:	4659      	mov	r1, fp
  406468:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  40646c:	4652      	mov	r2, sl
  40646e:	465b      	mov	r3, fp
  406470:	f002 fe42 	bl	4090f8 <__aeabi_ddiv>
  406474:	f002 ffc6 	bl	409404 <__aeabi_d2iz>
  406478:	4604      	mov	r4, r0
  40647a:	f002 fcad 	bl	408dd8 <__aeabi_i2d>
  40647e:	4652      	mov	r2, sl
  406480:	465b      	mov	r3, fp
  406482:	f002 fd0f 	bl	408ea4 <__aeabi_dmul>
  406486:	460b      	mov	r3, r1
  406488:	4602      	mov	r2, r0
  40648a:	4639      	mov	r1, r7
  40648c:	4630      	mov	r0, r6
  40648e:	f002 fb55 	bl	408b3c <__aeabi_dsub>
  406492:	9d07      	ldr	r5, [sp, #28]
  406494:	f104 0330 	add.w	r3, r4, #48	; 0x30
  406498:	702b      	strb	r3, [r5, #0]
  40649a:	9b06      	ldr	r3, [sp, #24]
  40649c:	2b01      	cmp	r3, #1
  40649e:	4606      	mov	r6, r0
  4064a0:	460f      	mov	r7, r1
  4064a2:	f105 0501 	add.w	r5, r5, #1
  4064a6:	d062      	beq.n	40656e <_dtoa_r+0x346>
  4064a8:	2200      	movs	r2, #0
  4064aa:	4b18      	ldr	r3, [pc, #96]	; (40650c <_dtoa_r+0x2e4>)
  4064ac:	f002 fcfa 	bl	408ea4 <__aeabi_dmul>
  4064b0:	2200      	movs	r2, #0
  4064b2:	2300      	movs	r3, #0
  4064b4:	4606      	mov	r6, r0
  4064b6:	460f      	mov	r7, r1
  4064b8:	f002 ff5c 	bl	409374 <__aeabi_dcmpeq>
  4064bc:	2800      	cmp	r0, #0
  4064be:	d17e      	bne.n	4065be <_dtoa_r+0x396>
  4064c0:	f8cd 9014 	str.w	r9, [sp, #20]
  4064c4:	f8dd a018 	ldr.w	sl, [sp, #24]
  4064c8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4064cc:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4064d0:	e029      	b.n	406526 <_dtoa_r+0x2fe>
  4064d2:	bf00      	nop
  4064d4:	f3af 8000 	nop.w
  4064d8:	636f4361 	.word	0x636f4361
  4064dc:	3fd287a7 	.word	0x3fd287a7
  4064e0:	8b60c8b3 	.word	0x8b60c8b3
  4064e4:	3fc68a28 	.word	0x3fc68a28
  4064e8:	509f79fb 	.word	0x509f79fb
  4064ec:	3fd34413 	.word	0x3fd34413
  4064f0:	7ff00000 	.word	0x7ff00000
  4064f4:	00409905 	.word	0x00409905
  4064f8:	00409944 	.word	0x00409944
  4064fc:	3ff80000 	.word	0x3ff80000
  406500:	00409958 	.word	0x00409958
  406504:	00409938 	.word	0x00409938
  406508:	00409904 	.word	0x00409904
  40650c:	40240000 	.word	0x40240000
  406510:	f002 fcc8 	bl	408ea4 <__aeabi_dmul>
  406514:	2200      	movs	r2, #0
  406516:	2300      	movs	r3, #0
  406518:	4606      	mov	r6, r0
  40651a:	460f      	mov	r7, r1
  40651c:	f002 ff2a 	bl	409374 <__aeabi_dcmpeq>
  406520:	2800      	cmp	r0, #0
  406522:	f040 83b7 	bne.w	406c94 <_dtoa_r+0xa6c>
  406526:	4642      	mov	r2, r8
  406528:	464b      	mov	r3, r9
  40652a:	4630      	mov	r0, r6
  40652c:	4639      	mov	r1, r7
  40652e:	f002 fde3 	bl	4090f8 <__aeabi_ddiv>
  406532:	f002 ff67 	bl	409404 <__aeabi_d2iz>
  406536:	4604      	mov	r4, r0
  406538:	f002 fc4e 	bl	408dd8 <__aeabi_i2d>
  40653c:	4642      	mov	r2, r8
  40653e:	464b      	mov	r3, r9
  406540:	f002 fcb0 	bl	408ea4 <__aeabi_dmul>
  406544:	4602      	mov	r2, r0
  406546:	460b      	mov	r3, r1
  406548:	4630      	mov	r0, r6
  40654a:	4639      	mov	r1, r7
  40654c:	f002 faf6 	bl	408b3c <__aeabi_dsub>
  406550:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406554:	f805 eb01 	strb.w	lr, [r5], #1
  406558:	ebcb 0e05 	rsb	lr, fp, r5
  40655c:	45d6      	cmp	lr, sl
  40655e:	4606      	mov	r6, r0
  406560:	460f      	mov	r7, r1
  406562:	f04f 0200 	mov.w	r2, #0
  406566:	4bb0      	ldr	r3, [pc, #704]	; (406828 <_dtoa_r+0x600>)
  406568:	d1d2      	bne.n	406510 <_dtoa_r+0x2e8>
  40656a:	f8dd 9014 	ldr.w	r9, [sp, #20]
  40656e:	4632      	mov	r2, r6
  406570:	463b      	mov	r3, r7
  406572:	4630      	mov	r0, r6
  406574:	4639      	mov	r1, r7
  406576:	f002 fae3 	bl	408b40 <__adddf3>
  40657a:	4606      	mov	r6, r0
  40657c:	460f      	mov	r7, r1
  40657e:	4602      	mov	r2, r0
  406580:	460b      	mov	r3, r1
  406582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406586:	f002 feff 	bl	409388 <__aeabi_dcmplt>
  40658a:	b940      	cbnz	r0, 40659e <_dtoa_r+0x376>
  40658c:	4632      	mov	r2, r6
  40658e:	463b      	mov	r3, r7
  406590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406594:	f002 feee 	bl	409374 <__aeabi_dcmpeq>
  406598:	b188      	cbz	r0, 4065be <_dtoa_r+0x396>
  40659a:	07e3      	lsls	r3, r4, #31
  40659c:	d50f      	bpl.n	4065be <_dtoa_r+0x396>
  40659e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4065a2:	9a07      	ldr	r2, [sp, #28]
  4065a4:	1e6b      	subs	r3, r5, #1
  4065a6:	e004      	b.n	4065b2 <_dtoa_r+0x38a>
  4065a8:	429a      	cmp	r2, r3
  4065aa:	f000 842c 	beq.w	406e06 <_dtoa_r+0xbde>
  4065ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4065b2:	2c39      	cmp	r4, #57	; 0x39
  4065b4:	f103 0501 	add.w	r5, r3, #1
  4065b8:	d0f6      	beq.n	4065a8 <_dtoa_r+0x380>
  4065ba:	3401      	adds	r4, #1
  4065bc:	701c      	strb	r4, [r3, #0]
  4065be:	9908      	ldr	r1, [sp, #32]
  4065c0:	4648      	mov	r0, r9
  4065c2:	f001 fb4f 	bl	407c64 <_Bfree>
  4065c6:	2200      	movs	r2, #0
  4065c8:	9b04      	ldr	r3, [sp, #16]
  4065ca:	702a      	strb	r2, [r5, #0]
  4065cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
  4065ce:	3301      	adds	r3, #1
  4065d0:	6013      	str	r3, [r2, #0]
  4065d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4065d4:	2b00      	cmp	r3, #0
  4065d6:	f000 83a7 	beq.w	406d28 <_dtoa_r+0xb00>
  4065da:	9807      	ldr	r0, [sp, #28]
  4065dc:	601d      	str	r5, [r3, #0]
  4065de:	b017      	add	sp, #92	; 0x5c
  4065e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4065e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4065e6:	2a00      	cmp	r2, #0
  4065e8:	f000 8112 	beq.w	406810 <_dtoa_r+0x5e8>
  4065ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4065ee:	2a01      	cmp	r2, #1
  4065f0:	f340 8258 	ble.w	406aa4 <_dtoa_r+0x87c>
  4065f4:	9b06      	ldr	r3, [sp, #24]
  4065f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4065f8:	1e5f      	subs	r7, r3, #1
  4065fa:	42ba      	cmp	r2, r7
  4065fc:	f2c0 8397 	blt.w	406d2e <_dtoa_r+0xb06>
  406600:	1bd7      	subs	r7, r2, r7
  406602:	9b06      	ldr	r3, [sp, #24]
  406604:	2b00      	cmp	r3, #0
  406606:	f2c0 848a 	blt.w	406f1e <_dtoa_r+0xcf6>
  40660a:	9d05      	ldr	r5, [sp, #20]
  40660c:	9b06      	ldr	r3, [sp, #24]
  40660e:	9a05      	ldr	r2, [sp, #20]
  406610:	441a      	add	r2, r3
  406612:	9205      	str	r2, [sp, #20]
  406614:	9a02      	ldr	r2, [sp, #8]
  406616:	2101      	movs	r1, #1
  406618:	441a      	add	r2, r3
  40661a:	4648      	mov	r0, r9
  40661c:	9202      	str	r2, [sp, #8]
  40661e:	f001 fbb9 	bl	407d94 <__i2b>
  406622:	4606      	mov	r6, r0
  406624:	b165      	cbz	r5, 406640 <_dtoa_r+0x418>
  406626:	9902      	ldr	r1, [sp, #8]
  406628:	2900      	cmp	r1, #0
  40662a:	460b      	mov	r3, r1
  40662c:	dd08      	ble.n	406640 <_dtoa_r+0x418>
  40662e:	42a9      	cmp	r1, r5
  406630:	9a05      	ldr	r2, [sp, #20]
  406632:	bfa8      	it	ge
  406634:	462b      	movge	r3, r5
  406636:	1ad2      	subs	r2, r2, r3
  406638:	1aed      	subs	r5, r5, r3
  40663a:	1acb      	subs	r3, r1, r3
  40663c:	9205      	str	r2, [sp, #20]
  40663e:	9302      	str	r3, [sp, #8]
  406640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406642:	2b00      	cmp	r3, #0
  406644:	f340 82fc 	ble.w	406c40 <_dtoa_r+0xa18>
  406648:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40664a:	2a00      	cmp	r2, #0
  40664c:	f000 8201 	beq.w	406a52 <_dtoa_r+0x82a>
  406650:	2f00      	cmp	r7, #0
  406652:	f000 81fe 	beq.w	406a52 <_dtoa_r+0x82a>
  406656:	4631      	mov	r1, r6
  406658:	463a      	mov	r2, r7
  40665a:	4648      	mov	r0, r9
  40665c:	f001 fc3c 	bl	407ed8 <__pow5mult>
  406660:	f8dd 8020 	ldr.w	r8, [sp, #32]
  406664:	4601      	mov	r1, r0
  406666:	4642      	mov	r2, r8
  406668:	4606      	mov	r6, r0
  40666a:	4648      	mov	r0, r9
  40666c:	f001 fb9c 	bl	407da8 <__multiply>
  406670:	4641      	mov	r1, r8
  406672:	4604      	mov	r4, r0
  406674:	4648      	mov	r0, r9
  406676:	f001 faf5 	bl	407c64 <_Bfree>
  40667a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40667c:	1bdb      	subs	r3, r3, r7
  40667e:	930a      	str	r3, [sp, #40]	; 0x28
  406680:	f040 81e6 	bne.w	406a50 <_dtoa_r+0x828>
  406684:	2101      	movs	r1, #1
  406686:	4648      	mov	r0, r9
  406688:	f001 fb84 	bl	407d94 <__i2b>
  40668c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40668e:	4680      	mov	r8, r0
  406690:	2b00      	cmp	r3, #0
  406692:	f000 8219 	beq.w	406ac8 <_dtoa_r+0x8a0>
  406696:	4601      	mov	r1, r0
  406698:	461a      	mov	r2, r3
  40669a:	4648      	mov	r0, r9
  40669c:	f001 fc1c 	bl	407ed8 <__pow5mult>
  4066a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4066a2:	2b01      	cmp	r3, #1
  4066a4:	4680      	mov	r8, r0
  4066a6:	f340 82f8 	ble.w	406c9a <_dtoa_r+0xa72>
  4066aa:	2700      	movs	r7, #0
  4066ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4066b0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4066b4:	6918      	ldr	r0, [r3, #16]
  4066b6:	f001 fb1f 	bl	407cf8 <__hi0bits>
  4066ba:	f1c0 0020 	rsb	r0, r0, #32
  4066be:	9a02      	ldr	r2, [sp, #8]
  4066c0:	4410      	add	r0, r2
  4066c2:	f010 001f 	ands.w	r0, r0, #31
  4066c6:	f000 81f6 	beq.w	406ab6 <_dtoa_r+0x88e>
  4066ca:	f1c0 0320 	rsb	r3, r0, #32
  4066ce:	2b04      	cmp	r3, #4
  4066d0:	f340 84ca 	ble.w	407068 <_dtoa_r+0xe40>
  4066d4:	9b05      	ldr	r3, [sp, #20]
  4066d6:	f1c0 001c 	rsb	r0, r0, #28
  4066da:	4403      	add	r3, r0
  4066dc:	9305      	str	r3, [sp, #20]
  4066de:	4613      	mov	r3, r2
  4066e0:	4403      	add	r3, r0
  4066e2:	4405      	add	r5, r0
  4066e4:	9302      	str	r3, [sp, #8]
  4066e6:	9b05      	ldr	r3, [sp, #20]
  4066e8:	2b00      	cmp	r3, #0
  4066ea:	dd05      	ble.n	4066f8 <_dtoa_r+0x4d0>
  4066ec:	4621      	mov	r1, r4
  4066ee:	461a      	mov	r2, r3
  4066f0:	4648      	mov	r0, r9
  4066f2:	f001 fc41 	bl	407f78 <__lshift>
  4066f6:	4604      	mov	r4, r0
  4066f8:	9b02      	ldr	r3, [sp, #8]
  4066fa:	2b00      	cmp	r3, #0
  4066fc:	dd05      	ble.n	40670a <_dtoa_r+0x4e2>
  4066fe:	4641      	mov	r1, r8
  406700:	461a      	mov	r2, r3
  406702:	4648      	mov	r0, r9
  406704:	f001 fc38 	bl	407f78 <__lshift>
  406708:	4680      	mov	r8, r0
  40670a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40670c:	2b00      	cmp	r3, #0
  40670e:	f040 827c 	bne.w	406c0a <_dtoa_r+0x9e2>
  406712:	9b06      	ldr	r3, [sp, #24]
  406714:	2b00      	cmp	r3, #0
  406716:	f340 8295 	ble.w	406c44 <_dtoa_r+0xa1c>
  40671a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40671c:	2b00      	cmp	r3, #0
  40671e:	f040 81f5 	bne.w	406b0c <_dtoa_r+0x8e4>
  406722:	f8dd b01c 	ldr.w	fp, [sp, #28]
  406726:	9f06      	ldr	r7, [sp, #24]
  406728:	465d      	mov	r5, fp
  40672a:	e002      	b.n	406732 <_dtoa_r+0x50a>
  40672c:	f001 faa4 	bl	407c78 <__multadd>
  406730:	4604      	mov	r4, r0
  406732:	4641      	mov	r1, r8
  406734:	4620      	mov	r0, r4
  406736:	f7ff fce3 	bl	406100 <quorem>
  40673a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40673e:	f805 ab01 	strb.w	sl, [r5], #1
  406742:	ebcb 0305 	rsb	r3, fp, r5
  406746:	42bb      	cmp	r3, r7
  406748:	f04f 020a 	mov.w	r2, #10
  40674c:	f04f 0300 	mov.w	r3, #0
  406750:	4621      	mov	r1, r4
  406752:	4648      	mov	r0, r9
  406754:	dbea      	blt.n	40672c <_dtoa_r+0x504>
  406756:	9b07      	ldr	r3, [sp, #28]
  406758:	9a06      	ldr	r2, [sp, #24]
  40675a:	2a01      	cmp	r2, #1
  40675c:	bfac      	ite	ge
  40675e:	189b      	addge	r3, r3, r2
  406760:	3301      	addlt	r3, #1
  406762:	461d      	mov	r5, r3
  406764:	f04f 0b00 	mov.w	fp, #0
  406768:	4621      	mov	r1, r4
  40676a:	2201      	movs	r2, #1
  40676c:	4648      	mov	r0, r9
  40676e:	f001 fc03 	bl	407f78 <__lshift>
  406772:	4641      	mov	r1, r8
  406774:	9008      	str	r0, [sp, #32]
  406776:	f001 fc57 	bl	408028 <__mcmp>
  40677a:	2800      	cmp	r0, #0
  40677c:	f340 830d 	ble.w	406d9a <_dtoa_r+0xb72>
  406780:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406784:	9907      	ldr	r1, [sp, #28]
  406786:	1e6b      	subs	r3, r5, #1
  406788:	e004      	b.n	406794 <_dtoa_r+0x56c>
  40678a:	428b      	cmp	r3, r1
  40678c:	f000 8278 	beq.w	406c80 <_dtoa_r+0xa58>
  406790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406794:	2a39      	cmp	r2, #57	; 0x39
  406796:	f103 0501 	add.w	r5, r3, #1
  40679a:	d0f6      	beq.n	40678a <_dtoa_r+0x562>
  40679c:	3201      	adds	r2, #1
  40679e:	701a      	strb	r2, [r3, #0]
  4067a0:	4641      	mov	r1, r8
  4067a2:	4648      	mov	r0, r9
  4067a4:	f001 fa5e 	bl	407c64 <_Bfree>
  4067a8:	2e00      	cmp	r6, #0
  4067aa:	f43f af08 	beq.w	4065be <_dtoa_r+0x396>
  4067ae:	f1bb 0f00 	cmp.w	fp, #0
  4067b2:	d005      	beq.n	4067c0 <_dtoa_r+0x598>
  4067b4:	45b3      	cmp	fp, r6
  4067b6:	d003      	beq.n	4067c0 <_dtoa_r+0x598>
  4067b8:	4659      	mov	r1, fp
  4067ba:	4648      	mov	r0, r9
  4067bc:	f001 fa52 	bl	407c64 <_Bfree>
  4067c0:	4631      	mov	r1, r6
  4067c2:	4648      	mov	r0, r9
  4067c4:	f001 fa4e 	bl	407c64 <_Bfree>
  4067c8:	e6f9      	b.n	4065be <_dtoa_r+0x396>
  4067ca:	2301      	movs	r3, #1
  4067cc:	930c      	str	r3, [sp, #48]	; 0x30
  4067ce:	e5e3      	b.n	406398 <_dtoa_r+0x170>
  4067d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4067d4:	4640      	mov	r0, r8
  4067d6:	f002 faff 	bl	408dd8 <__aeabi_i2d>
  4067da:	4602      	mov	r2, r0
  4067dc:	460b      	mov	r3, r1
  4067de:	4630      	mov	r0, r6
  4067e0:	4639      	mov	r1, r7
  4067e2:	f002 fdc7 	bl	409374 <__aeabi_dcmpeq>
  4067e6:	2800      	cmp	r0, #0
  4067e8:	f47f adc2 	bne.w	406370 <_dtoa_r+0x148>
  4067ec:	f108 33ff 	add.w	r3, r8, #4294967295
  4067f0:	9304      	str	r3, [sp, #16]
  4067f2:	e5bd      	b.n	406370 <_dtoa_r+0x148>
  4067f4:	9a05      	ldr	r2, [sp, #20]
  4067f6:	9b04      	ldr	r3, [sp, #16]
  4067f8:	1ad2      	subs	r2, r2, r3
  4067fa:	425b      	negs	r3, r3
  4067fc:	930a      	str	r3, [sp, #40]	; 0x28
  4067fe:	2300      	movs	r3, #0
  406800:	9205      	str	r2, [sp, #20]
  406802:	930b      	str	r3, [sp, #44]	; 0x2c
  406804:	e5da      	b.n	4063bc <_dtoa_r+0x194>
  406806:	425b      	negs	r3, r3
  406808:	9305      	str	r3, [sp, #20]
  40680a:	2300      	movs	r3, #0
  40680c:	9302      	str	r3, [sp, #8]
  40680e:	e5ca      	b.n	4063a6 <_dtoa_r+0x17e>
  406810:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406812:	9d05      	ldr	r5, [sp, #20]
  406814:	9e09      	ldr	r6, [sp, #36]	; 0x24
  406816:	e705      	b.n	406624 <_dtoa_r+0x3fc>
  406818:	f1c3 0820 	rsb	r8, r3, #32
  40681c:	fa0a f008 	lsl.w	r0, sl, r8
  406820:	e573      	b.n	40630a <_dtoa_r+0xe2>
  406822:	900c      	str	r0, [sp, #48]	; 0x30
  406824:	e5b8      	b.n	406398 <_dtoa_r+0x170>
  406826:	bf00      	nop
  406828:	40240000 	.word	0x40240000
  40682c:	2300      	movs	r3, #0
  40682e:	9309      	str	r3, [sp, #36]	; 0x24
  406830:	9b04      	ldr	r3, [sp, #16]
  406832:	9a21      	ldr	r2, [sp, #132]	; 0x84
  406834:	4413      	add	r3, r2
  406836:	930d      	str	r3, [sp, #52]	; 0x34
  406838:	3301      	adds	r3, #1
  40683a:	2b00      	cmp	r3, #0
  40683c:	9306      	str	r3, [sp, #24]
  40683e:	f340 8283 	ble.w	406d48 <_dtoa_r+0xb20>
  406842:	9c06      	ldr	r4, [sp, #24]
  406844:	4626      	mov	r6, r4
  406846:	2100      	movs	r1, #0
  406848:	2e17      	cmp	r6, #23
  40684a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  40684e:	d90b      	bls.n	406868 <_dtoa_r+0x640>
  406850:	2201      	movs	r2, #1
  406852:	2304      	movs	r3, #4
  406854:	005b      	lsls	r3, r3, #1
  406856:	f103 0014 	add.w	r0, r3, #20
  40685a:	42b0      	cmp	r0, r6
  40685c:	4611      	mov	r1, r2
  40685e:	f102 0201 	add.w	r2, r2, #1
  406862:	d9f7      	bls.n	406854 <_dtoa_r+0x62c>
  406864:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  406868:	4648      	mov	r0, r9
  40686a:	f001 f9d5 	bl	407c18 <_Balloc>
  40686e:	2c0e      	cmp	r4, #14
  406870:	9007      	str	r0, [sp, #28]
  406872:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  406876:	f63f ade0 	bhi.w	40643a <_dtoa_r+0x212>
  40687a:	2d00      	cmp	r5, #0
  40687c:	f43f addd 	beq.w	40643a <_dtoa_r+0x212>
  406880:	9904      	ldr	r1, [sp, #16]
  406882:	4657      	mov	r7, sl
  406884:	46d8      	mov	r8, fp
  406886:	2900      	cmp	r1, #0
  406888:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  40688c:	f340 8292 	ble.w	406db4 <_dtoa_r+0xb8c>
  406890:	4b91      	ldr	r3, [pc, #580]	; (406ad8 <_dtoa_r+0x8b0>)
  406892:	f001 020f 	and.w	r2, r1, #15
  406896:	110e      	asrs	r6, r1, #4
  406898:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40689c:	06f0      	lsls	r0, r6, #27
  40689e:	e9d3 4500 	ldrd	r4, r5, [r3]
  4068a2:	f140 824c 	bpl.w	406d3e <_dtoa_r+0xb16>
  4068a6:	4b8d      	ldr	r3, [pc, #564]	; (406adc <_dtoa_r+0x8b4>)
  4068a8:	4650      	mov	r0, sl
  4068aa:	4659      	mov	r1, fp
  4068ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  4068b0:	f002 fc22 	bl	4090f8 <__aeabi_ddiv>
  4068b4:	f006 060f 	and.w	r6, r6, #15
  4068b8:	4682      	mov	sl, r0
  4068ba:	468b      	mov	fp, r1
  4068bc:	f04f 0803 	mov.w	r8, #3
  4068c0:	b186      	cbz	r6, 4068e4 <_dtoa_r+0x6bc>
  4068c2:	4f86      	ldr	r7, [pc, #536]	; (406adc <_dtoa_r+0x8b4>)
  4068c4:	07f1      	lsls	r1, r6, #31
  4068c6:	d509      	bpl.n	4068dc <_dtoa_r+0x6b4>
  4068c8:	4620      	mov	r0, r4
  4068ca:	4629      	mov	r1, r5
  4068cc:	e9d7 2300 	ldrd	r2, r3, [r7]
  4068d0:	f002 fae8 	bl	408ea4 <__aeabi_dmul>
  4068d4:	f108 0801 	add.w	r8, r8, #1
  4068d8:	4604      	mov	r4, r0
  4068da:	460d      	mov	r5, r1
  4068dc:	1076      	asrs	r6, r6, #1
  4068de:	f107 0708 	add.w	r7, r7, #8
  4068e2:	d1ef      	bne.n	4068c4 <_dtoa_r+0x69c>
  4068e4:	4622      	mov	r2, r4
  4068e6:	462b      	mov	r3, r5
  4068e8:	4650      	mov	r0, sl
  4068ea:	4659      	mov	r1, fp
  4068ec:	f002 fc04 	bl	4090f8 <__aeabi_ddiv>
  4068f0:	4606      	mov	r6, r0
  4068f2:	460f      	mov	r7, r1
  4068f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4068f6:	b143      	cbz	r3, 40690a <_dtoa_r+0x6e2>
  4068f8:	2200      	movs	r2, #0
  4068fa:	4b79      	ldr	r3, [pc, #484]	; (406ae0 <_dtoa_r+0x8b8>)
  4068fc:	4630      	mov	r0, r6
  4068fe:	4639      	mov	r1, r7
  406900:	f002 fd42 	bl	409388 <__aeabi_dcmplt>
  406904:	2800      	cmp	r0, #0
  406906:	f040 8320 	bne.w	406f4a <_dtoa_r+0xd22>
  40690a:	4640      	mov	r0, r8
  40690c:	f002 fa64 	bl	408dd8 <__aeabi_i2d>
  406910:	4632      	mov	r2, r6
  406912:	463b      	mov	r3, r7
  406914:	f002 fac6 	bl	408ea4 <__aeabi_dmul>
  406918:	4b72      	ldr	r3, [pc, #456]	; (406ae4 <_dtoa_r+0x8bc>)
  40691a:	2200      	movs	r2, #0
  40691c:	f002 f910 	bl	408b40 <__adddf3>
  406920:	9b06      	ldr	r3, [sp, #24]
  406922:	4604      	mov	r4, r0
  406924:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406928:	2b00      	cmp	r3, #0
  40692a:	f000 81df 	beq.w	406cec <_dtoa_r+0xac4>
  40692e:	9b04      	ldr	r3, [sp, #16]
  406930:	f8dd 8018 	ldr.w	r8, [sp, #24]
  406934:	9311      	str	r3, [sp, #68]	; 0x44
  406936:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406938:	2b00      	cmp	r3, #0
  40693a:	f000 8297 	beq.w	406e6c <_dtoa_r+0xc44>
  40693e:	4b66      	ldr	r3, [pc, #408]	; (406ad8 <_dtoa_r+0x8b0>)
  406940:	4969      	ldr	r1, [pc, #420]	; (406ae8 <_dtoa_r+0x8c0>)
  406942:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  406946:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  40694a:	2000      	movs	r0, #0
  40694c:	f002 fbd4 	bl	4090f8 <__aeabi_ddiv>
  406950:	4622      	mov	r2, r4
  406952:	462b      	mov	r3, r5
  406954:	f002 f8f2 	bl	408b3c <__aeabi_dsub>
  406958:	4682      	mov	sl, r0
  40695a:	468b      	mov	fp, r1
  40695c:	4630      	mov	r0, r6
  40695e:	4639      	mov	r1, r7
  406960:	f002 fd50 	bl	409404 <__aeabi_d2iz>
  406964:	4604      	mov	r4, r0
  406966:	f002 fa37 	bl	408dd8 <__aeabi_i2d>
  40696a:	4602      	mov	r2, r0
  40696c:	460b      	mov	r3, r1
  40696e:	4630      	mov	r0, r6
  406970:	4639      	mov	r1, r7
  406972:	f002 f8e3 	bl	408b3c <__aeabi_dsub>
  406976:	3430      	adds	r4, #48	; 0x30
  406978:	9d07      	ldr	r5, [sp, #28]
  40697a:	b2e4      	uxtb	r4, r4
  40697c:	4606      	mov	r6, r0
  40697e:	460f      	mov	r7, r1
  406980:	702c      	strb	r4, [r5, #0]
  406982:	4602      	mov	r2, r0
  406984:	460b      	mov	r3, r1
  406986:	4650      	mov	r0, sl
  406988:	4659      	mov	r1, fp
  40698a:	3501      	adds	r5, #1
  40698c:	f002 fd1a 	bl	4093c4 <__aeabi_dcmpgt>
  406990:	2800      	cmp	r0, #0
  406992:	d14c      	bne.n	406a2e <_dtoa_r+0x806>
  406994:	4632      	mov	r2, r6
  406996:	463b      	mov	r3, r7
  406998:	2000      	movs	r0, #0
  40699a:	4951      	ldr	r1, [pc, #324]	; (406ae0 <_dtoa_r+0x8b8>)
  40699c:	f002 f8ce 	bl	408b3c <__aeabi_dsub>
  4069a0:	4602      	mov	r2, r0
  4069a2:	460b      	mov	r3, r1
  4069a4:	4650      	mov	r0, sl
  4069a6:	4659      	mov	r1, fp
  4069a8:	f002 fd0c 	bl	4093c4 <__aeabi_dcmpgt>
  4069ac:	2800      	cmp	r0, #0
  4069ae:	f040 830d 	bne.w	406fcc <_dtoa_r+0xda4>
  4069b2:	f1b8 0f01 	cmp.w	r8, #1
  4069b6:	f340 81b3 	ble.w	406d20 <_dtoa_r+0xaf8>
  4069ba:	9b07      	ldr	r3, [sp, #28]
  4069bc:	4498      	add	r8, r3
  4069be:	e00d      	b.n	4069dc <_dtoa_r+0x7b4>
  4069c0:	2000      	movs	r0, #0
  4069c2:	4947      	ldr	r1, [pc, #284]	; (406ae0 <_dtoa_r+0x8b8>)
  4069c4:	f002 f8ba 	bl	408b3c <__aeabi_dsub>
  4069c8:	4652      	mov	r2, sl
  4069ca:	465b      	mov	r3, fp
  4069cc:	f002 fcdc 	bl	409388 <__aeabi_dcmplt>
  4069d0:	2800      	cmp	r0, #0
  4069d2:	f040 82fb 	bne.w	406fcc <_dtoa_r+0xda4>
  4069d6:	4545      	cmp	r5, r8
  4069d8:	f000 81a2 	beq.w	406d20 <_dtoa_r+0xaf8>
  4069dc:	4650      	mov	r0, sl
  4069de:	4659      	mov	r1, fp
  4069e0:	2200      	movs	r2, #0
  4069e2:	4b42      	ldr	r3, [pc, #264]	; (406aec <_dtoa_r+0x8c4>)
  4069e4:	f002 fa5e 	bl	408ea4 <__aeabi_dmul>
  4069e8:	2200      	movs	r2, #0
  4069ea:	4b40      	ldr	r3, [pc, #256]	; (406aec <_dtoa_r+0x8c4>)
  4069ec:	4682      	mov	sl, r0
  4069ee:	468b      	mov	fp, r1
  4069f0:	4630      	mov	r0, r6
  4069f2:	4639      	mov	r1, r7
  4069f4:	f002 fa56 	bl	408ea4 <__aeabi_dmul>
  4069f8:	460f      	mov	r7, r1
  4069fa:	4606      	mov	r6, r0
  4069fc:	f002 fd02 	bl	409404 <__aeabi_d2iz>
  406a00:	4604      	mov	r4, r0
  406a02:	f002 f9e9 	bl	408dd8 <__aeabi_i2d>
  406a06:	4602      	mov	r2, r0
  406a08:	460b      	mov	r3, r1
  406a0a:	4630      	mov	r0, r6
  406a0c:	4639      	mov	r1, r7
  406a0e:	f002 f895 	bl	408b3c <__aeabi_dsub>
  406a12:	3430      	adds	r4, #48	; 0x30
  406a14:	b2e4      	uxtb	r4, r4
  406a16:	4652      	mov	r2, sl
  406a18:	465b      	mov	r3, fp
  406a1a:	f805 4b01 	strb.w	r4, [r5], #1
  406a1e:	4606      	mov	r6, r0
  406a20:	460f      	mov	r7, r1
  406a22:	f002 fcb1 	bl	409388 <__aeabi_dcmplt>
  406a26:	4632      	mov	r2, r6
  406a28:	463b      	mov	r3, r7
  406a2a:	2800      	cmp	r0, #0
  406a2c:	d0c8      	beq.n	4069c0 <_dtoa_r+0x798>
  406a2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406a30:	9304      	str	r3, [sp, #16]
  406a32:	e5c4      	b.n	4065be <_dtoa_r+0x396>
  406a34:	2300      	movs	r3, #0
  406a36:	9309      	str	r3, [sp, #36]	; 0x24
  406a38:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406a3a:	2b00      	cmp	r3, #0
  406a3c:	f340 8189 	ble.w	406d52 <_dtoa_r+0xb2a>
  406a40:	461e      	mov	r6, r3
  406a42:	461c      	mov	r4, r3
  406a44:	930d      	str	r3, [sp, #52]	; 0x34
  406a46:	9306      	str	r3, [sp, #24]
  406a48:	e6fd      	b.n	406846 <_dtoa_r+0x61e>
  406a4a:	2301      	movs	r3, #1
  406a4c:	9309      	str	r3, [sp, #36]	; 0x24
  406a4e:	e7f3      	b.n	406a38 <_dtoa_r+0x810>
  406a50:	9408      	str	r4, [sp, #32]
  406a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406a54:	9908      	ldr	r1, [sp, #32]
  406a56:	4648      	mov	r0, r9
  406a58:	f001 fa3e 	bl	407ed8 <__pow5mult>
  406a5c:	4604      	mov	r4, r0
  406a5e:	e611      	b.n	406684 <_dtoa_r+0x45c>
  406a60:	9b06      	ldr	r3, [sp, #24]
  406a62:	2b00      	cmp	r3, #0
  406a64:	f73f acfc 	bgt.w	406460 <_dtoa_r+0x238>
  406a68:	f040 82da 	bne.w	407020 <_dtoa_r+0xdf8>
  406a6c:	2200      	movs	r2, #0
  406a6e:	4b20      	ldr	r3, [pc, #128]	; (406af0 <_dtoa_r+0x8c8>)
  406a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406a74:	f002 fa16 	bl	408ea4 <__aeabi_dmul>
  406a78:	4652      	mov	r2, sl
  406a7a:	465b      	mov	r3, fp
  406a7c:	f002 fc98 	bl	4093b0 <__aeabi_dcmpge>
  406a80:	f8dd 8018 	ldr.w	r8, [sp, #24]
  406a84:	4646      	mov	r6, r8
  406a86:	2800      	cmp	r0, #0
  406a88:	f000 80f2 	beq.w	406c70 <_dtoa_r+0xa48>
  406a8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406a8e:	9d07      	ldr	r5, [sp, #28]
  406a90:	43db      	mvns	r3, r3
  406a92:	9304      	str	r3, [sp, #16]
  406a94:	4641      	mov	r1, r8
  406a96:	4648      	mov	r0, r9
  406a98:	f001 f8e4 	bl	407c64 <_Bfree>
  406a9c:	2e00      	cmp	r6, #0
  406a9e:	f43f ad8e 	beq.w	4065be <_dtoa_r+0x396>
  406aa2:	e68d      	b.n	4067c0 <_dtoa_r+0x598>
  406aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  406aa6:	2a00      	cmp	r2, #0
  406aa8:	f000 8241 	beq.w	406f2e <_dtoa_r+0xd06>
  406aac:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406ab0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406ab2:	9d05      	ldr	r5, [sp, #20]
  406ab4:	e5ab      	b.n	40660e <_dtoa_r+0x3e6>
  406ab6:	201c      	movs	r0, #28
  406ab8:	9b05      	ldr	r3, [sp, #20]
  406aba:	4403      	add	r3, r0
  406abc:	9305      	str	r3, [sp, #20]
  406abe:	9b02      	ldr	r3, [sp, #8]
  406ac0:	4403      	add	r3, r0
  406ac2:	4405      	add	r5, r0
  406ac4:	9302      	str	r3, [sp, #8]
  406ac6:	e60e      	b.n	4066e6 <_dtoa_r+0x4be>
  406ac8:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406aca:	2b01      	cmp	r3, #1
  406acc:	f340 8282 	ble.w	406fd4 <_dtoa_r+0xdac>
  406ad0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  406ad2:	2001      	movs	r0, #1
  406ad4:	e5f3      	b.n	4066be <_dtoa_r+0x496>
  406ad6:	bf00      	nop
  406ad8:	00409958 	.word	0x00409958
  406adc:	00409a20 	.word	0x00409a20
  406ae0:	3ff00000 	.word	0x3ff00000
  406ae4:	401c0000 	.word	0x401c0000
  406ae8:	3fe00000 	.word	0x3fe00000
  406aec:	40240000 	.word	0x40240000
  406af0:	40140000 	.word	0x40140000
  406af4:	4631      	mov	r1, r6
  406af6:	2300      	movs	r3, #0
  406af8:	220a      	movs	r2, #10
  406afa:	4648      	mov	r0, r9
  406afc:	f001 f8bc 	bl	407c78 <__multadd>
  406b00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406b02:	2b00      	cmp	r3, #0
  406b04:	4606      	mov	r6, r0
  406b06:	f340 8297 	ble.w	407038 <_dtoa_r+0xe10>
  406b0a:	9306      	str	r3, [sp, #24]
  406b0c:	2d00      	cmp	r5, #0
  406b0e:	dd05      	ble.n	406b1c <_dtoa_r+0x8f4>
  406b10:	4631      	mov	r1, r6
  406b12:	462a      	mov	r2, r5
  406b14:	4648      	mov	r0, r9
  406b16:	f001 fa2f 	bl	407f78 <__lshift>
  406b1a:	4606      	mov	r6, r0
  406b1c:	2f00      	cmp	r7, #0
  406b1e:	f040 817c 	bne.w	406e1a <_dtoa_r+0xbf2>
  406b22:	9605      	str	r6, [sp, #20]
  406b24:	9b06      	ldr	r3, [sp, #24]
  406b26:	9a07      	ldr	r2, [sp, #28]
  406b28:	f8dd b014 	ldr.w	fp, [sp, #20]
  406b2c:	3b01      	subs	r3, #1
  406b2e:	18d3      	adds	r3, r2, r3
  406b30:	9308      	str	r3, [sp, #32]
  406b32:	f00a 0301 	and.w	r3, sl, #1
  406b36:	9309      	str	r3, [sp, #36]	; 0x24
  406b38:	4617      	mov	r7, r2
  406b3a:	46c2      	mov	sl, r8
  406b3c:	4651      	mov	r1, sl
  406b3e:	4620      	mov	r0, r4
  406b40:	f7ff fade 	bl	406100 <quorem>
  406b44:	4631      	mov	r1, r6
  406b46:	4605      	mov	r5, r0
  406b48:	4620      	mov	r0, r4
  406b4a:	f001 fa6d 	bl	408028 <__mcmp>
  406b4e:	465a      	mov	r2, fp
  406b50:	9002      	str	r0, [sp, #8]
  406b52:	4651      	mov	r1, sl
  406b54:	4648      	mov	r0, r9
  406b56:	f001 fa87 	bl	408068 <__mdiff>
  406b5a:	68c2      	ldr	r2, [r0, #12]
  406b5c:	4680      	mov	r8, r0
  406b5e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406b62:	2a00      	cmp	r2, #0
  406b64:	d149      	bne.n	406bfa <_dtoa_r+0x9d2>
  406b66:	4601      	mov	r1, r0
  406b68:	4620      	mov	r0, r4
  406b6a:	9306      	str	r3, [sp, #24]
  406b6c:	f001 fa5c 	bl	408028 <__mcmp>
  406b70:	4641      	mov	r1, r8
  406b72:	9005      	str	r0, [sp, #20]
  406b74:	4648      	mov	r0, r9
  406b76:	f001 f875 	bl	407c64 <_Bfree>
  406b7a:	9a05      	ldr	r2, [sp, #20]
  406b7c:	9b06      	ldr	r3, [sp, #24]
  406b7e:	b92a      	cbnz	r2, 406b8c <_dtoa_r+0x964>
  406b80:	9920      	ldr	r1, [sp, #128]	; 0x80
  406b82:	b919      	cbnz	r1, 406b8c <_dtoa_r+0x964>
  406b84:	9909      	ldr	r1, [sp, #36]	; 0x24
  406b86:	2900      	cmp	r1, #0
  406b88:	f000 8236 	beq.w	406ff8 <_dtoa_r+0xdd0>
  406b8c:	9902      	ldr	r1, [sp, #8]
  406b8e:	2900      	cmp	r1, #0
  406b90:	f2c0 80e4 	blt.w	406d5c <_dtoa_r+0xb34>
  406b94:	d105      	bne.n	406ba2 <_dtoa_r+0x97a>
  406b96:	9920      	ldr	r1, [sp, #128]	; 0x80
  406b98:	b919      	cbnz	r1, 406ba2 <_dtoa_r+0x97a>
  406b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
  406b9c:	2900      	cmp	r1, #0
  406b9e:	f000 80dd 	beq.w	406d5c <_dtoa_r+0xb34>
  406ba2:	2a00      	cmp	r2, #0
  406ba4:	f300 814d 	bgt.w	406e42 <_dtoa_r+0xc1a>
  406ba8:	9a08      	ldr	r2, [sp, #32]
  406baa:	703b      	strb	r3, [r7, #0]
  406bac:	f107 0801 	add.w	r8, r7, #1
  406bb0:	4297      	cmp	r7, r2
  406bb2:	4645      	mov	r5, r8
  406bb4:	f000 8154 	beq.w	406e60 <_dtoa_r+0xc38>
  406bb8:	4621      	mov	r1, r4
  406bba:	2300      	movs	r3, #0
  406bbc:	220a      	movs	r2, #10
  406bbe:	4648      	mov	r0, r9
  406bc0:	f001 f85a 	bl	407c78 <__multadd>
  406bc4:	455e      	cmp	r6, fp
  406bc6:	4604      	mov	r4, r0
  406bc8:	4631      	mov	r1, r6
  406bca:	f04f 0300 	mov.w	r3, #0
  406bce:	f04f 020a 	mov.w	r2, #10
  406bd2:	4648      	mov	r0, r9
  406bd4:	d00b      	beq.n	406bee <_dtoa_r+0x9c6>
  406bd6:	f001 f84f 	bl	407c78 <__multadd>
  406bda:	4659      	mov	r1, fp
  406bdc:	4606      	mov	r6, r0
  406bde:	2300      	movs	r3, #0
  406be0:	220a      	movs	r2, #10
  406be2:	4648      	mov	r0, r9
  406be4:	f001 f848 	bl	407c78 <__multadd>
  406be8:	4647      	mov	r7, r8
  406bea:	4683      	mov	fp, r0
  406bec:	e7a6      	b.n	406b3c <_dtoa_r+0x914>
  406bee:	f001 f843 	bl	407c78 <__multadd>
  406bf2:	4647      	mov	r7, r8
  406bf4:	4606      	mov	r6, r0
  406bf6:	4683      	mov	fp, r0
  406bf8:	e7a0      	b.n	406b3c <_dtoa_r+0x914>
  406bfa:	4601      	mov	r1, r0
  406bfc:	4648      	mov	r0, r9
  406bfe:	9305      	str	r3, [sp, #20]
  406c00:	f001 f830 	bl	407c64 <_Bfree>
  406c04:	2201      	movs	r2, #1
  406c06:	9b05      	ldr	r3, [sp, #20]
  406c08:	e7c0      	b.n	406b8c <_dtoa_r+0x964>
  406c0a:	4641      	mov	r1, r8
  406c0c:	4620      	mov	r0, r4
  406c0e:	f001 fa0b 	bl	408028 <__mcmp>
  406c12:	2800      	cmp	r0, #0
  406c14:	f6bf ad7d 	bge.w	406712 <_dtoa_r+0x4ea>
  406c18:	4621      	mov	r1, r4
  406c1a:	9c04      	ldr	r4, [sp, #16]
  406c1c:	2300      	movs	r3, #0
  406c1e:	3c01      	subs	r4, #1
  406c20:	220a      	movs	r2, #10
  406c22:	4648      	mov	r0, r9
  406c24:	9404      	str	r4, [sp, #16]
  406c26:	f001 f827 	bl	407c78 <__multadd>
  406c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c2c:	4604      	mov	r4, r0
  406c2e:	2b00      	cmp	r3, #0
  406c30:	f47f af60 	bne.w	406af4 <_dtoa_r+0x8cc>
  406c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406c36:	2b00      	cmp	r3, #0
  406c38:	f340 81f6 	ble.w	407028 <_dtoa_r+0xe00>
  406c3c:	9306      	str	r3, [sp, #24]
  406c3e:	e570      	b.n	406722 <_dtoa_r+0x4fa>
  406c40:	9c08      	ldr	r4, [sp, #32]
  406c42:	e51f      	b.n	406684 <_dtoa_r+0x45c>
  406c44:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406c46:	2b02      	cmp	r3, #2
  406c48:	f77f ad67 	ble.w	40671a <_dtoa_r+0x4f2>
  406c4c:	9b06      	ldr	r3, [sp, #24]
  406c4e:	2b00      	cmp	r3, #0
  406c50:	f040 8179 	bne.w	406f46 <_dtoa_r+0xd1e>
  406c54:	4641      	mov	r1, r8
  406c56:	2205      	movs	r2, #5
  406c58:	4648      	mov	r0, r9
  406c5a:	f001 f80d 	bl	407c78 <__multadd>
  406c5e:	4601      	mov	r1, r0
  406c60:	4680      	mov	r8, r0
  406c62:	4620      	mov	r0, r4
  406c64:	f001 f9e0 	bl	408028 <__mcmp>
  406c68:	2800      	cmp	r0, #0
  406c6a:	9408      	str	r4, [sp, #32]
  406c6c:	f77f af0e 	ble.w	406a8c <_dtoa_r+0x864>
  406c70:	9a04      	ldr	r2, [sp, #16]
  406c72:	9907      	ldr	r1, [sp, #28]
  406c74:	2331      	movs	r3, #49	; 0x31
  406c76:	3201      	adds	r2, #1
  406c78:	9204      	str	r2, [sp, #16]
  406c7a:	700b      	strb	r3, [r1, #0]
  406c7c:	1c4d      	adds	r5, r1, #1
  406c7e:	e709      	b.n	406a94 <_dtoa_r+0x86c>
  406c80:	9a04      	ldr	r2, [sp, #16]
  406c82:	3201      	adds	r2, #1
  406c84:	9204      	str	r2, [sp, #16]
  406c86:	9a07      	ldr	r2, [sp, #28]
  406c88:	2331      	movs	r3, #49	; 0x31
  406c8a:	7013      	strb	r3, [r2, #0]
  406c8c:	e588      	b.n	4067a0 <_dtoa_r+0x578>
  406c8e:	2301      	movs	r3, #1
  406c90:	9309      	str	r3, [sp, #36]	; 0x24
  406c92:	e5cd      	b.n	406830 <_dtoa_r+0x608>
  406c94:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406c98:	e491      	b.n	4065be <_dtoa_r+0x396>
  406c9a:	f1ba 0f00 	cmp.w	sl, #0
  406c9e:	f47f ad04 	bne.w	4066aa <_dtoa_r+0x482>
  406ca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
  406ca6:	2b00      	cmp	r3, #0
  406ca8:	f040 813f 	bne.w	406f2a <_dtoa_r+0xd02>
  406cac:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406cb0:	0d3f      	lsrs	r7, r7, #20
  406cb2:	053f      	lsls	r7, r7, #20
  406cb4:	b137      	cbz	r7, 406cc4 <_dtoa_r+0xa9c>
  406cb6:	9b05      	ldr	r3, [sp, #20]
  406cb8:	3301      	adds	r3, #1
  406cba:	9305      	str	r3, [sp, #20]
  406cbc:	9b02      	ldr	r3, [sp, #8]
  406cbe:	3301      	adds	r3, #1
  406cc0:	9302      	str	r3, [sp, #8]
  406cc2:	2701      	movs	r7, #1
  406cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406cc6:	2001      	movs	r0, #1
  406cc8:	2b00      	cmp	r3, #0
  406cca:	f43f acf8 	beq.w	4066be <_dtoa_r+0x496>
  406cce:	e4ed      	b.n	4066ac <_dtoa_r+0x484>
  406cd0:	4640      	mov	r0, r8
  406cd2:	f002 f881 	bl	408dd8 <__aeabi_i2d>
  406cd6:	4632      	mov	r2, r6
  406cd8:	463b      	mov	r3, r7
  406cda:	f002 f8e3 	bl	408ea4 <__aeabi_dmul>
  406cde:	2200      	movs	r2, #0
  406ce0:	4bbf      	ldr	r3, [pc, #764]	; (406fe0 <_dtoa_r+0xdb8>)
  406ce2:	f001 ff2d 	bl	408b40 <__adddf3>
  406ce6:	4604      	mov	r4, r0
  406ce8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406cec:	4630      	mov	r0, r6
  406cee:	4639      	mov	r1, r7
  406cf0:	2200      	movs	r2, #0
  406cf2:	4bbc      	ldr	r3, [pc, #752]	; (406fe4 <_dtoa_r+0xdbc>)
  406cf4:	f001 ff22 	bl	408b3c <__aeabi_dsub>
  406cf8:	4622      	mov	r2, r4
  406cfa:	462b      	mov	r3, r5
  406cfc:	4606      	mov	r6, r0
  406cfe:	460f      	mov	r7, r1
  406d00:	f002 fb60 	bl	4093c4 <__aeabi_dcmpgt>
  406d04:	4680      	mov	r8, r0
  406d06:	2800      	cmp	r0, #0
  406d08:	f040 8105 	bne.w	406f16 <_dtoa_r+0xcee>
  406d0c:	4622      	mov	r2, r4
  406d0e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  406d12:	4630      	mov	r0, r6
  406d14:	4639      	mov	r1, r7
  406d16:	f002 fb37 	bl	409388 <__aeabi_dcmplt>
  406d1a:	b108      	cbz	r0, 406d20 <_dtoa_r+0xaf8>
  406d1c:	4646      	mov	r6, r8
  406d1e:	e6b5      	b.n	406a8c <_dtoa_r+0x864>
  406d20:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406d24:	f7ff bb89 	b.w	40643a <_dtoa_r+0x212>
  406d28:	9807      	ldr	r0, [sp, #28]
  406d2a:	f7ff baae 	b.w	40628a <_dtoa_r+0x62>
  406d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406d32:	970a      	str	r7, [sp, #40]	; 0x28
  406d34:	1afb      	subs	r3, r7, r3
  406d36:	441a      	add	r2, r3
  406d38:	920b      	str	r2, [sp, #44]	; 0x2c
  406d3a:	2700      	movs	r7, #0
  406d3c:	e461      	b.n	406602 <_dtoa_r+0x3da>
  406d3e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  406d42:	f04f 0802 	mov.w	r8, #2
  406d46:	e5bb      	b.n	4068c0 <_dtoa_r+0x698>
  406d48:	461c      	mov	r4, r3
  406d4a:	2100      	movs	r1, #0
  406d4c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  406d50:	e58a      	b.n	406868 <_dtoa_r+0x640>
  406d52:	2401      	movs	r4, #1
  406d54:	9421      	str	r4, [sp, #132]	; 0x84
  406d56:	940d      	str	r4, [sp, #52]	; 0x34
  406d58:	9406      	str	r4, [sp, #24]
  406d5a:	e7f6      	b.n	406d4a <_dtoa_r+0xb22>
  406d5c:	2a00      	cmp	r2, #0
  406d5e:	46d0      	mov	r8, sl
  406d60:	f8cd b014 	str.w	fp, [sp, #20]
  406d64:	469a      	mov	sl, r3
  406d66:	dd11      	ble.n	406d8c <_dtoa_r+0xb64>
  406d68:	4621      	mov	r1, r4
  406d6a:	2201      	movs	r2, #1
  406d6c:	4648      	mov	r0, r9
  406d6e:	f001 f903 	bl	407f78 <__lshift>
  406d72:	4641      	mov	r1, r8
  406d74:	4604      	mov	r4, r0
  406d76:	f001 f957 	bl	408028 <__mcmp>
  406d7a:	2800      	cmp	r0, #0
  406d7c:	f340 8149 	ble.w	407012 <_dtoa_r+0xdea>
  406d80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  406d84:	f000 8106 	beq.w	406f94 <_dtoa_r+0xd6c>
  406d88:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406d8c:	46b3      	mov	fp, r6
  406d8e:	f887 a000 	strb.w	sl, [r7]
  406d92:	1c7d      	adds	r5, r7, #1
  406d94:	9e05      	ldr	r6, [sp, #20]
  406d96:	9408      	str	r4, [sp, #32]
  406d98:	e502      	b.n	4067a0 <_dtoa_r+0x578>
  406d9a:	d104      	bne.n	406da6 <_dtoa_r+0xb7e>
  406d9c:	f01a 0f01 	tst.w	sl, #1
  406da0:	d001      	beq.n	406da6 <_dtoa_r+0xb7e>
  406da2:	e4ed      	b.n	406780 <_dtoa_r+0x558>
  406da4:	4615      	mov	r5, r2
  406da6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406daa:	2b30      	cmp	r3, #48	; 0x30
  406dac:	f105 32ff 	add.w	r2, r5, #4294967295
  406db0:	d0f8      	beq.n	406da4 <_dtoa_r+0xb7c>
  406db2:	e4f5      	b.n	4067a0 <_dtoa_r+0x578>
  406db4:	9b04      	ldr	r3, [sp, #16]
  406db6:	425c      	negs	r4, r3
  406db8:	2c00      	cmp	r4, #0
  406dba:	f000 80bf 	beq.w	406f3c <_dtoa_r+0xd14>
  406dbe:	4b8a      	ldr	r3, [pc, #552]	; (406fe8 <_dtoa_r+0xdc0>)
  406dc0:	f004 020f 	and.w	r2, r4, #15
  406dc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  406dcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  406dd0:	f002 f868 	bl	408ea4 <__aeabi_dmul>
  406dd4:	1124      	asrs	r4, r4, #4
  406dd6:	4606      	mov	r6, r0
  406dd8:	460f      	mov	r7, r1
  406dda:	f000 812a 	beq.w	407032 <_dtoa_r+0xe0a>
  406dde:	4d83      	ldr	r5, [pc, #524]	; (406fec <_dtoa_r+0xdc4>)
  406de0:	f04f 0802 	mov.w	r8, #2
  406de4:	07e2      	lsls	r2, r4, #31
  406de6:	d509      	bpl.n	406dfc <_dtoa_r+0xbd4>
  406de8:	4630      	mov	r0, r6
  406dea:	4639      	mov	r1, r7
  406dec:	e9d5 2300 	ldrd	r2, r3, [r5]
  406df0:	f002 f858 	bl	408ea4 <__aeabi_dmul>
  406df4:	f108 0801 	add.w	r8, r8, #1
  406df8:	4606      	mov	r6, r0
  406dfa:	460f      	mov	r7, r1
  406dfc:	1064      	asrs	r4, r4, #1
  406dfe:	f105 0508 	add.w	r5, r5, #8
  406e02:	d1ef      	bne.n	406de4 <_dtoa_r+0xbbc>
  406e04:	e576      	b.n	4068f4 <_dtoa_r+0x6cc>
  406e06:	9907      	ldr	r1, [sp, #28]
  406e08:	2230      	movs	r2, #48	; 0x30
  406e0a:	700a      	strb	r2, [r1, #0]
  406e0c:	9a04      	ldr	r2, [sp, #16]
  406e0e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  406e12:	3201      	adds	r2, #1
  406e14:	9204      	str	r2, [sp, #16]
  406e16:	f7ff bbd0 	b.w	4065ba <_dtoa_r+0x392>
  406e1a:	6871      	ldr	r1, [r6, #4]
  406e1c:	4648      	mov	r0, r9
  406e1e:	f000 fefb 	bl	407c18 <_Balloc>
  406e22:	6933      	ldr	r3, [r6, #16]
  406e24:	1c9a      	adds	r2, r3, #2
  406e26:	4605      	mov	r5, r0
  406e28:	0092      	lsls	r2, r2, #2
  406e2a:	f106 010c 	add.w	r1, r6, #12
  406e2e:	300c      	adds	r0, #12
  406e30:	f7fc fb78 	bl	403524 <memcpy>
  406e34:	4629      	mov	r1, r5
  406e36:	2201      	movs	r2, #1
  406e38:	4648      	mov	r0, r9
  406e3a:	f001 f89d 	bl	407f78 <__lshift>
  406e3e:	9005      	str	r0, [sp, #20]
  406e40:	e670      	b.n	406b24 <_dtoa_r+0x8fc>
  406e42:	2b39      	cmp	r3, #57	; 0x39
  406e44:	f8cd b014 	str.w	fp, [sp, #20]
  406e48:	46d0      	mov	r8, sl
  406e4a:	f000 80a3 	beq.w	406f94 <_dtoa_r+0xd6c>
  406e4e:	f103 0a01 	add.w	sl, r3, #1
  406e52:	46b3      	mov	fp, r6
  406e54:	f887 a000 	strb.w	sl, [r7]
  406e58:	1c7d      	adds	r5, r7, #1
  406e5a:	9e05      	ldr	r6, [sp, #20]
  406e5c:	9408      	str	r4, [sp, #32]
  406e5e:	e49f      	b.n	4067a0 <_dtoa_r+0x578>
  406e60:	465a      	mov	r2, fp
  406e62:	46d0      	mov	r8, sl
  406e64:	46b3      	mov	fp, r6
  406e66:	469a      	mov	sl, r3
  406e68:	4616      	mov	r6, r2
  406e6a:	e47d      	b.n	406768 <_dtoa_r+0x540>
  406e6c:	495e      	ldr	r1, [pc, #376]	; (406fe8 <_dtoa_r+0xdc0>)
  406e6e:	f108 3aff 	add.w	sl, r8, #4294967295
  406e72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  406e76:	4622      	mov	r2, r4
  406e78:	462b      	mov	r3, r5
  406e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
  406e7e:	f002 f811 	bl	408ea4 <__aeabi_dmul>
  406e82:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406e86:	4639      	mov	r1, r7
  406e88:	4630      	mov	r0, r6
  406e8a:	f002 fabb 	bl	409404 <__aeabi_d2iz>
  406e8e:	4604      	mov	r4, r0
  406e90:	f001 ffa2 	bl	408dd8 <__aeabi_i2d>
  406e94:	4602      	mov	r2, r0
  406e96:	460b      	mov	r3, r1
  406e98:	4630      	mov	r0, r6
  406e9a:	4639      	mov	r1, r7
  406e9c:	f001 fe4e 	bl	408b3c <__aeabi_dsub>
  406ea0:	9a07      	ldr	r2, [sp, #28]
  406ea2:	3430      	adds	r4, #48	; 0x30
  406ea4:	f1b8 0f01 	cmp.w	r8, #1
  406ea8:	4606      	mov	r6, r0
  406eaa:	460f      	mov	r7, r1
  406eac:	7014      	strb	r4, [r2, #0]
  406eae:	f102 0501 	add.w	r5, r2, #1
  406eb2:	d01e      	beq.n	406ef2 <_dtoa_r+0xcca>
  406eb4:	9b07      	ldr	r3, [sp, #28]
  406eb6:	eb03 0b08 	add.w	fp, r3, r8
  406eba:	46a8      	mov	r8, r5
  406ebc:	2200      	movs	r2, #0
  406ebe:	4b4c      	ldr	r3, [pc, #304]	; (406ff0 <_dtoa_r+0xdc8>)
  406ec0:	4630      	mov	r0, r6
  406ec2:	4639      	mov	r1, r7
  406ec4:	f001 ffee 	bl	408ea4 <__aeabi_dmul>
  406ec8:	460f      	mov	r7, r1
  406eca:	4606      	mov	r6, r0
  406ecc:	f002 fa9a 	bl	409404 <__aeabi_d2iz>
  406ed0:	4604      	mov	r4, r0
  406ed2:	f001 ff81 	bl	408dd8 <__aeabi_i2d>
  406ed6:	3430      	adds	r4, #48	; 0x30
  406ed8:	4602      	mov	r2, r0
  406eda:	460b      	mov	r3, r1
  406edc:	4630      	mov	r0, r6
  406ede:	4639      	mov	r1, r7
  406ee0:	f001 fe2c 	bl	408b3c <__aeabi_dsub>
  406ee4:	f808 4b01 	strb.w	r4, [r8], #1
  406ee8:	45c3      	cmp	fp, r8
  406eea:	4606      	mov	r6, r0
  406eec:	460f      	mov	r7, r1
  406eee:	d1e5      	bne.n	406ebc <_dtoa_r+0xc94>
  406ef0:	4455      	add	r5, sl
  406ef2:	2200      	movs	r2, #0
  406ef4:	4b3f      	ldr	r3, [pc, #252]	; (406ff4 <_dtoa_r+0xdcc>)
  406ef6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406efa:	f001 fe21 	bl	408b40 <__adddf3>
  406efe:	4632      	mov	r2, r6
  406f00:	463b      	mov	r3, r7
  406f02:	f002 fa41 	bl	409388 <__aeabi_dcmplt>
  406f06:	2800      	cmp	r0, #0
  406f08:	d04c      	beq.n	406fa4 <_dtoa_r+0xd7c>
  406f0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406f0c:	9304      	str	r3, [sp, #16]
  406f0e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  406f12:	f7ff bb46 	b.w	4065a2 <_dtoa_r+0x37a>
  406f16:	f04f 0800 	mov.w	r8, #0
  406f1a:	4646      	mov	r6, r8
  406f1c:	e6a8      	b.n	406c70 <_dtoa_r+0xa48>
  406f1e:	9b05      	ldr	r3, [sp, #20]
  406f20:	9a06      	ldr	r2, [sp, #24]
  406f22:	1a9d      	subs	r5, r3, r2
  406f24:	2300      	movs	r3, #0
  406f26:	f7ff bb72 	b.w	40660e <_dtoa_r+0x3e6>
  406f2a:	2700      	movs	r7, #0
  406f2c:	e6ca      	b.n	406cc4 <_dtoa_r+0xa9c>
  406f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406f30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406f32:	9d05      	ldr	r5, [sp, #20]
  406f34:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  406f38:	f7ff bb69 	b.w	40660e <_dtoa_r+0x3e6>
  406f3c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  406f40:	f04f 0802 	mov.w	r8, #2
  406f44:	e4d6      	b.n	4068f4 <_dtoa_r+0x6cc>
  406f46:	9408      	str	r4, [sp, #32]
  406f48:	e5a0      	b.n	406a8c <_dtoa_r+0x864>
  406f4a:	9b06      	ldr	r3, [sp, #24]
  406f4c:	2b00      	cmp	r3, #0
  406f4e:	f43f aebf 	beq.w	406cd0 <_dtoa_r+0xaa8>
  406f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f54:	2b00      	cmp	r3, #0
  406f56:	f77f aee3 	ble.w	406d20 <_dtoa_r+0xaf8>
  406f5a:	2200      	movs	r2, #0
  406f5c:	4b24      	ldr	r3, [pc, #144]	; (406ff0 <_dtoa_r+0xdc8>)
  406f5e:	4630      	mov	r0, r6
  406f60:	4639      	mov	r1, r7
  406f62:	f001 ff9f 	bl	408ea4 <__aeabi_dmul>
  406f66:	4606      	mov	r6, r0
  406f68:	460f      	mov	r7, r1
  406f6a:	f108 0001 	add.w	r0, r8, #1
  406f6e:	f001 ff33 	bl	408dd8 <__aeabi_i2d>
  406f72:	4632      	mov	r2, r6
  406f74:	463b      	mov	r3, r7
  406f76:	f001 ff95 	bl	408ea4 <__aeabi_dmul>
  406f7a:	2200      	movs	r2, #0
  406f7c:	4b18      	ldr	r3, [pc, #96]	; (406fe0 <_dtoa_r+0xdb8>)
  406f7e:	f001 fddf 	bl	408b40 <__adddf3>
  406f82:	9a04      	ldr	r2, [sp, #16]
  406f84:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  406f88:	3a01      	subs	r2, #1
  406f8a:	4604      	mov	r4, r0
  406f8c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406f90:	9211      	str	r2, [sp, #68]	; 0x44
  406f92:	e4d0      	b.n	406936 <_dtoa_r+0x70e>
  406f94:	2239      	movs	r2, #57	; 0x39
  406f96:	46b3      	mov	fp, r6
  406f98:	9408      	str	r4, [sp, #32]
  406f9a:	9e05      	ldr	r6, [sp, #20]
  406f9c:	703a      	strb	r2, [r7, #0]
  406f9e:	1c7d      	adds	r5, r7, #1
  406fa0:	f7ff bbf0 	b.w	406784 <_dtoa_r+0x55c>
  406fa4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  406fa8:	2000      	movs	r0, #0
  406faa:	4912      	ldr	r1, [pc, #72]	; (406ff4 <_dtoa_r+0xdcc>)
  406fac:	f001 fdc6 	bl	408b3c <__aeabi_dsub>
  406fb0:	4632      	mov	r2, r6
  406fb2:	463b      	mov	r3, r7
  406fb4:	f002 fa06 	bl	4093c4 <__aeabi_dcmpgt>
  406fb8:	b908      	cbnz	r0, 406fbe <_dtoa_r+0xd96>
  406fba:	e6b1      	b.n	406d20 <_dtoa_r+0xaf8>
  406fbc:	4615      	mov	r5, r2
  406fbe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406fc2:	2b30      	cmp	r3, #48	; 0x30
  406fc4:	f105 32ff 	add.w	r2, r5, #4294967295
  406fc8:	d0f8      	beq.n	406fbc <_dtoa_r+0xd94>
  406fca:	e530      	b.n	406a2e <_dtoa_r+0x806>
  406fcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406fce:	9304      	str	r3, [sp, #16]
  406fd0:	f7ff bae7 	b.w	4065a2 <_dtoa_r+0x37a>
  406fd4:	f1ba 0f00 	cmp.w	sl, #0
  406fd8:	f47f ad7a 	bne.w	406ad0 <_dtoa_r+0x8a8>
  406fdc:	e661      	b.n	406ca2 <_dtoa_r+0xa7a>
  406fde:	bf00      	nop
  406fe0:	401c0000 	.word	0x401c0000
  406fe4:	40140000 	.word	0x40140000
  406fe8:	00409958 	.word	0x00409958
  406fec:	00409a20 	.word	0x00409a20
  406ff0:	40240000 	.word	0x40240000
  406ff4:	3fe00000 	.word	0x3fe00000
  406ff8:	2b39      	cmp	r3, #57	; 0x39
  406ffa:	f8cd b014 	str.w	fp, [sp, #20]
  406ffe:	46d0      	mov	r8, sl
  407000:	f8dd b008 	ldr.w	fp, [sp, #8]
  407004:	469a      	mov	sl, r3
  407006:	d0c5      	beq.n	406f94 <_dtoa_r+0xd6c>
  407008:	f1bb 0f00 	cmp.w	fp, #0
  40700c:	f73f aebc 	bgt.w	406d88 <_dtoa_r+0xb60>
  407010:	e6bc      	b.n	406d8c <_dtoa_r+0xb64>
  407012:	f47f aebb 	bne.w	406d8c <_dtoa_r+0xb64>
  407016:	f01a 0f01 	tst.w	sl, #1
  40701a:	f43f aeb7 	beq.w	406d8c <_dtoa_r+0xb64>
  40701e:	e6af      	b.n	406d80 <_dtoa_r+0xb58>
  407020:	f04f 0800 	mov.w	r8, #0
  407024:	4646      	mov	r6, r8
  407026:	e531      	b.n	406a8c <_dtoa_r+0x864>
  407028:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40702a:	2b02      	cmp	r3, #2
  40702c:	dc21      	bgt.n	407072 <_dtoa_r+0xe4a>
  40702e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407030:	e604      	b.n	406c3c <_dtoa_r+0xa14>
  407032:	f04f 0802 	mov.w	r8, #2
  407036:	e45d      	b.n	4068f4 <_dtoa_r+0x6cc>
  407038:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40703a:	2b02      	cmp	r3, #2
  40703c:	dc19      	bgt.n	407072 <_dtoa_r+0xe4a>
  40703e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407040:	e563      	b.n	406b0a <_dtoa_r+0x8e2>
  407042:	2400      	movs	r4, #0
  407044:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  407048:	4621      	mov	r1, r4
  40704a:	4648      	mov	r0, r9
  40704c:	f000 fde4 	bl	407c18 <_Balloc>
  407050:	f04f 33ff 	mov.w	r3, #4294967295
  407054:	9306      	str	r3, [sp, #24]
  407056:	930d      	str	r3, [sp, #52]	; 0x34
  407058:	2301      	movs	r3, #1
  40705a:	9007      	str	r0, [sp, #28]
  40705c:	9421      	str	r4, [sp, #132]	; 0x84
  40705e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  407062:	9309      	str	r3, [sp, #36]	; 0x24
  407064:	f7ff b9e9 	b.w	40643a <_dtoa_r+0x212>
  407068:	f43f ab3d 	beq.w	4066e6 <_dtoa_r+0x4be>
  40706c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407070:	e522      	b.n	406ab8 <_dtoa_r+0x890>
  407072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407074:	9306      	str	r3, [sp, #24]
  407076:	e5e9      	b.n	406c4c <_dtoa_r+0xa24>
  407078:	2501      	movs	r5, #1
  40707a:	f7ff b9a8 	b.w	4063ce <_dtoa_r+0x1a6>
  40707e:	bf00      	nop

00407080 <__sflush_r>:
  407080:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407084:	b29a      	uxth	r2, r3
  407086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40708a:	460d      	mov	r5, r1
  40708c:	0711      	lsls	r1, r2, #28
  40708e:	4680      	mov	r8, r0
  407090:	d43c      	bmi.n	40710c <__sflush_r+0x8c>
  407092:	686a      	ldr	r2, [r5, #4]
  407094:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  407098:	2a00      	cmp	r2, #0
  40709a:	81ab      	strh	r3, [r5, #12]
  40709c:	dd73      	ble.n	407186 <__sflush_r+0x106>
  40709e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4070a0:	2c00      	cmp	r4, #0
  4070a2:	d04b      	beq.n	40713c <__sflush_r+0xbc>
  4070a4:	b29b      	uxth	r3, r3
  4070a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  4070aa:	2100      	movs	r1, #0
  4070ac:	b292      	uxth	r2, r2
  4070ae:	f8d8 6000 	ldr.w	r6, [r8]
  4070b2:	f8c8 1000 	str.w	r1, [r8]
  4070b6:	2a00      	cmp	r2, #0
  4070b8:	d069      	beq.n	40718e <__sflush_r+0x10e>
  4070ba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4070bc:	075f      	lsls	r7, r3, #29
  4070be:	d505      	bpl.n	4070cc <__sflush_r+0x4c>
  4070c0:	6869      	ldr	r1, [r5, #4]
  4070c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4070c4:	1a52      	subs	r2, r2, r1
  4070c6:	b10b      	cbz	r3, 4070cc <__sflush_r+0x4c>
  4070c8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4070ca:	1ad2      	subs	r2, r2, r3
  4070cc:	2300      	movs	r3, #0
  4070ce:	69e9      	ldr	r1, [r5, #28]
  4070d0:	4640      	mov	r0, r8
  4070d2:	47a0      	blx	r4
  4070d4:	1c44      	adds	r4, r0, #1
  4070d6:	d03c      	beq.n	407152 <__sflush_r+0xd2>
  4070d8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4070dc:	692a      	ldr	r2, [r5, #16]
  4070de:	602a      	str	r2, [r5, #0]
  4070e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4070e4:	2200      	movs	r2, #0
  4070e6:	81ab      	strh	r3, [r5, #12]
  4070e8:	04db      	lsls	r3, r3, #19
  4070ea:	606a      	str	r2, [r5, #4]
  4070ec:	d449      	bmi.n	407182 <__sflush_r+0x102>
  4070ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4070f0:	f8c8 6000 	str.w	r6, [r8]
  4070f4:	b311      	cbz	r1, 40713c <__sflush_r+0xbc>
  4070f6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4070fa:	4299      	cmp	r1, r3
  4070fc:	d002      	beq.n	407104 <__sflush_r+0x84>
  4070fe:	4640      	mov	r0, r8
  407100:	f000 f9c0 	bl	407484 <_free_r>
  407104:	2000      	movs	r0, #0
  407106:	6328      	str	r0, [r5, #48]	; 0x30
  407108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40710c:	692e      	ldr	r6, [r5, #16]
  40710e:	b1ae      	cbz	r6, 40713c <__sflush_r+0xbc>
  407110:	682c      	ldr	r4, [r5, #0]
  407112:	602e      	str	r6, [r5, #0]
  407114:	0790      	lsls	r0, r2, #30
  407116:	bf0c      	ite	eq
  407118:	696b      	ldreq	r3, [r5, #20]
  40711a:	2300      	movne	r3, #0
  40711c:	1ba4      	subs	r4, r4, r6
  40711e:	60ab      	str	r3, [r5, #8]
  407120:	e00a      	b.n	407138 <__sflush_r+0xb8>
  407122:	4623      	mov	r3, r4
  407124:	4632      	mov	r2, r6
  407126:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407128:	69e9      	ldr	r1, [r5, #28]
  40712a:	4640      	mov	r0, r8
  40712c:	47b8      	blx	r7
  40712e:	2800      	cmp	r0, #0
  407130:	eba4 0400 	sub.w	r4, r4, r0
  407134:	4406      	add	r6, r0
  407136:	dd04      	ble.n	407142 <__sflush_r+0xc2>
  407138:	2c00      	cmp	r4, #0
  40713a:	dcf2      	bgt.n	407122 <__sflush_r+0xa2>
  40713c:	2000      	movs	r0, #0
  40713e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407142:	89ab      	ldrh	r3, [r5, #12]
  407144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407148:	81ab      	strh	r3, [r5, #12]
  40714a:	f04f 30ff 	mov.w	r0, #4294967295
  40714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407152:	f8d8 2000 	ldr.w	r2, [r8]
  407156:	2a1d      	cmp	r2, #29
  407158:	d8f3      	bhi.n	407142 <__sflush_r+0xc2>
  40715a:	4b1a      	ldr	r3, [pc, #104]	; (4071c4 <__sflush_r+0x144>)
  40715c:	40d3      	lsrs	r3, r2
  40715e:	f003 0301 	and.w	r3, r3, #1
  407162:	f083 0401 	eor.w	r4, r3, #1
  407166:	2b00      	cmp	r3, #0
  407168:	d0eb      	beq.n	407142 <__sflush_r+0xc2>
  40716a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40716e:	6929      	ldr	r1, [r5, #16]
  407170:	6029      	str	r1, [r5, #0]
  407172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407176:	04d9      	lsls	r1, r3, #19
  407178:	606c      	str	r4, [r5, #4]
  40717a:	81ab      	strh	r3, [r5, #12]
  40717c:	d5b7      	bpl.n	4070ee <__sflush_r+0x6e>
  40717e:	2a00      	cmp	r2, #0
  407180:	d1b5      	bne.n	4070ee <__sflush_r+0x6e>
  407182:	6528      	str	r0, [r5, #80]	; 0x50
  407184:	e7b3      	b.n	4070ee <__sflush_r+0x6e>
  407186:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407188:	2a00      	cmp	r2, #0
  40718a:	dc88      	bgt.n	40709e <__sflush_r+0x1e>
  40718c:	e7d6      	b.n	40713c <__sflush_r+0xbc>
  40718e:	2301      	movs	r3, #1
  407190:	69e9      	ldr	r1, [r5, #28]
  407192:	4640      	mov	r0, r8
  407194:	47a0      	blx	r4
  407196:	1c43      	adds	r3, r0, #1
  407198:	4602      	mov	r2, r0
  40719a:	d002      	beq.n	4071a2 <__sflush_r+0x122>
  40719c:	89ab      	ldrh	r3, [r5, #12]
  40719e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4071a0:	e78c      	b.n	4070bc <__sflush_r+0x3c>
  4071a2:	f8d8 3000 	ldr.w	r3, [r8]
  4071a6:	2b00      	cmp	r3, #0
  4071a8:	d0f8      	beq.n	40719c <__sflush_r+0x11c>
  4071aa:	2b1d      	cmp	r3, #29
  4071ac:	d001      	beq.n	4071b2 <__sflush_r+0x132>
  4071ae:	2b16      	cmp	r3, #22
  4071b0:	d102      	bne.n	4071b8 <__sflush_r+0x138>
  4071b2:	f8c8 6000 	str.w	r6, [r8]
  4071b6:	e7c1      	b.n	40713c <__sflush_r+0xbc>
  4071b8:	89ab      	ldrh	r3, [r5, #12]
  4071ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4071be:	81ab      	strh	r3, [r5, #12]
  4071c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4071c4:	20400001 	.word	0x20400001

004071c8 <_fflush_r>:
  4071c8:	b510      	push	{r4, lr}
  4071ca:	4604      	mov	r4, r0
  4071cc:	b082      	sub	sp, #8
  4071ce:	b108      	cbz	r0, 4071d4 <_fflush_r+0xc>
  4071d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4071d2:	b153      	cbz	r3, 4071ea <_fflush_r+0x22>
  4071d4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  4071d8:	b908      	cbnz	r0, 4071de <_fflush_r+0x16>
  4071da:	b002      	add	sp, #8
  4071dc:	bd10      	pop	{r4, pc}
  4071de:	4620      	mov	r0, r4
  4071e0:	b002      	add	sp, #8
  4071e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4071e6:	f7ff bf4b 	b.w	407080 <__sflush_r>
  4071ea:	9101      	str	r1, [sp, #4]
  4071ec:	f000 f880 	bl	4072f0 <__sinit>
  4071f0:	9901      	ldr	r1, [sp, #4]
  4071f2:	e7ef      	b.n	4071d4 <_fflush_r+0xc>

004071f4 <_cleanup_r>:
  4071f4:	4901      	ldr	r1, [pc, #4]	; (4071fc <_cleanup_r+0x8>)
  4071f6:	f000 bbaf 	b.w	407958 <_fwalk_reent>
  4071fa:	bf00      	nop
  4071fc:	00408a0d 	.word	0x00408a0d

00407200 <__sinit.part.1>:
  407200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407204:	4b35      	ldr	r3, [pc, #212]	; (4072dc <__sinit.part.1+0xdc>)
  407206:	6845      	ldr	r5, [r0, #4]
  407208:	63c3      	str	r3, [r0, #60]	; 0x3c
  40720a:	2400      	movs	r4, #0
  40720c:	4607      	mov	r7, r0
  40720e:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  407212:	2304      	movs	r3, #4
  407214:	2103      	movs	r1, #3
  407216:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40721a:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  40721e:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  407222:	b083      	sub	sp, #12
  407224:	602c      	str	r4, [r5, #0]
  407226:	606c      	str	r4, [r5, #4]
  407228:	60ac      	str	r4, [r5, #8]
  40722a:	666c      	str	r4, [r5, #100]	; 0x64
  40722c:	81ec      	strh	r4, [r5, #14]
  40722e:	612c      	str	r4, [r5, #16]
  407230:	616c      	str	r4, [r5, #20]
  407232:	61ac      	str	r4, [r5, #24]
  407234:	81ab      	strh	r3, [r5, #12]
  407236:	4621      	mov	r1, r4
  407238:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40723c:	2208      	movs	r2, #8
  40723e:	f7fc fa0b 	bl	403658 <memset>
  407242:	68be      	ldr	r6, [r7, #8]
  407244:	f8df b098 	ldr.w	fp, [pc, #152]	; 4072e0 <__sinit.part.1+0xe0>
  407248:	f8df a098 	ldr.w	sl, [pc, #152]	; 4072e4 <__sinit.part.1+0xe4>
  40724c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4072e8 <__sinit.part.1+0xe8>
  407250:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4072ec <__sinit.part.1+0xec>
  407254:	f8c5 b020 	str.w	fp, [r5, #32]
  407258:	2301      	movs	r3, #1
  40725a:	2209      	movs	r2, #9
  40725c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  407260:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  407264:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  407268:	61ed      	str	r5, [r5, #28]
  40726a:	4621      	mov	r1, r4
  40726c:	81f3      	strh	r3, [r6, #14]
  40726e:	81b2      	strh	r2, [r6, #12]
  407270:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  407274:	6034      	str	r4, [r6, #0]
  407276:	6074      	str	r4, [r6, #4]
  407278:	60b4      	str	r4, [r6, #8]
  40727a:	6674      	str	r4, [r6, #100]	; 0x64
  40727c:	6134      	str	r4, [r6, #16]
  40727e:	6174      	str	r4, [r6, #20]
  407280:	61b4      	str	r4, [r6, #24]
  407282:	2208      	movs	r2, #8
  407284:	9301      	str	r3, [sp, #4]
  407286:	f7fc f9e7 	bl	403658 <memset>
  40728a:	68fd      	ldr	r5, [r7, #12]
  40728c:	61f6      	str	r6, [r6, #28]
  40728e:	2012      	movs	r0, #18
  407290:	2202      	movs	r2, #2
  407292:	f8c6 b020 	str.w	fp, [r6, #32]
  407296:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40729a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40729e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4072a2:	4621      	mov	r1, r4
  4072a4:	81a8      	strh	r0, [r5, #12]
  4072a6:	81ea      	strh	r2, [r5, #14]
  4072a8:	602c      	str	r4, [r5, #0]
  4072aa:	606c      	str	r4, [r5, #4]
  4072ac:	60ac      	str	r4, [r5, #8]
  4072ae:	666c      	str	r4, [r5, #100]	; 0x64
  4072b0:	612c      	str	r4, [r5, #16]
  4072b2:	616c      	str	r4, [r5, #20]
  4072b4:	61ac      	str	r4, [r5, #24]
  4072b6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4072ba:	2208      	movs	r2, #8
  4072bc:	f7fc f9cc 	bl	403658 <memset>
  4072c0:	9b01      	ldr	r3, [sp, #4]
  4072c2:	61ed      	str	r5, [r5, #28]
  4072c4:	f8c5 b020 	str.w	fp, [r5, #32]
  4072c8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4072cc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4072d0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4072d4:	63bb      	str	r3, [r7, #56]	; 0x38
  4072d6:	b003      	add	sp, #12
  4072d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4072dc:	004071f5 	.word	0x004071f5
  4072e0:	00408615 	.word	0x00408615
  4072e4:	00408639 	.word	0x00408639
  4072e8:	00408675 	.word	0x00408675
  4072ec:	00408695 	.word	0x00408695

004072f0 <__sinit>:
  4072f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4072f2:	b103      	cbz	r3, 4072f6 <__sinit+0x6>
  4072f4:	4770      	bx	lr
  4072f6:	f7ff bf83 	b.w	407200 <__sinit.part.1>
  4072fa:	bf00      	nop

004072fc <__sfp_lock_acquire>:
  4072fc:	4770      	bx	lr
  4072fe:	bf00      	nop

00407300 <__sfp_lock_release>:
  407300:	4770      	bx	lr
  407302:	bf00      	nop

00407304 <__libc_fini_array>:
  407304:	b538      	push	{r3, r4, r5, lr}
  407306:	4d07      	ldr	r5, [pc, #28]	; (407324 <__libc_fini_array+0x20>)
  407308:	4c07      	ldr	r4, [pc, #28]	; (407328 <__libc_fini_array+0x24>)
  40730a:	1b2c      	subs	r4, r5, r4
  40730c:	10a4      	asrs	r4, r4, #2
  40730e:	d005      	beq.n	40731c <__libc_fini_array+0x18>
  407310:	3c01      	subs	r4, #1
  407312:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  407316:	4798      	blx	r3
  407318:	2c00      	cmp	r4, #0
  40731a:	d1f9      	bne.n	407310 <__libc_fini_array+0xc>
  40731c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407320:	f002 bba2 	b.w	409a68 <_fini>
  407324:	00409a78 	.word	0x00409a78
  407328:	00409a74 	.word	0x00409a74

0040732c <__fputwc>:
  40732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407330:	b082      	sub	sp, #8
  407332:	4680      	mov	r8, r0
  407334:	4689      	mov	r9, r1
  407336:	4614      	mov	r4, r2
  407338:	f000 fb3c 	bl	4079b4 <__locale_mb_cur_max>
  40733c:	2801      	cmp	r0, #1
  40733e:	d033      	beq.n	4073a8 <__fputwc+0x7c>
  407340:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407344:	464a      	mov	r2, r9
  407346:	a901      	add	r1, sp, #4
  407348:	4640      	mov	r0, r8
  40734a:	f001 fa7d 	bl	408848 <_wcrtomb_r>
  40734e:	f1b0 3fff 	cmp.w	r0, #4294967295
  407352:	4682      	mov	sl, r0
  407354:	d021      	beq.n	40739a <__fputwc+0x6e>
  407356:	b388      	cbz	r0, 4073bc <__fputwc+0x90>
  407358:	f89d 6004 	ldrb.w	r6, [sp, #4]
  40735c:	2500      	movs	r5, #0
  40735e:	e008      	b.n	407372 <__fputwc+0x46>
  407360:	6823      	ldr	r3, [r4, #0]
  407362:	1c5a      	adds	r2, r3, #1
  407364:	6022      	str	r2, [r4, #0]
  407366:	701e      	strb	r6, [r3, #0]
  407368:	3501      	adds	r5, #1
  40736a:	4555      	cmp	r5, sl
  40736c:	d226      	bcs.n	4073bc <__fputwc+0x90>
  40736e:	ab01      	add	r3, sp, #4
  407370:	5d5e      	ldrb	r6, [r3, r5]
  407372:	68a3      	ldr	r3, [r4, #8]
  407374:	3b01      	subs	r3, #1
  407376:	2b00      	cmp	r3, #0
  407378:	60a3      	str	r3, [r4, #8]
  40737a:	daf1      	bge.n	407360 <__fputwc+0x34>
  40737c:	69a7      	ldr	r7, [r4, #24]
  40737e:	42bb      	cmp	r3, r7
  407380:	4631      	mov	r1, r6
  407382:	4622      	mov	r2, r4
  407384:	4640      	mov	r0, r8
  407386:	db01      	blt.n	40738c <__fputwc+0x60>
  407388:	2e0a      	cmp	r6, #10
  40738a:	d1e9      	bne.n	407360 <__fputwc+0x34>
  40738c:	f001 fa06 	bl	40879c <__swbuf_r>
  407390:	1c43      	adds	r3, r0, #1
  407392:	d1e9      	bne.n	407368 <__fputwc+0x3c>
  407394:	b002      	add	sp, #8
  407396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40739a:	89a3      	ldrh	r3, [r4, #12]
  40739c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4073a0:	81a3      	strh	r3, [r4, #12]
  4073a2:	b002      	add	sp, #8
  4073a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4073a8:	f109 33ff 	add.w	r3, r9, #4294967295
  4073ac:	2bfe      	cmp	r3, #254	; 0xfe
  4073ae:	d8c7      	bhi.n	407340 <__fputwc+0x14>
  4073b0:	fa5f f689 	uxtb.w	r6, r9
  4073b4:	4682      	mov	sl, r0
  4073b6:	f88d 6004 	strb.w	r6, [sp, #4]
  4073ba:	e7cf      	b.n	40735c <__fputwc+0x30>
  4073bc:	4648      	mov	r0, r9
  4073be:	b002      	add	sp, #8
  4073c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

004073c4 <_fputwc_r>:
  4073c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4073c8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  4073cc:	d10a      	bne.n	4073e4 <_fputwc_r+0x20>
  4073ce:	b410      	push	{r4}
  4073d0:	6e54      	ldr	r4, [r2, #100]	; 0x64
  4073d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4073d6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
  4073da:	6654      	str	r4, [r2, #100]	; 0x64
  4073dc:	8193      	strh	r3, [r2, #12]
  4073de:	bc10      	pop	{r4}
  4073e0:	f7ff bfa4 	b.w	40732c <__fputwc>
  4073e4:	f7ff bfa2 	b.w	40732c <__fputwc>

004073e8 <_malloc_trim_r>:
  4073e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073ea:	4f23      	ldr	r7, [pc, #140]	; (407478 <_malloc_trim_r+0x90>)
  4073ec:	460c      	mov	r4, r1
  4073ee:	4606      	mov	r6, r0
  4073f0:	f7fc f980 	bl	4036f4 <__malloc_lock>
  4073f4:	68bb      	ldr	r3, [r7, #8]
  4073f6:	685d      	ldr	r5, [r3, #4]
  4073f8:	f025 0503 	bic.w	r5, r5, #3
  4073fc:	1b29      	subs	r1, r5, r4
  4073fe:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  407402:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407406:	f021 010f 	bic.w	r1, r1, #15
  40740a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40740e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407412:	db07      	blt.n	407424 <_malloc_trim_r+0x3c>
  407414:	2100      	movs	r1, #0
  407416:	4630      	mov	r0, r6
  407418:	f7fc f970 	bl	4036fc <_sbrk_r>
  40741c:	68bb      	ldr	r3, [r7, #8]
  40741e:	442b      	add	r3, r5
  407420:	4298      	cmp	r0, r3
  407422:	d004      	beq.n	40742e <_malloc_trim_r+0x46>
  407424:	4630      	mov	r0, r6
  407426:	f7fc f967 	bl	4036f8 <__malloc_unlock>
  40742a:	2000      	movs	r0, #0
  40742c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40742e:	4261      	negs	r1, r4
  407430:	4630      	mov	r0, r6
  407432:	f7fc f963 	bl	4036fc <_sbrk_r>
  407436:	3001      	adds	r0, #1
  407438:	d00d      	beq.n	407456 <_malloc_trim_r+0x6e>
  40743a:	4b10      	ldr	r3, [pc, #64]	; (40747c <_malloc_trim_r+0x94>)
  40743c:	68ba      	ldr	r2, [r7, #8]
  40743e:	6819      	ldr	r1, [r3, #0]
  407440:	1b2d      	subs	r5, r5, r4
  407442:	f045 0501 	orr.w	r5, r5, #1
  407446:	4630      	mov	r0, r6
  407448:	1b09      	subs	r1, r1, r4
  40744a:	6055      	str	r5, [r2, #4]
  40744c:	6019      	str	r1, [r3, #0]
  40744e:	f7fc f953 	bl	4036f8 <__malloc_unlock>
  407452:	2001      	movs	r0, #1
  407454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407456:	2100      	movs	r1, #0
  407458:	4630      	mov	r0, r6
  40745a:	f7fc f94f 	bl	4036fc <_sbrk_r>
  40745e:	68ba      	ldr	r2, [r7, #8]
  407460:	1a83      	subs	r3, r0, r2
  407462:	2b0f      	cmp	r3, #15
  407464:	ddde      	ble.n	407424 <_malloc_trim_r+0x3c>
  407466:	4c06      	ldr	r4, [pc, #24]	; (407480 <_malloc_trim_r+0x98>)
  407468:	4904      	ldr	r1, [pc, #16]	; (40747c <_malloc_trim_r+0x94>)
  40746a:	6824      	ldr	r4, [r4, #0]
  40746c:	f043 0301 	orr.w	r3, r3, #1
  407470:	1b00      	subs	r0, r0, r4
  407472:	6053      	str	r3, [r2, #4]
  407474:	6008      	str	r0, [r1, #0]
  407476:	e7d5      	b.n	407424 <_malloc_trim_r+0x3c>
  407478:	2040043c 	.word	0x2040043c
  40747c:	20400b8c 	.word	0x20400b8c
  407480:	20400848 	.word	0x20400848

00407484 <_free_r>:
  407484:	2900      	cmp	r1, #0
  407486:	d045      	beq.n	407514 <_free_r+0x90>
  407488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40748c:	460d      	mov	r5, r1
  40748e:	4680      	mov	r8, r0
  407490:	f7fc f930 	bl	4036f4 <__malloc_lock>
  407494:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407498:	496a      	ldr	r1, [pc, #424]	; (407644 <_free_r+0x1c0>)
  40749a:	f027 0301 	bic.w	r3, r7, #1
  40749e:	f1a5 0408 	sub.w	r4, r5, #8
  4074a2:	18e2      	adds	r2, r4, r3
  4074a4:	688e      	ldr	r6, [r1, #8]
  4074a6:	6850      	ldr	r0, [r2, #4]
  4074a8:	42b2      	cmp	r2, r6
  4074aa:	f020 0003 	bic.w	r0, r0, #3
  4074ae:	d062      	beq.n	407576 <_free_r+0xf2>
  4074b0:	07fe      	lsls	r6, r7, #31
  4074b2:	6050      	str	r0, [r2, #4]
  4074b4:	d40b      	bmi.n	4074ce <_free_r+0x4a>
  4074b6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4074ba:	1be4      	subs	r4, r4, r7
  4074bc:	f101 0e08 	add.w	lr, r1, #8
  4074c0:	68a5      	ldr	r5, [r4, #8]
  4074c2:	4575      	cmp	r5, lr
  4074c4:	443b      	add	r3, r7
  4074c6:	d06f      	beq.n	4075a8 <_free_r+0x124>
  4074c8:	68e7      	ldr	r7, [r4, #12]
  4074ca:	60ef      	str	r7, [r5, #12]
  4074cc:	60bd      	str	r5, [r7, #8]
  4074ce:	1815      	adds	r5, r2, r0
  4074d0:	686d      	ldr	r5, [r5, #4]
  4074d2:	07ed      	lsls	r5, r5, #31
  4074d4:	d542      	bpl.n	40755c <_free_r+0xd8>
  4074d6:	f043 0201 	orr.w	r2, r3, #1
  4074da:	6062      	str	r2, [r4, #4]
  4074dc:	50e3      	str	r3, [r4, r3]
  4074de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4074e2:	d218      	bcs.n	407516 <_free_r+0x92>
  4074e4:	08db      	lsrs	r3, r3, #3
  4074e6:	1c5a      	adds	r2, r3, #1
  4074e8:	684d      	ldr	r5, [r1, #4]
  4074ea:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  4074ee:	60a7      	str	r7, [r4, #8]
  4074f0:	2001      	movs	r0, #1
  4074f2:	109b      	asrs	r3, r3, #2
  4074f4:	fa00 f303 	lsl.w	r3, r0, r3
  4074f8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  4074fc:	431d      	orrs	r5, r3
  4074fe:	3808      	subs	r0, #8
  407500:	60e0      	str	r0, [r4, #12]
  407502:	604d      	str	r5, [r1, #4]
  407504:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  407508:	60fc      	str	r4, [r7, #12]
  40750a:	4640      	mov	r0, r8
  40750c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407510:	f7fc b8f2 	b.w	4036f8 <__malloc_unlock>
  407514:	4770      	bx	lr
  407516:	0a5a      	lsrs	r2, r3, #9
  407518:	2a04      	cmp	r2, #4
  40751a:	d853      	bhi.n	4075c4 <_free_r+0x140>
  40751c:	099a      	lsrs	r2, r3, #6
  40751e:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407522:	007f      	lsls	r7, r7, #1
  407524:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407528:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  40752c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  407530:	4944      	ldr	r1, [pc, #272]	; (407644 <_free_r+0x1c0>)
  407532:	3808      	subs	r0, #8
  407534:	4290      	cmp	r0, r2
  407536:	d04d      	beq.n	4075d4 <_free_r+0x150>
  407538:	6851      	ldr	r1, [r2, #4]
  40753a:	f021 0103 	bic.w	r1, r1, #3
  40753e:	428b      	cmp	r3, r1
  407540:	d202      	bcs.n	407548 <_free_r+0xc4>
  407542:	6892      	ldr	r2, [r2, #8]
  407544:	4290      	cmp	r0, r2
  407546:	d1f7      	bne.n	407538 <_free_r+0xb4>
  407548:	68d0      	ldr	r0, [r2, #12]
  40754a:	60e0      	str	r0, [r4, #12]
  40754c:	60a2      	str	r2, [r4, #8]
  40754e:	6084      	str	r4, [r0, #8]
  407550:	60d4      	str	r4, [r2, #12]
  407552:	4640      	mov	r0, r8
  407554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407558:	f7fc b8ce 	b.w	4036f8 <__malloc_unlock>
  40755c:	6895      	ldr	r5, [r2, #8]
  40755e:	4f3a      	ldr	r7, [pc, #232]	; (407648 <_free_r+0x1c4>)
  407560:	42bd      	cmp	r5, r7
  407562:	4403      	add	r3, r0
  407564:	d03f      	beq.n	4075e6 <_free_r+0x162>
  407566:	68d0      	ldr	r0, [r2, #12]
  407568:	60e8      	str	r0, [r5, #12]
  40756a:	f043 0201 	orr.w	r2, r3, #1
  40756e:	6085      	str	r5, [r0, #8]
  407570:	6062      	str	r2, [r4, #4]
  407572:	50e3      	str	r3, [r4, r3]
  407574:	e7b3      	b.n	4074de <_free_r+0x5a>
  407576:	07ff      	lsls	r7, r7, #31
  407578:	4403      	add	r3, r0
  40757a:	d407      	bmi.n	40758c <_free_r+0x108>
  40757c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407580:	1aa4      	subs	r4, r4, r2
  407582:	4413      	add	r3, r2
  407584:	68a0      	ldr	r0, [r4, #8]
  407586:	68e2      	ldr	r2, [r4, #12]
  407588:	60c2      	str	r2, [r0, #12]
  40758a:	6090      	str	r0, [r2, #8]
  40758c:	4a2f      	ldr	r2, [pc, #188]	; (40764c <_free_r+0x1c8>)
  40758e:	6812      	ldr	r2, [r2, #0]
  407590:	f043 0001 	orr.w	r0, r3, #1
  407594:	4293      	cmp	r3, r2
  407596:	6060      	str	r0, [r4, #4]
  407598:	608c      	str	r4, [r1, #8]
  40759a:	d3b6      	bcc.n	40750a <_free_r+0x86>
  40759c:	4b2c      	ldr	r3, [pc, #176]	; (407650 <_free_r+0x1cc>)
  40759e:	4640      	mov	r0, r8
  4075a0:	6819      	ldr	r1, [r3, #0]
  4075a2:	f7ff ff21 	bl	4073e8 <_malloc_trim_r>
  4075a6:	e7b0      	b.n	40750a <_free_r+0x86>
  4075a8:	1811      	adds	r1, r2, r0
  4075aa:	6849      	ldr	r1, [r1, #4]
  4075ac:	07c9      	lsls	r1, r1, #31
  4075ae:	d444      	bmi.n	40763a <_free_r+0x1b6>
  4075b0:	6891      	ldr	r1, [r2, #8]
  4075b2:	68d2      	ldr	r2, [r2, #12]
  4075b4:	60ca      	str	r2, [r1, #12]
  4075b6:	4403      	add	r3, r0
  4075b8:	f043 0001 	orr.w	r0, r3, #1
  4075bc:	6091      	str	r1, [r2, #8]
  4075be:	6060      	str	r0, [r4, #4]
  4075c0:	50e3      	str	r3, [r4, r3]
  4075c2:	e7a2      	b.n	40750a <_free_r+0x86>
  4075c4:	2a14      	cmp	r2, #20
  4075c6:	d817      	bhi.n	4075f8 <_free_r+0x174>
  4075c8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4075cc:	007f      	lsls	r7, r7, #1
  4075ce:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4075d2:	e7a9      	b.n	407528 <_free_r+0xa4>
  4075d4:	10aa      	asrs	r2, r5, #2
  4075d6:	684b      	ldr	r3, [r1, #4]
  4075d8:	2501      	movs	r5, #1
  4075da:	fa05 f202 	lsl.w	r2, r5, r2
  4075de:	4313      	orrs	r3, r2
  4075e0:	604b      	str	r3, [r1, #4]
  4075e2:	4602      	mov	r2, r0
  4075e4:	e7b1      	b.n	40754a <_free_r+0xc6>
  4075e6:	f043 0201 	orr.w	r2, r3, #1
  4075ea:	614c      	str	r4, [r1, #20]
  4075ec:	610c      	str	r4, [r1, #16]
  4075ee:	60e5      	str	r5, [r4, #12]
  4075f0:	60a5      	str	r5, [r4, #8]
  4075f2:	6062      	str	r2, [r4, #4]
  4075f4:	50e3      	str	r3, [r4, r3]
  4075f6:	e788      	b.n	40750a <_free_r+0x86>
  4075f8:	2a54      	cmp	r2, #84	; 0x54
  4075fa:	d806      	bhi.n	40760a <_free_r+0x186>
  4075fc:	0b1a      	lsrs	r2, r3, #12
  4075fe:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407602:	007f      	lsls	r7, r7, #1
  407604:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407608:	e78e      	b.n	407528 <_free_r+0xa4>
  40760a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40760e:	d806      	bhi.n	40761e <_free_r+0x19a>
  407610:	0bda      	lsrs	r2, r3, #15
  407612:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407616:	007f      	lsls	r7, r7, #1
  407618:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40761c:	e784      	b.n	407528 <_free_r+0xa4>
  40761e:	f240 5054 	movw	r0, #1364	; 0x554
  407622:	4282      	cmp	r2, r0
  407624:	d806      	bhi.n	407634 <_free_r+0x1b0>
  407626:	0c9a      	lsrs	r2, r3, #18
  407628:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40762c:	007f      	lsls	r7, r7, #1
  40762e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407632:	e779      	b.n	407528 <_free_r+0xa4>
  407634:	27fe      	movs	r7, #254	; 0xfe
  407636:	257e      	movs	r5, #126	; 0x7e
  407638:	e776      	b.n	407528 <_free_r+0xa4>
  40763a:	f043 0201 	orr.w	r2, r3, #1
  40763e:	6062      	str	r2, [r4, #4]
  407640:	50e3      	str	r3, [r4, r3]
  407642:	e762      	b.n	40750a <_free_r+0x86>
  407644:	2040043c 	.word	0x2040043c
  407648:	20400444 	.word	0x20400444
  40764c:	20400844 	.word	0x20400844
  407650:	20400b88 	.word	0x20400b88

00407654 <__sfvwrite_r>:
  407654:	6893      	ldr	r3, [r2, #8]
  407656:	2b00      	cmp	r3, #0
  407658:	d076      	beq.n	407748 <__sfvwrite_r+0xf4>
  40765a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40765e:	898b      	ldrh	r3, [r1, #12]
  407660:	b085      	sub	sp, #20
  407662:	460c      	mov	r4, r1
  407664:	0719      	lsls	r1, r3, #28
  407666:	9001      	str	r0, [sp, #4]
  407668:	4616      	mov	r6, r2
  40766a:	d529      	bpl.n	4076c0 <__sfvwrite_r+0x6c>
  40766c:	6922      	ldr	r2, [r4, #16]
  40766e:	b33a      	cbz	r2, 4076c0 <__sfvwrite_r+0x6c>
  407670:	f003 0802 	and.w	r8, r3, #2
  407674:	fa1f f088 	uxth.w	r0, r8
  407678:	6835      	ldr	r5, [r6, #0]
  40767a:	2800      	cmp	r0, #0
  40767c:	d02f      	beq.n	4076de <__sfvwrite_r+0x8a>
  40767e:	f04f 0900 	mov.w	r9, #0
  407682:	4fb4      	ldr	r7, [pc, #720]	; (407954 <__sfvwrite_r+0x300>)
  407684:	46c8      	mov	r8, r9
  407686:	46b2      	mov	sl, r6
  407688:	45b8      	cmp	r8, r7
  40768a:	4643      	mov	r3, r8
  40768c:	464a      	mov	r2, r9
  40768e:	bf28      	it	cs
  407690:	463b      	movcs	r3, r7
  407692:	9801      	ldr	r0, [sp, #4]
  407694:	f1b8 0f00 	cmp.w	r8, #0
  407698:	d050      	beq.n	40773c <__sfvwrite_r+0xe8>
  40769a:	69e1      	ldr	r1, [r4, #28]
  40769c:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40769e:	47b0      	blx	r6
  4076a0:	2800      	cmp	r0, #0
  4076a2:	dd71      	ble.n	407788 <__sfvwrite_r+0x134>
  4076a4:	f8da 3008 	ldr.w	r3, [sl, #8]
  4076a8:	1a1b      	subs	r3, r3, r0
  4076aa:	4481      	add	r9, r0
  4076ac:	ebc0 0808 	rsb	r8, r0, r8
  4076b0:	f8ca 3008 	str.w	r3, [sl, #8]
  4076b4:	2b00      	cmp	r3, #0
  4076b6:	d1e7      	bne.n	407688 <__sfvwrite_r+0x34>
  4076b8:	2000      	movs	r0, #0
  4076ba:	b005      	add	sp, #20
  4076bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4076c0:	4621      	mov	r1, r4
  4076c2:	9801      	ldr	r0, [sp, #4]
  4076c4:	f7fe fca8 	bl	406018 <__swsetup_r>
  4076c8:	2800      	cmp	r0, #0
  4076ca:	f040 813a 	bne.w	407942 <__sfvwrite_r+0x2ee>
  4076ce:	89a3      	ldrh	r3, [r4, #12]
  4076d0:	6835      	ldr	r5, [r6, #0]
  4076d2:	f003 0802 	and.w	r8, r3, #2
  4076d6:	fa1f f088 	uxth.w	r0, r8
  4076da:	2800      	cmp	r0, #0
  4076dc:	d1cf      	bne.n	40767e <__sfvwrite_r+0x2a>
  4076de:	f013 0901 	ands.w	r9, r3, #1
  4076e2:	d15b      	bne.n	40779c <__sfvwrite_r+0x148>
  4076e4:	464f      	mov	r7, r9
  4076e6:	9602      	str	r6, [sp, #8]
  4076e8:	b31f      	cbz	r7, 407732 <__sfvwrite_r+0xde>
  4076ea:	059a      	lsls	r2, r3, #22
  4076ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4076f0:	d52c      	bpl.n	40774c <__sfvwrite_r+0xf8>
  4076f2:	4547      	cmp	r7, r8
  4076f4:	46c2      	mov	sl, r8
  4076f6:	f0c0 80a4 	bcc.w	407842 <__sfvwrite_r+0x1ee>
  4076fa:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4076fe:	f040 80b1 	bne.w	407864 <__sfvwrite_r+0x210>
  407702:	6820      	ldr	r0, [r4, #0]
  407704:	4652      	mov	r2, sl
  407706:	4649      	mov	r1, r9
  407708:	f000 fa22 	bl	407b50 <memmove>
  40770c:	68a0      	ldr	r0, [r4, #8]
  40770e:	6823      	ldr	r3, [r4, #0]
  407710:	ebc8 0000 	rsb	r0, r8, r0
  407714:	4453      	add	r3, sl
  407716:	60a0      	str	r0, [r4, #8]
  407718:	6023      	str	r3, [r4, #0]
  40771a:	4638      	mov	r0, r7
  40771c:	9a02      	ldr	r2, [sp, #8]
  40771e:	6893      	ldr	r3, [r2, #8]
  407720:	1a1b      	subs	r3, r3, r0
  407722:	4481      	add	r9, r0
  407724:	1a3f      	subs	r7, r7, r0
  407726:	6093      	str	r3, [r2, #8]
  407728:	2b00      	cmp	r3, #0
  40772a:	d0c5      	beq.n	4076b8 <__sfvwrite_r+0x64>
  40772c:	89a3      	ldrh	r3, [r4, #12]
  40772e:	2f00      	cmp	r7, #0
  407730:	d1db      	bne.n	4076ea <__sfvwrite_r+0x96>
  407732:	f8d5 9000 	ldr.w	r9, [r5]
  407736:	686f      	ldr	r7, [r5, #4]
  407738:	3508      	adds	r5, #8
  40773a:	e7d5      	b.n	4076e8 <__sfvwrite_r+0x94>
  40773c:	f8d5 9000 	ldr.w	r9, [r5]
  407740:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407744:	3508      	adds	r5, #8
  407746:	e79f      	b.n	407688 <__sfvwrite_r+0x34>
  407748:	2000      	movs	r0, #0
  40774a:	4770      	bx	lr
  40774c:	6820      	ldr	r0, [r4, #0]
  40774e:	6923      	ldr	r3, [r4, #16]
  407750:	4298      	cmp	r0, r3
  407752:	d803      	bhi.n	40775c <__sfvwrite_r+0x108>
  407754:	6961      	ldr	r1, [r4, #20]
  407756:	428f      	cmp	r7, r1
  407758:	f080 80b7 	bcs.w	4078ca <__sfvwrite_r+0x276>
  40775c:	45b8      	cmp	r8, r7
  40775e:	bf28      	it	cs
  407760:	46b8      	movcs	r8, r7
  407762:	4642      	mov	r2, r8
  407764:	4649      	mov	r1, r9
  407766:	f000 f9f3 	bl	407b50 <memmove>
  40776a:	68a3      	ldr	r3, [r4, #8]
  40776c:	6822      	ldr	r2, [r4, #0]
  40776e:	ebc8 0303 	rsb	r3, r8, r3
  407772:	4442      	add	r2, r8
  407774:	60a3      	str	r3, [r4, #8]
  407776:	6022      	str	r2, [r4, #0]
  407778:	2b00      	cmp	r3, #0
  40777a:	d149      	bne.n	407810 <__sfvwrite_r+0x1bc>
  40777c:	4621      	mov	r1, r4
  40777e:	9801      	ldr	r0, [sp, #4]
  407780:	f7ff fd22 	bl	4071c8 <_fflush_r>
  407784:	2800      	cmp	r0, #0
  407786:	d043      	beq.n	407810 <__sfvwrite_r+0x1bc>
  407788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40778c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407790:	f04f 30ff 	mov.w	r0, #4294967295
  407794:	81a3      	strh	r3, [r4, #12]
  407796:	b005      	add	sp, #20
  407798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40779c:	4680      	mov	r8, r0
  40779e:	9002      	str	r0, [sp, #8]
  4077a0:	4682      	mov	sl, r0
  4077a2:	4681      	mov	r9, r0
  4077a4:	f1b9 0f00 	cmp.w	r9, #0
  4077a8:	d02a      	beq.n	407800 <__sfvwrite_r+0x1ac>
  4077aa:	9b02      	ldr	r3, [sp, #8]
  4077ac:	2b00      	cmp	r3, #0
  4077ae:	d04c      	beq.n	40784a <__sfvwrite_r+0x1f6>
  4077b0:	6820      	ldr	r0, [r4, #0]
  4077b2:	6923      	ldr	r3, [r4, #16]
  4077b4:	6962      	ldr	r2, [r4, #20]
  4077b6:	45c8      	cmp	r8, r9
  4077b8:	46c3      	mov	fp, r8
  4077ba:	bf28      	it	cs
  4077bc:	46cb      	movcs	fp, r9
  4077be:	4298      	cmp	r0, r3
  4077c0:	465f      	mov	r7, fp
  4077c2:	d904      	bls.n	4077ce <__sfvwrite_r+0x17a>
  4077c4:	68a3      	ldr	r3, [r4, #8]
  4077c6:	4413      	add	r3, r2
  4077c8:	459b      	cmp	fp, r3
  4077ca:	f300 8090 	bgt.w	4078ee <__sfvwrite_r+0x29a>
  4077ce:	4593      	cmp	fp, r2
  4077d0:	db20      	blt.n	407814 <__sfvwrite_r+0x1c0>
  4077d2:	4613      	mov	r3, r2
  4077d4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4077d6:	69e1      	ldr	r1, [r4, #28]
  4077d8:	9801      	ldr	r0, [sp, #4]
  4077da:	4652      	mov	r2, sl
  4077dc:	47b8      	blx	r7
  4077de:	1e07      	subs	r7, r0, #0
  4077e0:	ddd2      	ble.n	407788 <__sfvwrite_r+0x134>
  4077e2:	ebb8 0807 	subs.w	r8, r8, r7
  4077e6:	d023      	beq.n	407830 <__sfvwrite_r+0x1dc>
  4077e8:	68b3      	ldr	r3, [r6, #8]
  4077ea:	1bdb      	subs	r3, r3, r7
  4077ec:	44ba      	add	sl, r7
  4077ee:	ebc7 0909 	rsb	r9, r7, r9
  4077f2:	60b3      	str	r3, [r6, #8]
  4077f4:	2b00      	cmp	r3, #0
  4077f6:	f43f af5f 	beq.w	4076b8 <__sfvwrite_r+0x64>
  4077fa:	f1b9 0f00 	cmp.w	r9, #0
  4077fe:	d1d4      	bne.n	4077aa <__sfvwrite_r+0x156>
  407800:	2300      	movs	r3, #0
  407802:	f8d5 a000 	ldr.w	sl, [r5]
  407806:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40780a:	9302      	str	r3, [sp, #8]
  40780c:	3508      	adds	r5, #8
  40780e:	e7c9      	b.n	4077a4 <__sfvwrite_r+0x150>
  407810:	4640      	mov	r0, r8
  407812:	e783      	b.n	40771c <__sfvwrite_r+0xc8>
  407814:	465a      	mov	r2, fp
  407816:	4651      	mov	r1, sl
  407818:	f000 f99a 	bl	407b50 <memmove>
  40781c:	68a2      	ldr	r2, [r4, #8]
  40781e:	6823      	ldr	r3, [r4, #0]
  407820:	ebcb 0202 	rsb	r2, fp, r2
  407824:	445b      	add	r3, fp
  407826:	ebb8 0807 	subs.w	r8, r8, r7
  40782a:	60a2      	str	r2, [r4, #8]
  40782c:	6023      	str	r3, [r4, #0]
  40782e:	d1db      	bne.n	4077e8 <__sfvwrite_r+0x194>
  407830:	4621      	mov	r1, r4
  407832:	9801      	ldr	r0, [sp, #4]
  407834:	f7ff fcc8 	bl	4071c8 <_fflush_r>
  407838:	2800      	cmp	r0, #0
  40783a:	d1a5      	bne.n	407788 <__sfvwrite_r+0x134>
  40783c:	f8cd 8008 	str.w	r8, [sp, #8]
  407840:	e7d2      	b.n	4077e8 <__sfvwrite_r+0x194>
  407842:	6820      	ldr	r0, [r4, #0]
  407844:	46b8      	mov	r8, r7
  407846:	46ba      	mov	sl, r7
  407848:	e75c      	b.n	407704 <__sfvwrite_r+0xb0>
  40784a:	464a      	mov	r2, r9
  40784c:	210a      	movs	r1, #10
  40784e:	4650      	mov	r0, sl
  407850:	f000 f92e 	bl	407ab0 <memchr>
  407854:	2800      	cmp	r0, #0
  407856:	d06f      	beq.n	407938 <__sfvwrite_r+0x2e4>
  407858:	3001      	adds	r0, #1
  40785a:	2301      	movs	r3, #1
  40785c:	ebca 0800 	rsb	r8, sl, r0
  407860:	9302      	str	r3, [sp, #8]
  407862:	e7a5      	b.n	4077b0 <__sfvwrite_r+0x15c>
  407864:	6962      	ldr	r2, [r4, #20]
  407866:	6820      	ldr	r0, [r4, #0]
  407868:	6921      	ldr	r1, [r4, #16]
  40786a:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40786e:	ebc1 0a00 	rsb	sl, r1, r0
  407872:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407876:	f10a 0001 	add.w	r0, sl, #1
  40787a:	ea4f 0868 	mov.w	r8, r8, asr #1
  40787e:	4438      	add	r0, r7
  407880:	4540      	cmp	r0, r8
  407882:	4642      	mov	r2, r8
  407884:	bf84      	itt	hi
  407886:	4680      	movhi	r8, r0
  407888:	4642      	movhi	r2, r8
  40788a:	055b      	lsls	r3, r3, #21
  40788c:	d542      	bpl.n	407914 <__sfvwrite_r+0x2c0>
  40788e:	4611      	mov	r1, r2
  407890:	9801      	ldr	r0, [sp, #4]
  407892:	f7fb fb8f 	bl	402fb4 <_malloc_r>
  407896:	4683      	mov	fp, r0
  407898:	2800      	cmp	r0, #0
  40789a:	d055      	beq.n	407948 <__sfvwrite_r+0x2f4>
  40789c:	4652      	mov	r2, sl
  40789e:	6921      	ldr	r1, [r4, #16]
  4078a0:	f7fb fe40 	bl	403524 <memcpy>
  4078a4:	89a3      	ldrh	r3, [r4, #12]
  4078a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4078ae:	81a3      	strh	r3, [r4, #12]
  4078b0:	ebca 0308 	rsb	r3, sl, r8
  4078b4:	eb0b 000a 	add.w	r0, fp, sl
  4078b8:	f8c4 8014 	str.w	r8, [r4, #20]
  4078bc:	f8c4 b010 	str.w	fp, [r4, #16]
  4078c0:	6020      	str	r0, [r4, #0]
  4078c2:	60a3      	str	r3, [r4, #8]
  4078c4:	46b8      	mov	r8, r7
  4078c6:	46ba      	mov	sl, r7
  4078c8:	e71c      	b.n	407704 <__sfvwrite_r+0xb0>
  4078ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4078ce:	42bb      	cmp	r3, r7
  4078d0:	bf28      	it	cs
  4078d2:	463b      	movcs	r3, r7
  4078d4:	464a      	mov	r2, r9
  4078d6:	fb93 f3f1 	sdiv	r3, r3, r1
  4078da:	9801      	ldr	r0, [sp, #4]
  4078dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4078de:	fb01 f303 	mul.w	r3, r1, r3
  4078e2:	69e1      	ldr	r1, [r4, #28]
  4078e4:	47b0      	blx	r6
  4078e6:	2800      	cmp	r0, #0
  4078e8:	f73f af18 	bgt.w	40771c <__sfvwrite_r+0xc8>
  4078ec:	e74c      	b.n	407788 <__sfvwrite_r+0x134>
  4078ee:	461a      	mov	r2, r3
  4078f0:	4651      	mov	r1, sl
  4078f2:	9303      	str	r3, [sp, #12]
  4078f4:	f000 f92c 	bl	407b50 <memmove>
  4078f8:	6822      	ldr	r2, [r4, #0]
  4078fa:	9b03      	ldr	r3, [sp, #12]
  4078fc:	9801      	ldr	r0, [sp, #4]
  4078fe:	441a      	add	r2, r3
  407900:	6022      	str	r2, [r4, #0]
  407902:	4621      	mov	r1, r4
  407904:	f7ff fc60 	bl	4071c8 <_fflush_r>
  407908:	9b03      	ldr	r3, [sp, #12]
  40790a:	2800      	cmp	r0, #0
  40790c:	f47f af3c 	bne.w	407788 <__sfvwrite_r+0x134>
  407910:	461f      	mov	r7, r3
  407912:	e766      	b.n	4077e2 <__sfvwrite_r+0x18e>
  407914:	9801      	ldr	r0, [sp, #4]
  407916:	f000 fc8d 	bl	408234 <_realloc_r>
  40791a:	4683      	mov	fp, r0
  40791c:	2800      	cmp	r0, #0
  40791e:	d1c7      	bne.n	4078b0 <__sfvwrite_r+0x25c>
  407920:	9d01      	ldr	r5, [sp, #4]
  407922:	6921      	ldr	r1, [r4, #16]
  407924:	4628      	mov	r0, r5
  407926:	f7ff fdad 	bl	407484 <_free_r>
  40792a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40792e:	220c      	movs	r2, #12
  407930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407934:	602a      	str	r2, [r5, #0]
  407936:	e729      	b.n	40778c <__sfvwrite_r+0x138>
  407938:	2301      	movs	r3, #1
  40793a:	f109 0801 	add.w	r8, r9, #1
  40793e:	9302      	str	r3, [sp, #8]
  407940:	e736      	b.n	4077b0 <__sfvwrite_r+0x15c>
  407942:	f04f 30ff 	mov.w	r0, #4294967295
  407946:	e6b8      	b.n	4076ba <__sfvwrite_r+0x66>
  407948:	9a01      	ldr	r2, [sp, #4]
  40794a:	230c      	movs	r3, #12
  40794c:	6013      	str	r3, [r2, #0]
  40794e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407952:	e71b      	b.n	40778c <__sfvwrite_r+0x138>
  407954:	7ffffc00 	.word	0x7ffffc00

00407958 <_fwalk_reent>:
  407958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40795c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407960:	d01f      	beq.n	4079a2 <_fwalk_reent+0x4a>
  407962:	4688      	mov	r8, r1
  407964:	4606      	mov	r6, r0
  407966:	f04f 0900 	mov.w	r9, #0
  40796a:	687d      	ldr	r5, [r7, #4]
  40796c:	68bc      	ldr	r4, [r7, #8]
  40796e:	3d01      	subs	r5, #1
  407970:	d411      	bmi.n	407996 <_fwalk_reent+0x3e>
  407972:	89a3      	ldrh	r3, [r4, #12]
  407974:	2b01      	cmp	r3, #1
  407976:	f105 35ff 	add.w	r5, r5, #4294967295
  40797a:	d908      	bls.n	40798e <_fwalk_reent+0x36>
  40797c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407980:	3301      	adds	r3, #1
  407982:	4621      	mov	r1, r4
  407984:	4630      	mov	r0, r6
  407986:	d002      	beq.n	40798e <_fwalk_reent+0x36>
  407988:	47c0      	blx	r8
  40798a:	ea49 0900 	orr.w	r9, r9, r0
  40798e:	1c6b      	adds	r3, r5, #1
  407990:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407994:	d1ed      	bne.n	407972 <_fwalk_reent+0x1a>
  407996:	683f      	ldr	r7, [r7, #0]
  407998:	2f00      	cmp	r7, #0
  40799a:	d1e6      	bne.n	40796a <_fwalk_reent+0x12>
  40799c:	4648      	mov	r0, r9
  40799e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4079a2:	46b9      	mov	r9, r7
  4079a4:	4648      	mov	r0, r9
  4079a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4079aa:	bf00      	nop

004079ac <__locale_charset>:
  4079ac:	4800      	ldr	r0, [pc, #0]	; (4079b0 <__locale_charset+0x4>)
  4079ae:	4770      	bx	lr
  4079b0:	20400884 	.word	0x20400884

004079b4 <__locale_mb_cur_max>:
  4079b4:	4b01      	ldr	r3, [pc, #4]	; (4079bc <__locale_mb_cur_max+0x8>)
  4079b6:	6818      	ldr	r0, [r3, #0]
  4079b8:	4770      	bx	lr
  4079ba:	bf00      	nop
  4079bc:	204008a4 	.word	0x204008a4

004079c0 <_localeconv_r>:
  4079c0:	4800      	ldr	r0, [pc, #0]	; (4079c4 <_localeconv_r+0x4>)
  4079c2:	4770      	bx	lr
  4079c4:	2040084c 	.word	0x2040084c

004079c8 <__swhatbuf_r>:
  4079c8:	b570      	push	{r4, r5, r6, lr}
  4079ca:	460d      	mov	r5, r1
  4079cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4079d0:	2900      	cmp	r1, #0
  4079d2:	b090      	sub	sp, #64	; 0x40
  4079d4:	4614      	mov	r4, r2
  4079d6:	461e      	mov	r6, r3
  4079d8:	db14      	blt.n	407a04 <__swhatbuf_r+0x3c>
  4079da:	aa01      	add	r2, sp, #4
  4079dc:	f001 f858 	bl	408a90 <_fstat_r>
  4079e0:	2800      	cmp	r0, #0
  4079e2:	db0f      	blt.n	407a04 <__swhatbuf_r+0x3c>
  4079e4:	9a02      	ldr	r2, [sp, #8]
  4079e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4079ea:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4079ee:	fab2 f282 	clz	r2, r2
  4079f2:	0952      	lsrs	r2, r2, #5
  4079f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4079f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4079fc:	6032      	str	r2, [r6, #0]
  4079fe:	6023      	str	r3, [r4, #0]
  407a00:	b010      	add	sp, #64	; 0x40
  407a02:	bd70      	pop	{r4, r5, r6, pc}
  407a04:	89a8      	ldrh	r0, [r5, #12]
  407a06:	f000 0080 	and.w	r0, r0, #128	; 0x80
  407a0a:	b282      	uxth	r2, r0
  407a0c:	2000      	movs	r0, #0
  407a0e:	6030      	str	r0, [r6, #0]
  407a10:	b11a      	cbz	r2, 407a1a <__swhatbuf_r+0x52>
  407a12:	2340      	movs	r3, #64	; 0x40
  407a14:	6023      	str	r3, [r4, #0]
  407a16:	b010      	add	sp, #64	; 0x40
  407a18:	bd70      	pop	{r4, r5, r6, pc}
  407a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407a1e:	4610      	mov	r0, r2
  407a20:	6023      	str	r3, [r4, #0]
  407a22:	b010      	add	sp, #64	; 0x40
  407a24:	bd70      	pop	{r4, r5, r6, pc}
  407a26:	bf00      	nop

00407a28 <__smakebuf_r>:
  407a28:	898a      	ldrh	r2, [r1, #12]
  407a2a:	0792      	lsls	r2, r2, #30
  407a2c:	460b      	mov	r3, r1
  407a2e:	d506      	bpl.n	407a3e <__smakebuf_r+0x16>
  407a30:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407a34:	2101      	movs	r1, #1
  407a36:	601a      	str	r2, [r3, #0]
  407a38:	611a      	str	r2, [r3, #16]
  407a3a:	6159      	str	r1, [r3, #20]
  407a3c:	4770      	bx	lr
  407a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  407a40:	b083      	sub	sp, #12
  407a42:	ab01      	add	r3, sp, #4
  407a44:	466a      	mov	r2, sp
  407a46:	460c      	mov	r4, r1
  407a48:	4605      	mov	r5, r0
  407a4a:	f7ff ffbd 	bl	4079c8 <__swhatbuf_r>
  407a4e:	9900      	ldr	r1, [sp, #0]
  407a50:	4606      	mov	r6, r0
  407a52:	4628      	mov	r0, r5
  407a54:	f7fb faae 	bl	402fb4 <_malloc_r>
  407a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a5c:	b1d0      	cbz	r0, 407a94 <__smakebuf_r+0x6c>
  407a5e:	9a01      	ldr	r2, [sp, #4]
  407a60:	4f12      	ldr	r7, [pc, #72]	; (407aac <__smakebuf_r+0x84>)
  407a62:	9900      	ldr	r1, [sp, #0]
  407a64:	63ef      	str	r7, [r5, #60]	; 0x3c
  407a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407a6a:	81a3      	strh	r3, [r4, #12]
  407a6c:	6020      	str	r0, [r4, #0]
  407a6e:	6120      	str	r0, [r4, #16]
  407a70:	6161      	str	r1, [r4, #20]
  407a72:	b91a      	cbnz	r2, 407a7c <__smakebuf_r+0x54>
  407a74:	4333      	orrs	r3, r6
  407a76:	81a3      	strh	r3, [r4, #12]
  407a78:	b003      	add	sp, #12
  407a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407a7c:	4628      	mov	r0, r5
  407a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407a82:	f001 f819 	bl	408ab8 <_isatty_r>
  407a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a8a:	2800      	cmp	r0, #0
  407a8c:	d0f2      	beq.n	407a74 <__smakebuf_r+0x4c>
  407a8e:	f043 0301 	orr.w	r3, r3, #1
  407a92:	e7ef      	b.n	407a74 <__smakebuf_r+0x4c>
  407a94:	059a      	lsls	r2, r3, #22
  407a96:	d4ef      	bmi.n	407a78 <__smakebuf_r+0x50>
  407a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407a9c:	f043 0302 	orr.w	r3, r3, #2
  407aa0:	2101      	movs	r1, #1
  407aa2:	81a3      	strh	r3, [r4, #12]
  407aa4:	6022      	str	r2, [r4, #0]
  407aa6:	6122      	str	r2, [r4, #16]
  407aa8:	6161      	str	r1, [r4, #20]
  407aaa:	e7e5      	b.n	407a78 <__smakebuf_r+0x50>
  407aac:	004071f5 	.word	0x004071f5

00407ab0 <memchr>:
  407ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407ab4:	2a10      	cmp	r2, #16
  407ab6:	db2b      	blt.n	407b10 <memchr+0x60>
  407ab8:	f010 0f07 	tst.w	r0, #7
  407abc:	d008      	beq.n	407ad0 <memchr+0x20>
  407abe:	f810 3b01 	ldrb.w	r3, [r0], #1
  407ac2:	3a01      	subs	r2, #1
  407ac4:	428b      	cmp	r3, r1
  407ac6:	d02d      	beq.n	407b24 <memchr+0x74>
  407ac8:	f010 0f07 	tst.w	r0, #7
  407acc:	b342      	cbz	r2, 407b20 <memchr+0x70>
  407ace:	d1f6      	bne.n	407abe <memchr+0xe>
  407ad0:	b4f0      	push	{r4, r5, r6, r7}
  407ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  407ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  407ada:	f022 0407 	bic.w	r4, r2, #7
  407ade:	f07f 0700 	mvns.w	r7, #0
  407ae2:	2300      	movs	r3, #0
  407ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  407ae8:	3c08      	subs	r4, #8
  407aea:	ea85 0501 	eor.w	r5, r5, r1
  407aee:	ea86 0601 	eor.w	r6, r6, r1
  407af2:	fa85 f547 	uadd8	r5, r5, r7
  407af6:	faa3 f587 	sel	r5, r3, r7
  407afa:	fa86 f647 	uadd8	r6, r6, r7
  407afe:	faa5 f687 	sel	r6, r5, r7
  407b02:	b98e      	cbnz	r6, 407b28 <memchr+0x78>
  407b04:	d1ee      	bne.n	407ae4 <memchr+0x34>
  407b06:	bcf0      	pop	{r4, r5, r6, r7}
  407b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  407b0c:	f002 0207 	and.w	r2, r2, #7
  407b10:	b132      	cbz	r2, 407b20 <memchr+0x70>
  407b12:	f810 3b01 	ldrb.w	r3, [r0], #1
  407b16:	3a01      	subs	r2, #1
  407b18:	ea83 0301 	eor.w	r3, r3, r1
  407b1c:	b113      	cbz	r3, 407b24 <memchr+0x74>
  407b1e:	d1f8      	bne.n	407b12 <memchr+0x62>
  407b20:	2000      	movs	r0, #0
  407b22:	4770      	bx	lr
  407b24:	3801      	subs	r0, #1
  407b26:	4770      	bx	lr
  407b28:	2d00      	cmp	r5, #0
  407b2a:	bf06      	itte	eq
  407b2c:	4635      	moveq	r5, r6
  407b2e:	3803      	subeq	r0, #3
  407b30:	3807      	subne	r0, #7
  407b32:	f015 0f01 	tst.w	r5, #1
  407b36:	d107      	bne.n	407b48 <memchr+0x98>
  407b38:	3001      	adds	r0, #1
  407b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
  407b3e:	bf02      	ittt	eq
  407b40:	3001      	addeq	r0, #1
  407b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  407b46:	3001      	addeq	r0, #1
  407b48:	bcf0      	pop	{r4, r5, r6, r7}
  407b4a:	3801      	subs	r0, #1
  407b4c:	4770      	bx	lr
  407b4e:	bf00      	nop

00407b50 <memmove>:
  407b50:	4288      	cmp	r0, r1
  407b52:	b5f0      	push	{r4, r5, r6, r7, lr}
  407b54:	d90d      	bls.n	407b72 <memmove+0x22>
  407b56:	188b      	adds	r3, r1, r2
  407b58:	4298      	cmp	r0, r3
  407b5a:	d20a      	bcs.n	407b72 <memmove+0x22>
  407b5c:	1881      	adds	r1, r0, r2
  407b5e:	2a00      	cmp	r2, #0
  407b60:	d051      	beq.n	407c06 <memmove+0xb6>
  407b62:	1a9a      	subs	r2, r3, r2
  407b64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  407b68:	f801 4d01 	strb.w	r4, [r1, #-1]!
  407b6c:	4293      	cmp	r3, r2
  407b6e:	d1f9      	bne.n	407b64 <memmove+0x14>
  407b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407b72:	2a0f      	cmp	r2, #15
  407b74:	d948      	bls.n	407c08 <memmove+0xb8>
  407b76:	ea41 0300 	orr.w	r3, r1, r0
  407b7a:	079b      	lsls	r3, r3, #30
  407b7c:	d146      	bne.n	407c0c <memmove+0xbc>
  407b7e:	f100 0410 	add.w	r4, r0, #16
  407b82:	f101 0310 	add.w	r3, r1, #16
  407b86:	4615      	mov	r5, r2
  407b88:	f853 6c10 	ldr.w	r6, [r3, #-16]
  407b8c:	f844 6c10 	str.w	r6, [r4, #-16]
  407b90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  407b94:	f844 6c0c 	str.w	r6, [r4, #-12]
  407b98:	f853 6c08 	ldr.w	r6, [r3, #-8]
  407b9c:	f844 6c08 	str.w	r6, [r4, #-8]
  407ba0:	3d10      	subs	r5, #16
  407ba2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  407ba6:	f844 6c04 	str.w	r6, [r4, #-4]
  407baa:	2d0f      	cmp	r5, #15
  407bac:	f103 0310 	add.w	r3, r3, #16
  407bb0:	f104 0410 	add.w	r4, r4, #16
  407bb4:	d8e8      	bhi.n	407b88 <memmove+0x38>
  407bb6:	f1a2 0310 	sub.w	r3, r2, #16
  407bba:	f023 030f 	bic.w	r3, r3, #15
  407bbe:	f002 0e0f 	and.w	lr, r2, #15
  407bc2:	3310      	adds	r3, #16
  407bc4:	f1be 0f03 	cmp.w	lr, #3
  407bc8:	4419      	add	r1, r3
  407bca:	4403      	add	r3, r0
  407bcc:	d921      	bls.n	407c12 <memmove+0xc2>
  407bce:	1f1e      	subs	r6, r3, #4
  407bd0:	460d      	mov	r5, r1
  407bd2:	4674      	mov	r4, lr
  407bd4:	3c04      	subs	r4, #4
  407bd6:	f855 7b04 	ldr.w	r7, [r5], #4
  407bda:	f846 7f04 	str.w	r7, [r6, #4]!
  407bde:	2c03      	cmp	r4, #3
  407be0:	d8f8      	bhi.n	407bd4 <memmove+0x84>
  407be2:	f1ae 0404 	sub.w	r4, lr, #4
  407be6:	f024 0403 	bic.w	r4, r4, #3
  407bea:	3404      	adds	r4, #4
  407bec:	4423      	add	r3, r4
  407bee:	4421      	add	r1, r4
  407bf0:	f002 0203 	and.w	r2, r2, #3
  407bf4:	b162      	cbz	r2, 407c10 <memmove+0xc0>
  407bf6:	3b01      	subs	r3, #1
  407bf8:	440a      	add	r2, r1
  407bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
  407bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
  407c02:	428a      	cmp	r2, r1
  407c04:	d1f9      	bne.n	407bfa <memmove+0xaa>
  407c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407c08:	4603      	mov	r3, r0
  407c0a:	e7f3      	b.n	407bf4 <memmove+0xa4>
  407c0c:	4603      	mov	r3, r0
  407c0e:	e7f2      	b.n	407bf6 <memmove+0xa6>
  407c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407c12:	4672      	mov	r2, lr
  407c14:	e7ee      	b.n	407bf4 <memmove+0xa4>
  407c16:	bf00      	nop

00407c18 <_Balloc>:
  407c18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407c1a:	b570      	push	{r4, r5, r6, lr}
  407c1c:	4605      	mov	r5, r0
  407c1e:	460c      	mov	r4, r1
  407c20:	b14b      	cbz	r3, 407c36 <_Balloc+0x1e>
  407c22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  407c26:	b180      	cbz	r0, 407c4a <_Balloc+0x32>
  407c28:	6802      	ldr	r2, [r0, #0]
  407c2a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  407c2e:	2300      	movs	r3, #0
  407c30:	6103      	str	r3, [r0, #16]
  407c32:	60c3      	str	r3, [r0, #12]
  407c34:	bd70      	pop	{r4, r5, r6, pc}
  407c36:	2221      	movs	r2, #33	; 0x21
  407c38:	2104      	movs	r1, #4
  407c3a:	f000 fea5 	bl	408988 <_calloc_r>
  407c3e:	64e8      	str	r0, [r5, #76]	; 0x4c
  407c40:	4603      	mov	r3, r0
  407c42:	2800      	cmp	r0, #0
  407c44:	d1ed      	bne.n	407c22 <_Balloc+0xa>
  407c46:	2000      	movs	r0, #0
  407c48:	bd70      	pop	{r4, r5, r6, pc}
  407c4a:	2101      	movs	r1, #1
  407c4c:	fa01 f604 	lsl.w	r6, r1, r4
  407c50:	1d72      	adds	r2, r6, #5
  407c52:	4628      	mov	r0, r5
  407c54:	0092      	lsls	r2, r2, #2
  407c56:	f000 fe97 	bl	408988 <_calloc_r>
  407c5a:	2800      	cmp	r0, #0
  407c5c:	d0f3      	beq.n	407c46 <_Balloc+0x2e>
  407c5e:	6044      	str	r4, [r0, #4]
  407c60:	6086      	str	r6, [r0, #8]
  407c62:	e7e4      	b.n	407c2e <_Balloc+0x16>

00407c64 <_Bfree>:
  407c64:	b131      	cbz	r1, 407c74 <_Bfree+0x10>
  407c66:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  407c68:	684a      	ldr	r2, [r1, #4]
  407c6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  407c6e:	6008      	str	r0, [r1, #0]
  407c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  407c74:	4770      	bx	lr
  407c76:	bf00      	nop

00407c78 <__multadd>:
  407c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  407c7a:	690c      	ldr	r4, [r1, #16]
  407c7c:	b083      	sub	sp, #12
  407c7e:	460d      	mov	r5, r1
  407c80:	4606      	mov	r6, r0
  407c82:	f101 0e14 	add.w	lr, r1, #20
  407c86:	2700      	movs	r7, #0
  407c88:	f8de 0000 	ldr.w	r0, [lr]
  407c8c:	b281      	uxth	r1, r0
  407c8e:	fb02 3101 	mla	r1, r2, r1, r3
  407c92:	0c0b      	lsrs	r3, r1, #16
  407c94:	0c00      	lsrs	r0, r0, #16
  407c96:	fb02 3300 	mla	r3, r2, r0, r3
  407c9a:	b289      	uxth	r1, r1
  407c9c:	3701      	adds	r7, #1
  407c9e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  407ca2:	42bc      	cmp	r4, r7
  407ca4:	f84e 1b04 	str.w	r1, [lr], #4
  407ca8:	ea4f 4313 	mov.w	r3, r3, lsr #16
  407cac:	dcec      	bgt.n	407c88 <__multadd+0x10>
  407cae:	b13b      	cbz	r3, 407cc0 <__multadd+0x48>
  407cb0:	68aa      	ldr	r2, [r5, #8]
  407cb2:	4294      	cmp	r4, r2
  407cb4:	da07      	bge.n	407cc6 <__multadd+0x4e>
  407cb6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407cba:	3401      	adds	r4, #1
  407cbc:	6153      	str	r3, [r2, #20]
  407cbe:	612c      	str	r4, [r5, #16]
  407cc0:	4628      	mov	r0, r5
  407cc2:	b003      	add	sp, #12
  407cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407cc6:	6869      	ldr	r1, [r5, #4]
  407cc8:	9301      	str	r3, [sp, #4]
  407cca:	3101      	adds	r1, #1
  407ccc:	4630      	mov	r0, r6
  407cce:	f7ff ffa3 	bl	407c18 <_Balloc>
  407cd2:	692a      	ldr	r2, [r5, #16]
  407cd4:	3202      	adds	r2, #2
  407cd6:	f105 010c 	add.w	r1, r5, #12
  407cda:	4607      	mov	r7, r0
  407cdc:	0092      	lsls	r2, r2, #2
  407cde:	300c      	adds	r0, #12
  407ce0:	f7fb fc20 	bl	403524 <memcpy>
  407ce4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  407ce6:	6869      	ldr	r1, [r5, #4]
  407ce8:	9b01      	ldr	r3, [sp, #4]
  407cea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407cee:	6028      	str	r0, [r5, #0]
  407cf0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  407cf4:	463d      	mov	r5, r7
  407cf6:	e7de      	b.n	407cb6 <__multadd+0x3e>

00407cf8 <__hi0bits>:
  407cf8:	0c03      	lsrs	r3, r0, #16
  407cfa:	041b      	lsls	r3, r3, #16
  407cfc:	b9b3      	cbnz	r3, 407d2c <__hi0bits+0x34>
  407cfe:	0400      	lsls	r0, r0, #16
  407d00:	2310      	movs	r3, #16
  407d02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  407d06:	bf04      	itt	eq
  407d08:	0200      	lsleq	r0, r0, #8
  407d0a:	3308      	addeq	r3, #8
  407d0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407d10:	bf04      	itt	eq
  407d12:	0100      	lsleq	r0, r0, #4
  407d14:	3304      	addeq	r3, #4
  407d16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  407d1a:	bf04      	itt	eq
  407d1c:	0080      	lsleq	r0, r0, #2
  407d1e:	3302      	addeq	r3, #2
  407d20:	2800      	cmp	r0, #0
  407d22:	db07      	blt.n	407d34 <__hi0bits+0x3c>
  407d24:	0042      	lsls	r2, r0, #1
  407d26:	d403      	bmi.n	407d30 <__hi0bits+0x38>
  407d28:	2020      	movs	r0, #32
  407d2a:	4770      	bx	lr
  407d2c:	2300      	movs	r3, #0
  407d2e:	e7e8      	b.n	407d02 <__hi0bits+0xa>
  407d30:	1c58      	adds	r0, r3, #1
  407d32:	4770      	bx	lr
  407d34:	4618      	mov	r0, r3
  407d36:	4770      	bx	lr

00407d38 <__lo0bits>:
  407d38:	6803      	ldr	r3, [r0, #0]
  407d3a:	f013 0207 	ands.w	r2, r3, #7
  407d3e:	d007      	beq.n	407d50 <__lo0bits+0x18>
  407d40:	07d9      	lsls	r1, r3, #31
  407d42:	d420      	bmi.n	407d86 <__lo0bits+0x4e>
  407d44:	079a      	lsls	r2, r3, #30
  407d46:	d420      	bmi.n	407d8a <__lo0bits+0x52>
  407d48:	089b      	lsrs	r3, r3, #2
  407d4a:	6003      	str	r3, [r0, #0]
  407d4c:	2002      	movs	r0, #2
  407d4e:	4770      	bx	lr
  407d50:	b299      	uxth	r1, r3
  407d52:	b909      	cbnz	r1, 407d58 <__lo0bits+0x20>
  407d54:	0c1b      	lsrs	r3, r3, #16
  407d56:	2210      	movs	r2, #16
  407d58:	f013 0fff 	tst.w	r3, #255	; 0xff
  407d5c:	bf04      	itt	eq
  407d5e:	0a1b      	lsreq	r3, r3, #8
  407d60:	3208      	addeq	r2, #8
  407d62:	0719      	lsls	r1, r3, #28
  407d64:	bf04      	itt	eq
  407d66:	091b      	lsreq	r3, r3, #4
  407d68:	3204      	addeq	r2, #4
  407d6a:	0799      	lsls	r1, r3, #30
  407d6c:	bf04      	itt	eq
  407d6e:	089b      	lsreq	r3, r3, #2
  407d70:	3202      	addeq	r2, #2
  407d72:	07d9      	lsls	r1, r3, #31
  407d74:	d404      	bmi.n	407d80 <__lo0bits+0x48>
  407d76:	085b      	lsrs	r3, r3, #1
  407d78:	d101      	bne.n	407d7e <__lo0bits+0x46>
  407d7a:	2020      	movs	r0, #32
  407d7c:	4770      	bx	lr
  407d7e:	3201      	adds	r2, #1
  407d80:	6003      	str	r3, [r0, #0]
  407d82:	4610      	mov	r0, r2
  407d84:	4770      	bx	lr
  407d86:	2000      	movs	r0, #0
  407d88:	4770      	bx	lr
  407d8a:	085b      	lsrs	r3, r3, #1
  407d8c:	6003      	str	r3, [r0, #0]
  407d8e:	2001      	movs	r0, #1
  407d90:	4770      	bx	lr
  407d92:	bf00      	nop

00407d94 <__i2b>:
  407d94:	b510      	push	{r4, lr}
  407d96:	460c      	mov	r4, r1
  407d98:	2101      	movs	r1, #1
  407d9a:	f7ff ff3d 	bl	407c18 <_Balloc>
  407d9e:	2201      	movs	r2, #1
  407da0:	6144      	str	r4, [r0, #20]
  407da2:	6102      	str	r2, [r0, #16]
  407da4:	bd10      	pop	{r4, pc}
  407da6:	bf00      	nop

00407da8 <__multiply>:
  407da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407dac:	690d      	ldr	r5, [r1, #16]
  407dae:	6917      	ldr	r7, [r2, #16]
  407db0:	42bd      	cmp	r5, r7
  407db2:	b083      	sub	sp, #12
  407db4:	460c      	mov	r4, r1
  407db6:	4616      	mov	r6, r2
  407db8:	da04      	bge.n	407dc4 <__multiply+0x1c>
  407dba:	462a      	mov	r2, r5
  407dbc:	4634      	mov	r4, r6
  407dbe:	463d      	mov	r5, r7
  407dc0:	460e      	mov	r6, r1
  407dc2:	4617      	mov	r7, r2
  407dc4:	68a3      	ldr	r3, [r4, #8]
  407dc6:	6861      	ldr	r1, [r4, #4]
  407dc8:	eb05 0807 	add.w	r8, r5, r7
  407dcc:	4598      	cmp	r8, r3
  407dce:	bfc8      	it	gt
  407dd0:	3101      	addgt	r1, #1
  407dd2:	f7ff ff21 	bl	407c18 <_Balloc>
  407dd6:	f100 0c14 	add.w	ip, r0, #20
  407dda:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  407dde:	45cc      	cmp	ip, r9
  407de0:	9000      	str	r0, [sp, #0]
  407de2:	d205      	bcs.n	407df0 <__multiply+0x48>
  407de4:	4663      	mov	r3, ip
  407de6:	2100      	movs	r1, #0
  407de8:	f843 1b04 	str.w	r1, [r3], #4
  407dec:	4599      	cmp	r9, r3
  407dee:	d8fb      	bhi.n	407de8 <__multiply+0x40>
  407df0:	f106 0214 	add.w	r2, r6, #20
  407df4:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  407df8:	f104 0314 	add.w	r3, r4, #20
  407dfc:	4552      	cmp	r2, sl
  407dfe:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  407e02:	d254      	bcs.n	407eae <__multiply+0x106>
  407e04:	f8cd 9004 	str.w	r9, [sp, #4]
  407e08:	4699      	mov	r9, r3
  407e0a:	f852 3b04 	ldr.w	r3, [r2], #4
  407e0e:	fa1f fb83 	uxth.w	fp, r3
  407e12:	f1bb 0f00 	cmp.w	fp, #0
  407e16:	d020      	beq.n	407e5a <__multiply+0xb2>
  407e18:	2000      	movs	r0, #0
  407e1a:	464f      	mov	r7, r9
  407e1c:	4666      	mov	r6, ip
  407e1e:	4605      	mov	r5, r0
  407e20:	e000      	b.n	407e24 <__multiply+0x7c>
  407e22:	461e      	mov	r6, r3
  407e24:	f857 4b04 	ldr.w	r4, [r7], #4
  407e28:	6830      	ldr	r0, [r6, #0]
  407e2a:	b2a1      	uxth	r1, r4
  407e2c:	b283      	uxth	r3, r0
  407e2e:	fb0b 3101 	mla	r1, fp, r1, r3
  407e32:	0c24      	lsrs	r4, r4, #16
  407e34:	0c00      	lsrs	r0, r0, #16
  407e36:	194b      	adds	r3, r1, r5
  407e38:	fb0b 0004 	mla	r0, fp, r4, r0
  407e3c:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  407e40:	b299      	uxth	r1, r3
  407e42:	4633      	mov	r3, r6
  407e44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  407e48:	45be      	cmp	lr, r7
  407e4a:	ea4f 4510 	mov.w	r5, r0, lsr #16
  407e4e:	f843 1b04 	str.w	r1, [r3], #4
  407e52:	d8e6      	bhi.n	407e22 <__multiply+0x7a>
  407e54:	6075      	str	r5, [r6, #4]
  407e56:	f852 3c04 	ldr.w	r3, [r2, #-4]
  407e5a:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  407e5e:	d020      	beq.n	407ea2 <__multiply+0xfa>
  407e60:	f8dc 3000 	ldr.w	r3, [ip]
  407e64:	4667      	mov	r7, ip
  407e66:	4618      	mov	r0, r3
  407e68:	464d      	mov	r5, r9
  407e6a:	2100      	movs	r1, #0
  407e6c:	e000      	b.n	407e70 <__multiply+0xc8>
  407e6e:	4637      	mov	r7, r6
  407e70:	882c      	ldrh	r4, [r5, #0]
  407e72:	0c00      	lsrs	r0, r0, #16
  407e74:	fb0b 0004 	mla	r0, fp, r4, r0
  407e78:	4401      	add	r1, r0
  407e7a:	b29c      	uxth	r4, r3
  407e7c:	463e      	mov	r6, r7
  407e7e:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  407e82:	f846 3b04 	str.w	r3, [r6], #4
  407e86:	6878      	ldr	r0, [r7, #4]
  407e88:	f855 4b04 	ldr.w	r4, [r5], #4
  407e8c:	b283      	uxth	r3, r0
  407e8e:	0c24      	lsrs	r4, r4, #16
  407e90:	fb0b 3404 	mla	r4, fp, r4, r3
  407e94:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  407e98:	45ae      	cmp	lr, r5
  407e9a:	ea4f 4113 	mov.w	r1, r3, lsr #16
  407e9e:	d8e6      	bhi.n	407e6e <__multiply+0xc6>
  407ea0:	607b      	str	r3, [r7, #4]
  407ea2:	4592      	cmp	sl, r2
  407ea4:	f10c 0c04 	add.w	ip, ip, #4
  407ea8:	d8af      	bhi.n	407e0a <__multiply+0x62>
  407eaa:	f8dd 9004 	ldr.w	r9, [sp, #4]
  407eae:	f1b8 0f00 	cmp.w	r8, #0
  407eb2:	dd0b      	ble.n	407ecc <__multiply+0x124>
  407eb4:	f859 3c04 	ldr.w	r3, [r9, #-4]
  407eb8:	f1a9 0904 	sub.w	r9, r9, #4
  407ebc:	b11b      	cbz	r3, 407ec6 <__multiply+0x11e>
  407ebe:	e005      	b.n	407ecc <__multiply+0x124>
  407ec0:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  407ec4:	b913      	cbnz	r3, 407ecc <__multiply+0x124>
  407ec6:	f1b8 0801 	subs.w	r8, r8, #1
  407eca:	d1f9      	bne.n	407ec0 <__multiply+0x118>
  407ecc:	9800      	ldr	r0, [sp, #0]
  407ece:	f8c0 8010 	str.w	r8, [r0, #16]
  407ed2:	b003      	add	sp, #12
  407ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407ed8 <__pow5mult>:
  407ed8:	f012 0303 	ands.w	r3, r2, #3
  407edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407ee0:	4614      	mov	r4, r2
  407ee2:	4607      	mov	r7, r0
  407ee4:	d12e      	bne.n	407f44 <__pow5mult+0x6c>
  407ee6:	460e      	mov	r6, r1
  407ee8:	10a4      	asrs	r4, r4, #2
  407eea:	d01c      	beq.n	407f26 <__pow5mult+0x4e>
  407eec:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  407eee:	b395      	cbz	r5, 407f56 <__pow5mult+0x7e>
  407ef0:	07e3      	lsls	r3, r4, #31
  407ef2:	f04f 0800 	mov.w	r8, #0
  407ef6:	d406      	bmi.n	407f06 <__pow5mult+0x2e>
  407ef8:	1064      	asrs	r4, r4, #1
  407efa:	d014      	beq.n	407f26 <__pow5mult+0x4e>
  407efc:	6828      	ldr	r0, [r5, #0]
  407efe:	b1a8      	cbz	r0, 407f2c <__pow5mult+0x54>
  407f00:	4605      	mov	r5, r0
  407f02:	07e3      	lsls	r3, r4, #31
  407f04:	d5f8      	bpl.n	407ef8 <__pow5mult+0x20>
  407f06:	462a      	mov	r2, r5
  407f08:	4631      	mov	r1, r6
  407f0a:	4638      	mov	r0, r7
  407f0c:	f7ff ff4c 	bl	407da8 <__multiply>
  407f10:	b1b6      	cbz	r6, 407f40 <__pow5mult+0x68>
  407f12:	6872      	ldr	r2, [r6, #4]
  407f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  407f16:	1064      	asrs	r4, r4, #1
  407f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  407f1c:	6031      	str	r1, [r6, #0]
  407f1e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407f22:	4606      	mov	r6, r0
  407f24:	d1ea      	bne.n	407efc <__pow5mult+0x24>
  407f26:	4630      	mov	r0, r6
  407f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407f2c:	462a      	mov	r2, r5
  407f2e:	4629      	mov	r1, r5
  407f30:	4638      	mov	r0, r7
  407f32:	f7ff ff39 	bl	407da8 <__multiply>
  407f36:	6028      	str	r0, [r5, #0]
  407f38:	f8c0 8000 	str.w	r8, [r0]
  407f3c:	4605      	mov	r5, r0
  407f3e:	e7e0      	b.n	407f02 <__pow5mult+0x2a>
  407f40:	4606      	mov	r6, r0
  407f42:	e7d9      	b.n	407ef8 <__pow5mult+0x20>
  407f44:	1e5a      	subs	r2, r3, #1
  407f46:	4d0b      	ldr	r5, [pc, #44]	; (407f74 <__pow5mult+0x9c>)
  407f48:	2300      	movs	r3, #0
  407f4a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  407f4e:	f7ff fe93 	bl	407c78 <__multadd>
  407f52:	4606      	mov	r6, r0
  407f54:	e7c8      	b.n	407ee8 <__pow5mult+0x10>
  407f56:	2101      	movs	r1, #1
  407f58:	4638      	mov	r0, r7
  407f5a:	f7ff fe5d 	bl	407c18 <_Balloc>
  407f5e:	f240 2171 	movw	r1, #625	; 0x271
  407f62:	2201      	movs	r2, #1
  407f64:	2300      	movs	r3, #0
  407f66:	6141      	str	r1, [r0, #20]
  407f68:	6102      	str	r2, [r0, #16]
  407f6a:	4605      	mov	r5, r0
  407f6c:	64b8      	str	r0, [r7, #72]	; 0x48
  407f6e:	6003      	str	r3, [r0, #0]
  407f70:	e7be      	b.n	407ef0 <__pow5mult+0x18>
  407f72:	bf00      	nop
  407f74:	00409a48 	.word	0x00409a48

00407f78 <__lshift>:
  407f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407f7c:	4691      	mov	r9, r2
  407f7e:	690a      	ldr	r2, [r1, #16]
  407f80:	688b      	ldr	r3, [r1, #8]
  407f82:	ea4f 1469 	mov.w	r4, r9, asr #5
  407f86:	eb04 0802 	add.w	r8, r4, r2
  407f8a:	f108 0501 	add.w	r5, r8, #1
  407f8e:	429d      	cmp	r5, r3
  407f90:	460e      	mov	r6, r1
  407f92:	4682      	mov	sl, r0
  407f94:	6849      	ldr	r1, [r1, #4]
  407f96:	dd04      	ble.n	407fa2 <__lshift+0x2a>
  407f98:	005b      	lsls	r3, r3, #1
  407f9a:	429d      	cmp	r5, r3
  407f9c:	f101 0101 	add.w	r1, r1, #1
  407fa0:	dcfa      	bgt.n	407f98 <__lshift+0x20>
  407fa2:	4650      	mov	r0, sl
  407fa4:	f7ff fe38 	bl	407c18 <_Balloc>
  407fa8:	2c00      	cmp	r4, #0
  407faa:	f100 0214 	add.w	r2, r0, #20
  407fae:	dd38      	ble.n	408022 <__lshift+0xaa>
  407fb0:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  407fb4:	2100      	movs	r1, #0
  407fb6:	f842 1b04 	str.w	r1, [r2], #4
  407fba:	4293      	cmp	r3, r2
  407fbc:	d1fb      	bne.n	407fb6 <__lshift+0x3e>
  407fbe:	6934      	ldr	r4, [r6, #16]
  407fc0:	f106 0114 	add.w	r1, r6, #20
  407fc4:	f019 091f 	ands.w	r9, r9, #31
  407fc8:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407fcc:	d021      	beq.n	408012 <__lshift+0x9a>
  407fce:	f1c9 0220 	rsb	r2, r9, #32
  407fd2:	2400      	movs	r4, #0
  407fd4:	680f      	ldr	r7, [r1, #0]
  407fd6:	fa07 fc09 	lsl.w	ip, r7, r9
  407fda:	ea4c 0404 	orr.w	r4, ip, r4
  407fde:	469c      	mov	ip, r3
  407fe0:	f843 4b04 	str.w	r4, [r3], #4
  407fe4:	f851 4b04 	ldr.w	r4, [r1], #4
  407fe8:	458e      	cmp	lr, r1
  407fea:	fa24 f402 	lsr.w	r4, r4, r2
  407fee:	d8f1      	bhi.n	407fd4 <__lshift+0x5c>
  407ff0:	f8cc 4004 	str.w	r4, [ip, #4]
  407ff4:	b10c      	cbz	r4, 407ffa <__lshift+0x82>
  407ff6:	f108 0502 	add.w	r5, r8, #2
  407ffa:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  407ffe:	6872      	ldr	r2, [r6, #4]
  408000:	3d01      	subs	r5, #1
  408002:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408006:	6105      	str	r5, [r0, #16]
  408008:	6031      	str	r1, [r6, #0]
  40800a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408012:	3b04      	subs	r3, #4
  408014:	f851 2b04 	ldr.w	r2, [r1], #4
  408018:	f843 2f04 	str.w	r2, [r3, #4]!
  40801c:	458e      	cmp	lr, r1
  40801e:	d8f9      	bhi.n	408014 <__lshift+0x9c>
  408020:	e7eb      	b.n	407ffa <__lshift+0x82>
  408022:	4613      	mov	r3, r2
  408024:	e7cb      	b.n	407fbe <__lshift+0x46>
  408026:	bf00      	nop

00408028 <__mcmp>:
  408028:	6902      	ldr	r2, [r0, #16]
  40802a:	690b      	ldr	r3, [r1, #16]
  40802c:	1ad2      	subs	r2, r2, r3
  40802e:	d112      	bne.n	408056 <__mcmp+0x2e>
  408030:	009b      	lsls	r3, r3, #2
  408032:	3014      	adds	r0, #20
  408034:	3114      	adds	r1, #20
  408036:	4419      	add	r1, r3
  408038:	b410      	push	{r4}
  40803a:	4403      	add	r3, r0
  40803c:	e001      	b.n	408042 <__mcmp+0x1a>
  40803e:	4298      	cmp	r0, r3
  408040:	d20b      	bcs.n	40805a <__mcmp+0x32>
  408042:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408046:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40804a:	4294      	cmp	r4, r2
  40804c:	d0f7      	beq.n	40803e <__mcmp+0x16>
  40804e:	d307      	bcc.n	408060 <__mcmp+0x38>
  408050:	2001      	movs	r0, #1
  408052:	bc10      	pop	{r4}
  408054:	4770      	bx	lr
  408056:	4610      	mov	r0, r2
  408058:	4770      	bx	lr
  40805a:	2000      	movs	r0, #0
  40805c:	bc10      	pop	{r4}
  40805e:	4770      	bx	lr
  408060:	f04f 30ff 	mov.w	r0, #4294967295
  408064:	e7f5      	b.n	408052 <__mcmp+0x2a>
  408066:	bf00      	nop

00408068 <__mdiff>:
  408068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40806c:	690b      	ldr	r3, [r1, #16]
  40806e:	460f      	mov	r7, r1
  408070:	6911      	ldr	r1, [r2, #16]
  408072:	1a5b      	subs	r3, r3, r1
  408074:	2b00      	cmp	r3, #0
  408076:	4690      	mov	r8, r2
  408078:	d117      	bne.n	4080aa <__mdiff+0x42>
  40807a:	0089      	lsls	r1, r1, #2
  40807c:	f107 0214 	add.w	r2, r7, #20
  408080:	f108 0514 	add.w	r5, r8, #20
  408084:	1853      	adds	r3, r2, r1
  408086:	4429      	add	r1, r5
  408088:	e001      	b.n	40808e <__mdiff+0x26>
  40808a:	429a      	cmp	r2, r3
  40808c:	d25e      	bcs.n	40814c <__mdiff+0xe4>
  40808e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  408092:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  408096:	42a6      	cmp	r6, r4
  408098:	d0f7      	beq.n	40808a <__mdiff+0x22>
  40809a:	d260      	bcs.n	40815e <__mdiff+0xf6>
  40809c:	463b      	mov	r3, r7
  40809e:	4614      	mov	r4, r2
  4080a0:	4647      	mov	r7, r8
  4080a2:	f04f 0901 	mov.w	r9, #1
  4080a6:	4698      	mov	r8, r3
  4080a8:	e006      	b.n	4080b8 <__mdiff+0x50>
  4080aa:	db5d      	blt.n	408168 <__mdiff+0x100>
  4080ac:	f107 0514 	add.w	r5, r7, #20
  4080b0:	f102 0414 	add.w	r4, r2, #20
  4080b4:	f04f 0900 	mov.w	r9, #0
  4080b8:	6879      	ldr	r1, [r7, #4]
  4080ba:	f7ff fdad 	bl	407c18 <_Balloc>
  4080be:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4080c2:	693e      	ldr	r6, [r7, #16]
  4080c4:	f8c0 900c 	str.w	r9, [r0, #12]
  4080c8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4080cc:	46a6      	mov	lr, r4
  4080ce:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4080d2:	f100 0414 	add.w	r4, r0, #20
  4080d6:	2300      	movs	r3, #0
  4080d8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4080dc:	f855 8b04 	ldr.w	r8, [r5], #4
  4080e0:	b28a      	uxth	r2, r1
  4080e2:	fa13 f388 	uxtah	r3, r3, r8
  4080e6:	0c09      	lsrs	r1, r1, #16
  4080e8:	1a9a      	subs	r2, r3, r2
  4080ea:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4080ee:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4080f2:	b292      	uxth	r2, r2
  4080f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4080f8:	45f4      	cmp	ip, lr
  4080fa:	f844 2b04 	str.w	r2, [r4], #4
  4080fe:	ea4f 4323 	mov.w	r3, r3, asr #16
  408102:	d8e9      	bhi.n	4080d8 <__mdiff+0x70>
  408104:	42af      	cmp	r7, r5
  408106:	d917      	bls.n	408138 <__mdiff+0xd0>
  408108:	46a4      	mov	ip, r4
  40810a:	4629      	mov	r1, r5
  40810c:	f851 eb04 	ldr.w	lr, [r1], #4
  408110:	fa13 f28e 	uxtah	r2, r3, lr
  408114:	1413      	asrs	r3, r2, #16
  408116:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  40811a:	b292      	uxth	r2, r2
  40811c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408120:	428f      	cmp	r7, r1
  408122:	f84c 2b04 	str.w	r2, [ip], #4
  408126:	ea4f 4323 	mov.w	r3, r3, asr #16
  40812a:	d8ef      	bhi.n	40810c <__mdiff+0xa4>
  40812c:	43ed      	mvns	r5, r5
  40812e:	443d      	add	r5, r7
  408130:	f025 0503 	bic.w	r5, r5, #3
  408134:	3504      	adds	r5, #4
  408136:	442c      	add	r4, r5
  408138:	3c04      	subs	r4, #4
  40813a:	b922      	cbnz	r2, 408146 <__mdiff+0xde>
  40813c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408140:	3e01      	subs	r6, #1
  408142:	2b00      	cmp	r3, #0
  408144:	d0fa      	beq.n	40813c <__mdiff+0xd4>
  408146:	6106      	str	r6, [r0, #16]
  408148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40814c:	2100      	movs	r1, #0
  40814e:	f7ff fd63 	bl	407c18 <_Balloc>
  408152:	2201      	movs	r2, #1
  408154:	2300      	movs	r3, #0
  408156:	6102      	str	r2, [r0, #16]
  408158:	6143      	str	r3, [r0, #20]
  40815a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40815e:	462c      	mov	r4, r5
  408160:	f04f 0900 	mov.w	r9, #0
  408164:	4615      	mov	r5, r2
  408166:	e7a7      	b.n	4080b8 <__mdiff+0x50>
  408168:	463b      	mov	r3, r7
  40816a:	f107 0414 	add.w	r4, r7, #20
  40816e:	f108 0514 	add.w	r5, r8, #20
  408172:	4647      	mov	r7, r8
  408174:	f04f 0901 	mov.w	r9, #1
  408178:	4698      	mov	r8, r3
  40817a:	e79d      	b.n	4080b8 <__mdiff+0x50>

0040817c <__d2b>:
  40817c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408180:	b082      	sub	sp, #8
  408182:	2101      	movs	r1, #1
  408184:	461c      	mov	r4, r3
  408186:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40818a:	4615      	mov	r5, r2
  40818c:	9e08      	ldr	r6, [sp, #32]
  40818e:	f7ff fd43 	bl	407c18 <_Balloc>
  408192:	f3c4 0413 	ubfx	r4, r4, #0, #20
  408196:	4680      	mov	r8, r0
  408198:	b10f      	cbz	r7, 40819e <__d2b+0x22>
  40819a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40819e:	9401      	str	r4, [sp, #4]
  4081a0:	b31d      	cbz	r5, 4081ea <__d2b+0x6e>
  4081a2:	a802      	add	r0, sp, #8
  4081a4:	f840 5d08 	str.w	r5, [r0, #-8]!
  4081a8:	f7ff fdc6 	bl	407d38 <__lo0bits>
  4081ac:	2800      	cmp	r0, #0
  4081ae:	d134      	bne.n	40821a <__d2b+0x9e>
  4081b0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4081b4:	f8c8 2014 	str.w	r2, [r8, #20]
  4081b8:	2b00      	cmp	r3, #0
  4081ba:	bf0c      	ite	eq
  4081bc:	2101      	moveq	r1, #1
  4081be:	2102      	movne	r1, #2
  4081c0:	f8c8 3018 	str.w	r3, [r8, #24]
  4081c4:	f8c8 1010 	str.w	r1, [r8, #16]
  4081c8:	b9df      	cbnz	r7, 408202 <__d2b+0x86>
  4081ca:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4081ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4081d2:	6030      	str	r0, [r6, #0]
  4081d4:	6918      	ldr	r0, [r3, #16]
  4081d6:	f7ff fd8f 	bl	407cf8 <__hi0bits>
  4081da:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4081dc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4081e0:	6018      	str	r0, [r3, #0]
  4081e2:	4640      	mov	r0, r8
  4081e4:	b002      	add	sp, #8
  4081e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4081ea:	a801      	add	r0, sp, #4
  4081ec:	f7ff fda4 	bl	407d38 <__lo0bits>
  4081f0:	9b01      	ldr	r3, [sp, #4]
  4081f2:	f8c8 3014 	str.w	r3, [r8, #20]
  4081f6:	2101      	movs	r1, #1
  4081f8:	3020      	adds	r0, #32
  4081fa:	f8c8 1010 	str.w	r1, [r8, #16]
  4081fe:	2f00      	cmp	r7, #0
  408200:	d0e3      	beq.n	4081ca <__d2b+0x4e>
  408202:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408204:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408208:	4407      	add	r7, r0
  40820a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40820e:	6037      	str	r7, [r6, #0]
  408210:	6018      	str	r0, [r3, #0]
  408212:	4640      	mov	r0, r8
  408214:	b002      	add	sp, #8
  408216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40821a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40821e:	f1c0 0120 	rsb	r1, r0, #32
  408222:	fa03 f101 	lsl.w	r1, r3, r1
  408226:	430a      	orrs	r2, r1
  408228:	40c3      	lsrs	r3, r0
  40822a:	9301      	str	r3, [sp, #4]
  40822c:	f8c8 2014 	str.w	r2, [r8, #20]
  408230:	e7c2      	b.n	4081b8 <__d2b+0x3c>
  408232:	bf00      	nop

00408234 <_realloc_r>:
  408234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408238:	4617      	mov	r7, r2
  40823a:	b083      	sub	sp, #12
  40823c:	2900      	cmp	r1, #0
  40823e:	f000 80c1 	beq.w	4083c4 <_realloc_r+0x190>
  408242:	460e      	mov	r6, r1
  408244:	4681      	mov	r9, r0
  408246:	f107 050b 	add.w	r5, r7, #11
  40824a:	f7fb fa53 	bl	4036f4 <__malloc_lock>
  40824e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  408252:	2d16      	cmp	r5, #22
  408254:	f02e 0403 	bic.w	r4, lr, #3
  408258:	f1a6 0808 	sub.w	r8, r6, #8
  40825c:	d840      	bhi.n	4082e0 <_realloc_r+0xac>
  40825e:	2210      	movs	r2, #16
  408260:	4615      	mov	r5, r2
  408262:	42af      	cmp	r7, r5
  408264:	d841      	bhi.n	4082ea <_realloc_r+0xb6>
  408266:	4294      	cmp	r4, r2
  408268:	da75      	bge.n	408356 <_realloc_r+0x122>
  40826a:	4bc9      	ldr	r3, [pc, #804]	; (408590 <_realloc_r+0x35c>)
  40826c:	6899      	ldr	r1, [r3, #8]
  40826e:	eb08 0004 	add.w	r0, r8, r4
  408272:	4288      	cmp	r0, r1
  408274:	6841      	ldr	r1, [r0, #4]
  408276:	f000 80d9 	beq.w	40842c <_realloc_r+0x1f8>
  40827a:	f021 0301 	bic.w	r3, r1, #1
  40827e:	4403      	add	r3, r0
  408280:	685b      	ldr	r3, [r3, #4]
  408282:	07db      	lsls	r3, r3, #31
  408284:	d57d      	bpl.n	408382 <_realloc_r+0x14e>
  408286:	f01e 0f01 	tst.w	lr, #1
  40828a:	d035      	beq.n	4082f8 <_realloc_r+0xc4>
  40828c:	4639      	mov	r1, r7
  40828e:	4648      	mov	r0, r9
  408290:	f7fa fe90 	bl	402fb4 <_malloc_r>
  408294:	4607      	mov	r7, r0
  408296:	b1e0      	cbz	r0, 4082d2 <_realloc_r+0x9e>
  408298:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40829c:	f023 0301 	bic.w	r3, r3, #1
  4082a0:	4443      	add	r3, r8
  4082a2:	f1a0 0208 	sub.w	r2, r0, #8
  4082a6:	429a      	cmp	r2, r3
  4082a8:	f000 8144 	beq.w	408534 <_realloc_r+0x300>
  4082ac:	1f22      	subs	r2, r4, #4
  4082ae:	2a24      	cmp	r2, #36	; 0x24
  4082b0:	f200 8131 	bhi.w	408516 <_realloc_r+0x2e2>
  4082b4:	2a13      	cmp	r2, #19
  4082b6:	f200 8104 	bhi.w	4084c2 <_realloc_r+0x28e>
  4082ba:	4603      	mov	r3, r0
  4082bc:	4632      	mov	r2, r6
  4082be:	6811      	ldr	r1, [r2, #0]
  4082c0:	6019      	str	r1, [r3, #0]
  4082c2:	6851      	ldr	r1, [r2, #4]
  4082c4:	6059      	str	r1, [r3, #4]
  4082c6:	6892      	ldr	r2, [r2, #8]
  4082c8:	609a      	str	r2, [r3, #8]
  4082ca:	4631      	mov	r1, r6
  4082cc:	4648      	mov	r0, r9
  4082ce:	f7ff f8d9 	bl	407484 <_free_r>
  4082d2:	4648      	mov	r0, r9
  4082d4:	f7fb fa10 	bl	4036f8 <__malloc_unlock>
  4082d8:	4638      	mov	r0, r7
  4082da:	b003      	add	sp, #12
  4082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082e0:	f025 0507 	bic.w	r5, r5, #7
  4082e4:	2d00      	cmp	r5, #0
  4082e6:	462a      	mov	r2, r5
  4082e8:	dabb      	bge.n	408262 <_realloc_r+0x2e>
  4082ea:	230c      	movs	r3, #12
  4082ec:	2000      	movs	r0, #0
  4082ee:	f8c9 3000 	str.w	r3, [r9]
  4082f2:	b003      	add	sp, #12
  4082f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082f8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4082fc:	ebc3 0a08 	rsb	sl, r3, r8
  408300:	f8da 3004 	ldr.w	r3, [sl, #4]
  408304:	f023 0c03 	bic.w	ip, r3, #3
  408308:	eb04 030c 	add.w	r3, r4, ip
  40830c:	4293      	cmp	r3, r2
  40830e:	dbbd      	blt.n	40828c <_realloc_r+0x58>
  408310:	4657      	mov	r7, sl
  408312:	f8da 100c 	ldr.w	r1, [sl, #12]
  408316:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40831a:	1f22      	subs	r2, r4, #4
  40831c:	2a24      	cmp	r2, #36	; 0x24
  40831e:	60c1      	str	r1, [r0, #12]
  408320:	6088      	str	r0, [r1, #8]
  408322:	f200 8117 	bhi.w	408554 <_realloc_r+0x320>
  408326:	2a13      	cmp	r2, #19
  408328:	f240 8112 	bls.w	408550 <_realloc_r+0x31c>
  40832c:	6831      	ldr	r1, [r6, #0]
  40832e:	f8ca 1008 	str.w	r1, [sl, #8]
  408332:	6871      	ldr	r1, [r6, #4]
  408334:	f8ca 100c 	str.w	r1, [sl, #12]
  408338:	2a1b      	cmp	r2, #27
  40833a:	f200 812b 	bhi.w	408594 <_realloc_r+0x360>
  40833e:	3608      	adds	r6, #8
  408340:	f10a 0210 	add.w	r2, sl, #16
  408344:	6831      	ldr	r1, [r6, #0]
  408346:	6011      	str	r1, [r2, #0]
  408348:	6871      	ldr	r1, [r6, #4]
  40834a:	6051      	str	r1, [r2, #4]
  40834c:	68b1      	ldr	r1, [r6, #8]
  40834e:	6091      	str	r1, [r2, #8]
  408350:	463e      	mov	r6, r7
  408352:	461c      	mov	r4, r3
  408354:	46d0      	mov	r8, sl
  408356:	1b63      	subs	r3, r4, r5
  408358:	2b0f      	cmp	r3, #15
  40835a:	d81d      	bhi.n	408398 <_realloc_r+0x164>
  40835c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  408360:	f003 0301 	and.w	r3, r3, #1
  408364:	4323      	orrs	r3, r4
  408366:	4444      	add	r4, r8
  408368:	f8c8 3004 	str.w	r3, [r8, #4]
  40836c:	6863      	ldr	r3, [r4, #4]
  40836e:	f043 0301 	orr.w	r3, r3, #1
  408372:	6063      	str	r3, [r4, #4]
  408374:	4648      	mov	r0, r9
  408376:	f7fb f9bf 	bl	4036f8 <__malloc_unlock>
  40837a:	4630      	mov	r0, r6
  40837c:	b003      	add	sp, #12
  40837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408382:	f021 0103 	bic.w	r1, r1, #3
  408386:	4421      	add	r1, r4
  408388:	4291      	cmp	r1, r2
  40838a:	db21      	blt.n	4083d0 <_realloc_r+0x19c>
  40838c:	68c3      	ldr	r3, [r0, #12]
  40838e:	6882      	ldr	r2, [r0, #8]
  408390:	460c      	mov	r4, r1
  408392:	60d3      	str	r3, [r2, #12]
  408394:	609a      	str	r2, [r3, #8]
  408396:	e7de      	b.n	408356 <_realloc_r+0x122>
  408398:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40839c:	eb08 0105 	add.w	r1, r8, r5
  4083a0:	f002 0201 	and.w	r2, r2, #1
  4083a4:	4315      	orrs	r5, r2
  4083a6:	f043 0201 	orr.w	r2, r3, #1
  4083aa:	440b      	add	r3, r1
  4083ac:	f8c8 5004 	str.w	r5, [r8, #4]
  4083b0:	604a      	str	r2, [r1, #4]
  4083b2:	685a      	ldr	r2, [r3, #4]
  4083b4:	f042 0201 	orr.w	r2, r2, #1
  4083b8:	3108      	adds	r1, #8
  4083ba:	605a      	str	r2, [r3, #4]
  4083bc:	4648      	mov	r0, r9
  4083be:	f7ff f861 	bl	407484 <_free_r>
  4083c2:	e7d7      	b.n	408374 <_realloc_r+0x140>
  4083c4:	4611      	mov	r1, r2
  4083c6:	b003      	add	sp, #12
  4083c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4083cc:	f7fa bdf2 	b.w	402fb4 <_malloc_r>
  4083d0:	f01e 0f01 	tst.w	lr, #1
  4083d4:	f47f af5a 	bne.w	40828c <_realloc_r+0x58>
  4083d8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4083dc:	ebc3 0a08 	rsb	sl, r3, r8
  4083e0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4083e4:	f023 0c03 	bic.w	ip, r3, #3
  4083e8:	eb01 0e0c 	add.w	lr, r1, ip
  4083ec:	4596      	cmp	lr, r2
  4083ee:	db8b      	blt.n	408308 <_realloc_r+0xd4>
  4083f0:	68c3      	ldr	r3, [r0, #12]
  4083f2:	6882      	ldr	r2, [r0, #8]
  4083f4:	4657      	mov	r7, sl
  4083f6:	60d3      	str	r3, [r2, #12]
  4083f8:	609a      	str	r2, [r3, #8]
  4083fa:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4083fe:	f8da 300c 	ldr.w	r3, [sl, #12]
  408402:	60cb      	str	r3, [r1, #12]
  408404:	1f22      	subs	r2, r4, #4
  408406:	2a24      	cmp	r2, #36	; 0x24
  408408:	6099      	str	r1, [r3, #8]
  40840a:	f200 8099 	bhi.w	408540 <_realloc_r+0x30c>
  40840e:	2a13      	cmp	r2, #19
  408410:	d962      	bls.n	4084d8 <_realloc_r+0x2a4>
  408412:	6833      	ldr	r3, [r6, #0]
  408414:	f8ca 3008 	str.w	r3, [sl, #8]
  408418:	6873      	ldr	r3, [r6, #4]
  40841a:	f8ca 300c 	str.w	r3, [sl, #12]
  40841e:	2a1b      	cmp	r2, #27
  408420:	f200 80a0 	bhi.w	408564 <_realloc_r+0x330>
  408424:	3608      	adds	r6, #8
  408426:	f10a 0310 	add.w	r3, sl, #16
  40842a:	e056      	b.n	4084da <_realloc_r+0x2a6>
  40842c:	f021 0b03 	bic.w	fp, r1, #3
  408430:	44a3      	add	fp, r4
  408432:	f105 0010 	add.w	r0, r5, #16
  408436:	4583      	cmp	fp, r0
  408438:	da59      	bge.n	4084ee <_realloc_r+0x2ba>
  40843a:	f01e 0f01 	tst.w	lr, #1
  40843e:	f47f af25 	bne.w	40828c <_realloc_r+0x58>
  408442:	f856 1c08 	ldr.w	r1, [r6, #-8]
  408446:	ebc1 0a08 	rsb	sl, r1, r8
  40844a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40844e:	f021 0c03 	bic.w	ip, r1, #3
  408452:	44e3      	add	fp, ip
  408454:	4558      	cmp	r0, fp
  408456:	f73f af57 	bgt.w	408308 <_realloc_r+0xd4>
  40845a:	4657      	mov	r7, sl
  40845c:	f8da 100c 	ldr.w	r1, [sl, #12]
  408460:	f857 0f08 	ldr.w	r0, [r7, #8]!
  408464:	1f22      	subs	r2, r4, #4
  408466:	2a24      	cmp	r2, #36	; 0x24
  408468:	60c1      	str	r1, [r0, #12]
  40846a:	6088      	str	r0, [r1, #8]
  40846c:	f200 80b4 	bhi.w	4085d8 <_realloc_r+0x3a4>
  408470:	2a13      	cmp	r2, #19
  408472:	f240 80a5 	bls.w	4085c0 <_realloc_r+0x38c>
  408476:	6831      	ldr	r1, [r6, #0]
  408478:	f8ca 1008 	str.w	r1, [sl, #8]
  40847c:	6871      	ldr	r1, [r6, #4]
  40847e:	f8ca 100c 	str.w	r1, [sl, #12]
  408482:	2a1b      	cmp	r2, #27
  408484:	f200 80af 	bhi.w	4085e6 <_realloc_r+0x3b2>
  408488:	3608      	adds	r6, #8
  40848a:	f10a 0210 	add.w	r2, sl, #16
  40848e:	6831      	ldr	r1, [r6, #0]
  408490:	6011      	str	r1, [r2, #0]
  408492:	6871      	ldr	r1, [r6, #4]
  408494:	6051      	str	r1, [r2, #4]
  408496:	68b1      	ldr	r1, [r6, #8]
  408498:	6091      	str	r1, [r2, #8]
  40849a:	eb0a 0105 	add.w	r1, sl, r5
  40849e:	ebc5 020b 	rsb	r2, r5, fp
  4084a2:	f042 0201 	orr.w	r2, r2, #1
  4084a6:	6099      	str	r1, [r3, #8]
  4084a8:	604a      	str	r2, [r1, #4]
  4084aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4084ae:	f003 0301 	and.w	r3, r3, #1
  4084b2:	431d      	orrs	r5, r3
  4084b4:	4648      	mov	r0, r9
  4084b6:	f8ca 5004 	str.w	r5, [sl, #4]
  4084ba:	f7fb f91d 	bl	4036f8 <__malloc_unlock>
  4084be:	4638      	mov	r0, r7
  4084c0:	e75c      	b.n	40837c <_realloc_r+0x148>
  4084c2:	6833      	ldr	r3, [r6, #0]
  4084c4:	6003      	str	r3, [r0, #0]
  4084c6:	6873      	ldr	r3, [r6, #4]
  4084c8:	6043      	str	r3, [r0, #4]
  4084ca:	2a1b      	cmp	r2, #27
  4084cc:	d827      	bhi.n	40851e <_realloc_r+0x2ea>
  4084ce:	f100 0308 	add.w	r3, r0, #8
  4084d2:	f106 0208 	add.w	r2, r6, #8
  4084d6:	e6f2      	b.n	4082be <_realloc_r+0x8a>
  4084d8:	463b      	mov	r3, r7
  4084da:	6832      	ldr	r2, [r6, #0]
  4084dc:	601a      	str	r2, [r3, #0]
  4084de:	6872      	ldr	r2, [r6, #4]
  4084e0:	605a      	str	r2, [r3, #4]
  4084e2:	68b2      	ldr	r2, [r6, #8]
  4084e4:	609a      	str	r2, [r3, #8]
  4084e6:	463e      	mov	r6, r7
  4084e8:	4674      	mov	r4, lr
  4084ea:	46d0      	mov	r8, sl
  4084ec:	e733      	b.n	408356 <_realloc_r+0x122>
  4084ee:	eb08 0105 	add.w	r1, r8, r5
  4084f2:	ebc5 0b0b 	rsb	fp, r5, fp
  4084f6:	f04b 0201 	orr.w	r2, fp, #1
  4084fa:	6099      	str	r1, [r3, #8]
  4084fc:	604a      	str	r2, [r1, #4]
  4084fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
  408502:	f003 0301 	and.w	r3, r3, #1
  408506:	431d      	orrs	r5, r3
  408508:	4648      	mov	r0, r9
  40850a:	f846 5c04 	str.w	r5, [r6, #-4]
  40850e:	f7fb f8f3 	bl	4036f8 <__malloc_unlock>
  408512:	4630      	mov	r0, r6
  408514:	e732      	b.n	40837c <_realloc_r+0x148>
  408516:	4631      	mov	r1, r6
  408518:	f7ff fb1a 	bl	407b50 <memmove>
  40851c:	e6d5      	b.n	4082ca <_realloc_r+0x96>
  40851e:	68b3      	ldr	r3, [r6, #8]
  408520:	6083      	str	r3, [r0, #8]
  408522:	68f3      	ldr	r3, [r6, #12]
  408524:	60c3      	str	r3, [r0, #12]
  408526:	2a24      	cmp	r2, #36	; 0x24
  408528:	d028      	beq.n	40857c <_realloc_r+0x348>
  40852a:	f100 0310 	add.w	r3, r0, #16
  40852e:	f106 0210 	add.w	r2, r6, #16
  408532:	e6c4      	b.n	4082be <_realloc_r+0x8a>
  408534:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408538:	f023 0303 	bic.w	r3, r3, #3
  40853c:	441c      	add	r4, r3
  40853e:	e70a      	b.n	408356 <_realloc_r+0x122>
  408540:	4631      	mov	r1, r6
  408542:	4638      	mov	r0, r7
  408544:	4674      	mov	r4, lr
  408546:	46d0      	mov	r8, sl
  408548:	f7ff fb02 	bl	407b50 <memmove>
  40854c:	463e      	mov	r6, r7
  40854e:	e702      	b.n	408356 <_realloc_r+0x122>
  408550:	463a      	mov	r2, r7
  408552:	e6f7      	b.n	408344 <_realloc_r+0x110>
  408554:	4631      	mov	r1, r6
  408556:	4638      	mov	r0, r7
  408558:	461c      	mov	r4, r3
  40855a:	46d0      	mov	r8, sl
  40855c:	f7ff faf8 	bl	407b50 <memmove>
  408560:	463e      	mov	r6, r7
  408562:	e6f8      	b.n	408356 <_realloc_r+0x122>
  408564:	68b3      	ldr	r3, [r6, #8]
  408566:	f8ca 3010 	str.w	r3, [sl, #16]
  40856a:	68f3      	ldr	r3, [r6, #12]
  40856c:	f8ca 3014 	str.w	r3, [sl, #20]
  408570:	2a24      	cmp	r2, #36	; 0x24
  408572:	d01b      	beq.n	4085ac <_realloc_r+0x378>
  408574:	3610      	adds	r6, #16
  408576:	f10a 0318 	add.w	r3, sl, #24
  40857a:	e7ae      	b.n	4084da <_realloc_r+0x2a6>
  40857c:	6933      	ldr	r3, [r6, #16]
  40857e:	6103      	str	r3, [r0, #16]
  408580:	6973      	ldr	r3, [r6, #20]
  408582:	6143      	str	r3, [r0, #20]
  408584:	f106 0218 	add.w	r2, r6, #24
  408588:	f100 0318 	add.w	r3, r0, #24
  40858c:	e697      	b.n	4082be <_realloc_r+0x8a>
  40858e:	bf00      	nop
  408590:	2040043c 	.word	0x2040043c
  408594:	68b1      	ldr	r1, [r6, #8]
  408596:	f8ca 1010 	str.w	r1, [sl, #16]
  40859a:	68f1      	ldr	r1, [r6, #12]
  40859c:	f8ca 1014 	str.w	r1, [sl, #20]
  4085a0:	2a24      	cmp	r2, #36	; 0x24
  4085a2:	d00f      	beq.n	4085c4 <_realloc_r+0x390>
  4085a4:	3610      	adds	r6, #16
  4085a6:	f10a 0218 	add.w	r2, sl, #24
  4085aa:	e6cb      	b.n	408344 <_realloc_r+0x110>
  4085ac:	6933      	ldr	r3, [r6, #16]
  4085ae:	f8ca 3018 	str.w	r3, [sl, #24]
  4085b2:	6973      	ldr	r3, [r6, #20]
  4085b4:	f8ca 301c 	str.w	r3, [sl, #28]
  4085b8:	3618      	adds	r6, #24
  4085ba:	f10a 0320 	add.w	r3, sl, #32
  4085be:	e78c      	b.n	4084da <_realloc_r+0x2a6>
  4085c0:	463a      	mov	r2, r7
  4085c2:	e764      	b.n	40848e <_realloc_r+0x25a>
  4085c4:	6932      	ldr	r2, [r6, #16]
  4085c6:	f8ca 2018 	str.w	r2, [sl, #24]
  4085ca:	6972      	ldr	r2, [r6, #20]
  4085cc:	f8ca 201c 	str.w	r2, [sl, #28]
  4085d0:	3618      	adds	r6, #24
  4085d2:	f10a 0220 	add.w	r2, sl, #32
  4085d6:	e6b5      	b.n	408344 <_realloc_r+0x110>
  4085d8:	4631      	mov	r1, r6
  4085da:	4638      	mov	r0, r7
  4085dc:	9301      	str	r3, [sp, #4]
  4085de:	f7ff fab7 	bl	407b50 <memmove>
  4085e2:	9b01      	ldr	r3, [sp, #4]
  4085e4:	e759      	b.n	40849a <_realloc_r+0x266>
  4085e6:	68b1      	ldr	r1, [r6, #8]
  4085e8:	f8ca 1010 	str.w	r1, [sl, #16]
  4085ec:	68f1      	ldr	r1, [r6, #12]
  4085ee:	f8ca 1014 	str.w	r1, [sl, #20]
  4085f2:	2a24      	cmp	r2, #36	; 0x24
  4085f4:	d003      	beq.n	4085fe <_realloc_r+0x3ca>
  4085f6:	3610      	adds	r6, #16
  4085f8:	f10a 0218 	add.w	r2, sl, #24
  4085fc:	e747      	b.n	40848e <_realloc_r+0x25a>
  4085fe:	6932      	ldr	r2, [r6, #16]
  408600:	f8ca 2018 	str.w	r2, [sl, #24]
  408604:	6972      	ldr	r2, [r6, #20]
  408606:	f8ca 201c 	str.w	r2, [sl, #28]
  40860a:	3618      	adds	r6, #24
  40860c:	f10a 0220 	add.w	r2, sl, #32
  408610:	e73d      	b.n	40848e <_realloc_r+0x25a>
  408612:	bf00      	nop

00408614 <__sread>:
  408614:	b510      	push	{r4, lr}
  408616:	460c      	mov	r4, r1
  408618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40861c:	f000 fa74 	bl	408b08 <_read_r>
  408620:	2800      	cmp	r0, #0
  408622:	db03      	blt.n	40862c <__sread+0x18>
  408624:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408626:	4403      	add	r3, r0
  408628:	6523      	str	r3, [r4, #80]	; 0x50
  40862a:	bd10      	pop	{r4, pc}
  40862c:	89a3      	ldrh	r3, [r4, #12]
  40862e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408632:	81a3      	strh	r3, [r4, #12]
  408634:	bd10      	pop	{r4, pc}
  408636:	bf00      	nop

00408638 <__swrite>:
  408638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40863c:	4616      	mov	r6, r2
  40863e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408642:	461f      	mov	r7, r3
  408644:	05d3      	lsls	r3, r2, #23
  408646:	460c      	mov	r4, r1
  408648:	4605      	mov	r5, r0
  40864a:	d507      	bpl.n	40865c <__swrite+0x24>
  40864c:	2200      	movs	r2, #0
  40864e:	2302      	movs	r3, #2
  408650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408654:	f000 fa42 	bl	408adc <_lseek_r>
  408658:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40865c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408660:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408664:	81a2      	strh	r2, [r4, #12]
  408666:	463b      	mov	r3, r7
  408668:	4632      	mov	r2, r6
  40866a:	4628      	mov	r0, r5
  40866c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408670:	f000 b922 	b.w	4088b8 <_write_r>

00408674 <__sseek>:
  408674:	b510      	push	{r4, lr}
  408676:	460c      	mov	r4, r1
  408678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40867c:	f000 fa2e 	bl	408adc <_lseek_r>
  408680:	89a3      	ldrh	r3, [r4, #12]
  408682:	1c42      	adds	r2, r0, #1
  408684:	bf0e      	itee	eq
  408686:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40868a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40868e:	6520      	strne	r0, [r4, #80]	; 0x50
  408690:	81a3      	strh	r3, [r4, #12]
  408692:	bd10      	pop	{r4, pc}

00408694 <__sclose>:
  408694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408698:	f000 b9a6 	b.w	4089e8 <_close_r>

0040869c <__ssprint_r>:
  40869c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4086a0:	6893      	ldr	r3, [r2, #8]
  4086a2:	b083      	sub	sp, #12
  4086a4:	4690      	mov	r8, r2
  4086a6:	2b00      	cmp	r3, #0
  4086a8:	d072      	beq.n	408790 <__ssprint_r+0xf4>
  4086aa:	4683      	mov	fp, r0
  4086ac:	f04f 0900 	mov.w	r9, #0
  4086b0:	6816      	ldr	r6, [r2, #0]
  4086b2:	6808      	ldr	r0, [r1, #0]
  4086b4:	688b      	ldr	r3, [r1, #8]
  4086b6:	460d      	mov	r5, r1
  4086b8:	464c      	mov	r4, r9
  4086ba:	2c00      	cmp	r4, #0
  4086bc:	d045      	beq.n	40874a <__ssprint_r+0xae>
  4086be:	429c      	cmp	r4, r3
  4086c0:	461f      	mov	r7, r3
  4086c2:	469a      	mov	sl, r3
  4086c4:	d346      	bcc.n	408754 <__ssprint_r+0xb8>
  4086c6:	89ab      	ldrh	r3, [r5, #12]
  4086c8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4086cc:	d02d      	beq.n	40872a <__ssprint_r+0x8e>
  4086ce:	696f      	ldr	r7, [r5, #20]
  4086d0:	6929      	ldr	r1, [r5, #16]
  4086d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4086d6:	ebc1 0a00 	rsb	sl, r1, r0
  4086da:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  4086de:	1c60      	adds	r0, r4, #1
  4086e0:	107f      	asrs	r7, r7, #1
  4086e2:	4450      	add	r0, sl
  4086e4:	42b8      	cmp	r0, r7
  4086e6:	463a      	mov	r2, r7
  4086e8:	bf84      	itt	hi
  4086ea:	4607      	movhi	r7, r0
  4086ec:	463a      	movhi	r2, r7
  4086ee:	055b      	lsls	r3, r3, #21
  4086f0:	d533      	bpl.n	40875a <__ssprint_r+0xbe>
  4086f2:	4611      	mov	r1, r2
  4086f4:	4658      	mov	r0, fp
  4086f6:	f7fa fc5d 	bl	402fb4 <_malloc_r>
  4086fa:	2800      	cmp	r0, #0
  4086fc:	d037      	beq.n	40876e <__ssprint_r+0xd2>
  4086fe:	4652      	mov	r2, sl
  408700:	6929      	ldr	r1, [r5, #16]
  408702:	9001      	str	r0, [sp, #4]
  408704:	f7fa ff0e 	bl	403524 <memcpy>
  408708:	89aa      	ldrh	r2, [r5, #12]
  40870a:	9b01      	ldr	r3, [sp, #4]
  40870c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408710:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408714:	81aa      	strh	r2, [r5, #12]
  408716:	ebca 0207 	rsb	r2, sl, r7
  40871a:	eb03 000a 	add.w	r0, r3, sl
  40871e:	616f      	str	r7, [r5, #20]
  408720:	612b      	str	r3, [r5, #16]
  408722:	6028      	str	r0, [r5, #0]
  408724:	60aa      	str	r2, [r5, #8]
  408726:	4627      	mov	r7, r4
  408728:	46a2      	mov	sl, r4
  40872a:	4652      	mov	r2, sl
  40872c:	4649      	mov	r1, r9
  40872e:	f7ff fa0f 	bl	407b50 <memmove>
  408732:	f8d8 2008 	ldr.w	r2, [r8, #8]
  408736:	68ab      	ldr	r3, [r5, #8]
  408738:	6828      	ldr	r0, [r5, #0]
  40873a:	1bdb      	subs	r3, r3, r7
  40873c:	4450      	add	r0, sl
  40873e:	1b14      	subs	r4, r2, r4
  408740:	60ab      	str	r3, [r5, #8]
  408742:	6028      	str	r0, [r5, #0]
  408744:	f8c8 4008 	str.w	r4, [r8, #8]
  408748:	b314      	cbz	r4, 408790 <__ssprint_r+0xf4>
  40874a:	f8d6 9000 	ldr.w	r9, [r6]
  40874e:	6874      	ldr	r4, [r6, #4]
  408750:	3608      	adds	r6, #8
  408752:	e7b2      	b.n	4086ba <__ssprint_r+0x1e>
  408754:	4627      	mov	r7, r4
  408756:	46a2      	mov	sl, r4
  408758:	e7e7      	b.n	40872a <__ssprint_r+0x8e>
  40875a:	4658      	mov	r0, fp
  40875c:	f7ff fd6a 	bl	408234 <_realloc_r>
  408760:	4603      	mov	r3, r0
  408762:	2800      	cmp	r0, #0
  408764:	d1d7      	bne.n	408716 <__ssprint_r+0x7a>
  408766:	6929      	ldr	r1, [r5, #16]
  408768:	4658      	mov	r0, fp
  40876a:	f7fe fe8b 	bl	407484 <_free_r>
  40876e:	230c      	movs	r3, #12
  408770:	f8cb 3000 	str.w	r3, [fp]
  408774:	89ab      	ldrh	r3, [r5, #12]
  408776:	2200      	movs	r2, #0
  408778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40877c:	f04f 30ff 	mov.w	r0, #4294967295
  408780:	81ab      	strh	r3, [r5, #12]
  408782:	f8c8 2008 	str.w	r2, [r8, #8]
  408786:	f8c8 2004 	str.w	r2, [r8, #4]
  40878a:	b003      	add	sp, #12
  40878c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408790:	2000      	movs	r0, #0
  408792:	f8c8 0004 	str.w	r0, [r8, #4]
  408796:	b003      	add	sp, #12
  408798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040879c <__swbuf_r>:
  40879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40879e:	460e      	mov	r6, r1
  4087a0:	4614      	mov	r4, r2
  4087a2:	4607      	mov	r7, r0
  4087a4:	b110      	cbz	r0, 4087ac <__swbuf_r+0x10>
  4087a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4087a8:	2b00      	cmp	r3, #0
  4087aa:	d04a      	beq.n	408842 <__swbuf_r+0xa6>
  4087ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4087b0:	69a3      	ldr	r3, [r4, #24]
  4087b2:	60a3      	str	r3, [r4, #8]
  4087b4:	b291      	uxth	r1, r2
  4087b6:	0708      	lsls	r0, r1, #28
  4087b8:	d538      	bpl.n	40882c <__swbuf_r+0x90>
  4087ba:	6923      	ldr	r3, [r4, #16]
  4087bc:	2b00      	cmp	r3, #0
  4087be:	d035      	beq.n	40882c <__swbuf_r+0x90>
  4087c0:	0489      	lsls	r1, r1, #18
  4087c2:	b2f5      	uxtb	r5, r6
  4087c4:	d515      	bpl.n	4087f2 <__swbuf_r+0x56>
  4087c6:	6822      	ldr	r2, [r4, #0]
  4087c8:	6961      	ldr	r1, [r4, #20]
  4087ca:	1ad3      	subs	r3, r2, r3
  4087cc:	428b      	cmp	r3, r1
  4087ce:	da1c      	bge.n	40880a <__swbuf_r+0x6e>
  4087d0:	3301      	adds	r3, #1
  4087d2:	68a1      	ldr	r1, [r4, #8]
  4087d4:	1c50      	adds	r0, r2, #1
  4087d6:	3901      	subs	r1, #1
  4087d8:	60a1      	str	r1, [r4, #8]
  4087da:	6020      	str	r0, [r4, #0]
  4087dc:	7016      	strb	r6, [r2, #0]
  4087de:	6962      	ldr	r2, [r4, #20]
  4087e0:	429a      	cmp	r2, r3
  4087e2:	d01a      	beq.n	40881a <__swbuf_r+0x7e>
  4087e4:	89a3      	ldrh	r3, [r4, #12]
  4087e6:	07db      	lsls	r3, r3, #31
  4087e8:	d501      	bpl.n	4087ee <__swbuf_r+0x52>
  4087ea:	2d0a      	cmp	r5, #10
  4087ec:	d015      	beq.n	40881a <__swbuf_r+0x7e>
  4087ee:	4628      	mov	r0, r5
  4087f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4087f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4087f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4087f8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4087fc:	81a2      	strh	r2, [r4, #12]
  4087fe:	6822      	ldr	r2, [r4, #0]
  408800:	6661      	str	r1, [r4, #100]	; 0x64
  408802:	6961      	ldr	r1, [r4, #20]
  408804:	1ad3      	subs	r3, r2, r3
  408806:	428b      	cmp	r3, r1
  408808:	dbe2      	blt.n	4087d0 <__swbuf_r+0x34>
  40880a:	4621      	mov	r1, r4
  40880c:	4638      	mov	r0, r7
  40880e:	f7fe fcdb 	bl	4071c8 <_fflush_r>
  408812:	b940      	cbnz	r0, 408826 <__swbuf_r+0x8a>
  408814:	6822      	ldr	r2, [r4, #0]
  408816:	2301      	movs	r3, #1
  408818:	e7db      	b.n	4087d2 <__swbuf_r+0x36>
  40881a:	4621      	mov	r1, r4
  40881c:	4638      	mov	r0, r7
  40881e:	f7fe fcd3 	bl	4071c8 <_fflush_r>
  408822:	2800      	cmp	r0, #0
  408824:	d0e3      	beq.n	4087ee <__swbuf_r+0x52>
  408826:	f04f 30ff 	mov.w	r0, #4294967295
  40882a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40882c:	4621      	mov	r1, r4
  40882e:	4638      	mov	r0, r7
  408830:	f7fd fbf2 	bl	406018 <__swsetup_r>
  408834:	2800      	cmp	r0, #0
  408836:	d1f6      	bne.n	408826 <__swbuf_r+0x8a>
  408838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40883c:	6923      	ldr	r3, [r4, #16]
  40883e:	b291      	uxth	r1, r2
  408840:	e7be      	b.n	4087c0 <__swbuf_r+0x24>
  408842:	f7fe fd55 	bl	4072f0 <__sinit>
  408846:	e7b1      	b.n	4087ac <__swbuf_r+0x10>

00408848 <_wcrtomb_r>:
  408848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40884c:	4605      	mov	r5, r0
  40884e:	b086      	sub	sp, #24
  408850:	461e      	mov	r6, r3
  408852:	460c      	mov	r4, r1
  408854:	b1a1      	cbz	r1, 408880 <_wcrtomb_r+0x38>
  408856:	4b10      	ldr	r3, [pc, #64]	; (408898 <_wcrtomb_r+0x50>)
  408858:	4617      	mov	r7, r2
  40885a:	f8d3 8000 	ldr.w	r8, [r3]
  40885e:	f7ff f8a5 	bl	4079ac <__locale_charset>
  408862:	9600      	str	r6, [sp, #0]
  408864:	4603      	mov	r3, r0
  408866:	463a      	mov	r2, r7
  408868:	4621      	mov	r1, r4
  40886a:	4628      	mov	r0, r5
  40886c:	47c0      	blx	r8
  40886e:	1c43      	adds	r3, r0, #1
  408870:	d103      	bne.n	40887a <_wcrtomb_r+0x32>
  408872:	2200      	movs	r2, #0
  408874:	238a      	movs	r3, #138	; 0x8a
  408876:	6032      	str	r2, [r6, #0]
  408878:	602b      	str	r3, [r5, #0]
  40887a:	b006      	add	sp, #24
  40887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408880:	4b05      	ldr	r3, [pc, #20]	; (408898 <_wcrtomb_r+0x50>)
  408882:	681f      	ldr	r7, [r3, #0]
  408884:	f7ff f892 	bl	4079ac <__locale_charset>
  408888:	9600      	str	r6, [sp, #0]
  40888a:	4603      	mov	r3, r0
  40888c:	4622      	mov	r2, r4
  40888e:	a903      	add	r1, sp, #12
  408890:	4628      	mov	r0, r5
  408892:	47b8      	blx	r7
  408894:	e7eb      	b.n	40886e <_wcrtomb_r+0x26>
  408896:	bf00      	nop
  408898:	204008a8 	.word	0x204008a8

0040889c <__ascii_wctomb>:
  40889c:	b121      	cbz	r1, 4088a8 <__ascii_wctomb+0xc>
  40889e:	2aff      	cmp	r2, #255	; 0xff
  4088a0:	d804      	bhi.n	4088ac <__ascii_wctomb+0x10>
  4088a2:	700a      	strb	r2, [r1, #0]
  4088a4:	2001      	movs	r0, #1
  4088a6:	4770      	bx	lr
  4088a8:	4608      	mov	r0, r1
  4088aa:	4770      	bx	lr
  4088ac:	238a      	movs	r3, #138	; 0x8a
  4088ae:	6003      	str	r3, [r0, #0]
  4088b0:	f04f 30ff 	mov.w	r0, #4294967295
  4088b4:	4770      	bx	lr
  4088b6:	bf00      	nop

004088b8 <_write_r>:
  4088b8:	b570      	push	{r4, r5, r6, lr}
  4088ba:	460d      	mov	r5, r1
  4088bc:	4c08      	ldr	r4, [pc, #32]	; (4088e0 <_write_r+0x28>)
  4088be:	4611      	mov	r1, r2
  4088c0:	4606      	mov	r6, r0
  4088c2:	461a      	mov	r2, r3
  4088c4:	4628      	mov	r0, r5
  4088c6:	2300      	movs	r3, #0
  4088c8:	6023      	str	r3, [r4, #0]
  4088ca:	f7f7 fcbd 	bl	400248 <_write>
  4088ce:	1c43      	adds	r3, r0, #1
  4088d0:	d000      	beq.n	4088d4 <_write_r+0x1c>
  4088d2:	bd70      	pop	{r4, r5, r6, pc}
  4088d4:	6823      	ldr	r3, [r4, #0]
  4088d6:	2b00      	cmp	r3, #0
  4088d8:	d0fb      	beq.n	4088d2 <_write_r+0x1a>
  4088da:	6033      	str	r3, [r6, #0]
  4088dc:	bd70      	pop	{r4, r5, r6, pc}
  4088de:	bf00      	nop
  4088e0:	20400c00 	.word	0x20400c00

004088e4 <__register_exitproc>:
  4088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4088e8:	4c25      	ldr	r4, [pc, #148]	; (408980 <__register_exitproc+0x9c>)
  4088ea:	6825      	ldr	r5, [r4, #0]
  4088ec:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4088f0:	4606      	mov	r6, r0
  4088f2:	4688      	mov	r8, r1
  4088f4:	4692      	mov	sl, r2
  4088f6:	4699      	mov	r9, r3
  4088f8:	b3c4      	cbz	r4, 40896c <__register_exitproc+0x88>
  4088fa:	6860      	ldr	r0, [r4, #4]
  4088fc:	281f      	cmp	r0, #31
  4088fe:	dc17      	bgt.n	408930 <__register_exitproc+0x4c>
  408900:	1c43      	adds	r3, r0, #1
  408902:	b176      	cbz	r6, 408922 <__register_exitproc+0x3e>
  408904:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  408908:	2201      	movs	r2, #1
  40890a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40890e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  408912:	4082      	lsls	r2, r0
  408914:	4311      	orrs	r1, r2
  408916:	2e02      	cmp	r6, #2
  408918:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40891c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  408920:	d01e      	beq.n	408960 <__register_exitproc+0x7c>
  408922:	3002      	adds	r0, #2
  408924:	6063      	str	r3, [r4, #4]
  408926:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40892a:	2000      	movs	r0, #0
  40892c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408930:	4b14      	ldr	r3, [pc, #80]	; (408984 <__register_exitproc+0xa0>)
  408932:	b303      	cbz	r3, 408976 <__register_exitproc+0x92>
  408934:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408938:	f7fa fb2c 	bl	402f94 <malloc>
  40893c:	4604      	mov	r4, r0
  40893e:	b1d0      	cbz	r0, 408976 <__register_exitproc+0x92>
  408940:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  408944:	2700      	movs	r7, #0
  408946:	e880 0088 	stmia.w	r0, {r3, r7}
  40894a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40894e:	4638      	mov	r0, r7
  408950:	2301      	movs	r3, #1
  408952:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  408956:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40895a:	2e00      	cmp	r6, #0
  40895c:	d0e1      	beq.n	408922 <__register_exitproc+0x3e>
  40895e:	e7d1      	b.n	408904 <__register_exitproc+0x20>
  408960:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  408964:	430a      	orrs	r2, r1
  408966:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40896a:	e7da      	b.n	408922 <__register_exitproc+0x3e>
  40896c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  408970:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  408974:	e7c1      	b.n	4088fa <__register_exitproc+0x16>
  408976:	f04f 30ff 	mov.w	r0, #4294967295
  40897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40897e:	bf00      	nop
  408980:	004098b0 	.word	0x004098b0
  408984:	00402f95 	.word	0x00402f95

00408988 <_calloc_r>:
  408988:	b510      	push	{r4, lr}
  40898a:	fb02 f101 	mul.w	r1, r2, r1
  40898e:	f7fa fb11 	bl	402fb4 <_malloc_r>
  408992:	4604      	mov	r4, r0
  408994:	b1d8      	cbz	r0, 4089ce <_calloc_r+0x46>
  408996:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40899a:	f022 0203 	bic.w	r2, r2, #3
  40899e:	3a04      	subs	r2, #4
  4089a0:	2a24      	cmp	r2, #36	; 0x24
  4089a2:	d818      	bhi.n	4089d6 <_calloc_r+0x4e>
  4089a4:	2a13      	cmp	r2, #19
  4089a6:	d914      	bls.n	4089d2 <_calloc_r+0x4a>
  4089a8:	2300      	movs	r3, #0
  4089aa:	2a1b      	cmp	r2, #27
  4089ac:	6003      	str	r3, [r0, #0]
  4089ae:	6043      	str	r3, [r0, #4]
  4089b0:	d916      	bls.n	4089e0 <_calloc_r+0x58>
  4089b2:	2a24      	cmp	r2, #36	; 0x24
  4089b4:	6083      	str	r3, [r0, #8]
  4089b6:	60c3      	str	r3, [r0, #12]
  4089b8:	bf11      	iteee	ne
  4089ba:	f100 0210 	addne.w	r2, r0, #16
  4089be:	6103      	streq	r3, [r0, #16]
  4089c0:	6143      	streq	r3, [r0, #20]
  4089c2:	f100 0218 	addeq.w	r2, r0, #24
  4089c6:	2300      	movs	r3, #0
  4089c8:	6013      	str	r3, [r2, #0]
  4089ca:	6053      	str	r3, [r2, #4]
  4089cc:	6093      	str	r3, [r2, #8]
  4089ce:	4620      	mov	r0, r4
  4089d0:	bd10      	pop	{r4, pc}
  4089d2:	4602      	mov	r2, r0
  4089d4:	e7f7      	b.n	4089c6 <_calloc_r+0x3e>
  4089d6:	2100      	movs	r1, #0
  4089d8:	f7fa fe3e 	bl	403658 <memset>
  4089dc:	4620      	mov	r0, r4
  4089de:	bd10      	pop	{r4, pc}
  4089e0:	f100 0208 	add.w	r2, r0, #8
  4089e4:	e7ef      	b.n	4089c6 <_calloc_r+0x3e>
  4089e6:	bf00      	nop

004089e8 <_close_r>:
  4089e8:	b538      	push	{r3, r4, r5, lr}
  4089ea:	4c07      	ldr	r4, [pc, #28]	; (408a08 <_close_r+0x20>)
  4089ec:	2300      	movs	r3, #0
  4089ee:	4605      	mov	r5, r0
  4089f0:	4608      	mov	r0, r1
  4089f2:	6023      	str	r3, [r4, #0]
  4089f4:	f7f8 f870 	bl	400ad8 <_close>
  4089f8:	1c43      	adds	r3, r0, #1
  4089fa:	d000      	beq.n	4089fe <_close_r+0x16>
  4089fc:	bd38      	pop	{r3, r4, r5, pc}
  4089fe:	6823      	ldr	r3, [r4, #0]
  408a00:	2b00      	cmp	r3, #0
  408a02:	d0fb      	beq.n	4089fc <_close_r+0x14>
  408a04:	602b      	str	r3, [r5, #0]
  408a06:	bd38      	pop	{r3, r4, r5, pc}
  408a08:	20400c00 	.word	0x20400c00

00408a0c <_fclose_r>:
  408a0c:	2900      	cmp	r1, #0
  408a0e:	d03d      	beq.n	408a8c <_fclose_r+0x80>
  408a10:	b570      	push	{r4, r5, r6, lr}
  408a12:	4605      	mov	r5, r0
  408a14:	460c      	mov	r4, r1
  408a16:	b108      	cbz	r0, 408a1c <_fclose_r+0x10>
  408a18:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408a1a:	b37b      	cbz	r3, 408a7c <_fclose_r+0x70>
  408a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408a20:	b90b      	cbnz	r3, 408a26 <_fclose_r+0x1a>
  408a22:	2000      	movs	r0, #0
  408a24:	bd70      	pop	{r4, r5, r6, pc}
  408a26:	4621      	mov	r1, r4
  408a28:	4628      	mov	r0, r5
  408a2a:	f7fe fb29 	bl	407080 <__sflush_r>
  408a2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408a30:	4606      	mov	r6, r0
  408a32:	b133      	cbz	r3, 408a42 <_fclose_r+0x36>
  408a34:	69e1      	ldr	r1, [r4, #28]
  408a36:	4628      	mov	r0, r5
  408a38:	4798      	blx	r3
  408a3a:	2800      	cmp	r0, #0
  408a3c:	bfb8      	it	lt
  408a3e:	f04f 36ff 	movlt.w	r6, #4294967295
  408a42:	89a3      	ldrh	r3, [r4, #12]
  408a44:	061b      	lsls	r3, r3, #24
  408a46:	d41c      	bmi.n	408a82 <_fclose_r+0x76>
  408a48:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408a4a:	b141      	cbz	r1, 408a5e <_fclose_r+0x52>
  408a4c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408a50:	4299      	cmp	r1, r3
  408a52:	d002      	beq.n	408a5a <_fclose_r+0x4e>
  408a54:	4628      	mov	r0, r5
  408a56:	f7fe fd15 	bl	407484 <_free_r>
  408a5a:	2300      	movs	r3, #0
  408a5c:	6323      	str	r3, [r4, #48]	; 0x30
  408a5e:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408a60:	b121      	cbz	r1, 408a6c <_fclose_r+0x60>
  408a62:	4628      	mov	r0, r5
  408a64:	f7fe fd0e 	bl	407484 <_free_r>
  408a68:	2300      	movs	r3, #0
  408a6a:	6463      	str	r3, [r4, #68]	; 0x44
  408a6c:	f7fe fc46 	bl	4072fc <__sfp_lock_acquire>
  408a70:	2300      	movs	r3, #0
  408a72:	81a3      	strh	r3, [r4, #12]
  408a74:	f7fe fc44 	bl	407300 <__sfp_lock_release>
  408a78:	4630      	mov	r0, r6
  408a7a:	bd70      	pop	{r4, r5, r6, pc}
  408a7c:	f7fe fc38 	bl	4072f0 <__sinit>
  408a80:	e7cc      	b.n	408a1c <_fclose_r+0x10>
  408a82:	6921      	ldr	r1, [r4, #16]
  408a84:	4628      	mov	r0, r5
  408a86:	f7fe fcfd 	bl	407484 <_free_r>
  408a8a:	e7dd      	b.n	408a48 <_fclose_r+0x3c>
  408a8c:	2000      	movs	r0, #0
  408a8e:	4770      	bx	lr

00408a90 <_fstat_r>:
  408a90:	b538      	push	{r3, r4, r5, lr}
  408a92:	460b      	mov	r3, r1
  408a94:	4c07      	ldr	r4, [pc, #28]	; (408ab4 <_fstat_r+0x24>)
  408a96:	4605      	mov	r5, r0
  408a98:	4611      	mov	r1, r2
  408a9a:	4618      	mov	r0, r3
  408a9c:	2300      	movs	r3, #0
  408a9e:	6023      	str	r3, [r4, #0]
  408aa0:	f7f8 f81e 	bl	400ae0 <_fstat>
  408aa4:	1c43      	adds	r3, r0, #1
  408aa6:	d000      	beq.n	408aaa <_fstat_r+0x1a>
  408aa8:	bd38      	pop	{r3, r4, r5, pc}
  408aaa:	6823      	ldr	r3, [r4, #0]
  408aac:	2b00      	cmp	r3, #0
  408aae:	d0fb      	beq.n	408aa8 <_fstat_r+0x18>
  408ab0:	602b      	str	r3, [r5, #0]
  408ab2:	bd38      	pop	{r3, r4, r5, pc}
  408ab4:	20400c00 	.word	0x20400c00

00408ab8 <_isatty_r>:
  408ab8:	b538      	push	{r3, r4, r5, lr}
  408aba:	4c07      	ldr	r4, [pc, #28]	; (408ad8 <_isatty_r+0x20>)
  408abc:	2300      	movs	r3, #0
  408abe:	4605      	mov	r5, r0
  408ac0:	4608      	mov	r0, r1
  408ac2:	6023      	str	r3, [r4, #0]
  408ac4:	f7f8 f812 	bl	400aec <_isatty>
  408ac8:	1c43      	adds	r3, r0, #1
  408aca:	d000      	beq.n	408ace <_isatty_r+0x16>
  408acc:	bd38      	pop	{r3, r4, r5, pc}
  408ace:	6823      	ldr	r3, [r4, #0]
  408ad0:	2b00      	cmp	r3, #0
  408ad2:	d0fb      	beq.n	408acc <_isatty_r+0x14>
  408ad4:	602b      	str	r3, [r5, #0]
  408ad6:	bd38      	pop	{r3, r4, r5, pc}
  408ad8:	20400c00 	.word	0x20400c00

00408adc <_lseek_r>:
  408adc:	b570      	push	{r4, r5, r6, lr}
  408ade:	460d      	mov	r5, r1
  408ae0:	4c08      	ldr	r4, [pc, #32]	; (408b04 <_lseek_r+0x28>)
  408ae2:	4611      	mov	r1, r2
  408ae4:	4606      	mov	r6, r0
  408ae6:	461a      	mov	r2, r3
  408ae8:	4628      	mov	r0, r5
  408aea:	2300      	movs	r3, #0
  408aec:	6023      	str	r3, [r4, #0]
  408aee:	f7f7 ffff 	bl	400af0 <_lseek>
  408af2:	1c43      	adds	r3, r0, #1
  408af4:	d000      	beq.n	408af8 <_lseek_r+0x1c>
  408af6:	bd70      	pop	{r4, r5, r6, pc}
  408af8:	6823      	ldr	r3, [r4, #0]
  408afa:	2b00      	cmp	r3, #0
  408afc:	d0fb      	beq.n	408af6 <_lseek_r+0x1a>
  408afe:	6033      	str	r3, [r6, #0]
  408b00:	bd70      	pop	{r4, r5, r6, pc}
  408b02:	bf00      	nop
  408b04:	20400c00 	.word	0x20400c00

00408b08 <_read_r>:
  408b08:	b570      	push	{r4, r5, r6, lr}
  408b0a:	460d      	mov	r5, r1
  408b0c:	4c08      	ldr	r4, [pc, #32]	; (408b30 <_read_r+0x28>)
  408b0e:	4611      	mov	r1, r2
  408b10:	4606      	mov	r6, r0
  408b12:	461a      	mov	r2, r3
  408b14:	4628      	mov	r0, r5
  408b16:	2300      	movs	r3, #0
  408b18:	6023      	str	r3, [r4, #0]
  408b1a:	f7f7 fb77 	bl	40020c <_read>
  408b1e:	1c43      	adds	r3, r0, #1
  408b20:	d000      	beq.n	408b24 <_read_r+0x1c>
  408b22:	bd70      	pop	{r4, r5, r6, pc}
  408b24:	6823      	ldr	r3, [r4, #0]
  408b26:	2b00      	cmp	r3, #0
  408b28:	d0fb      	beq.n	408b22 <_read_r+0x1a>
  408b2a:	6033      	str	r3, [r6, #0]
  408b2c:	bd70      	pop	{r4, r5, r6, pc}
  408b2e:	bf00      	nop
  408b30:	20400c00 	.word	0x20400c00

00408b34 <__aeabi_drsub>:
  408b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  408b38:	e002      	b.n	408b40 <__adddf3>
  408b3a:	bf00      	nop

00408b3c <__aeabi_dsub>:
  408b3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00408b40 <__adddf3>:
  408b40:	b530      	push	{r4, r5, lr}
  408b42:	ea4f 0441 	mov.w	r4, r1, lsl #1
  408b46:	ea4f 0543 	mov.w	r5, r3, lsl #1
  408b4a:	ea94 0f05 	teq	r4, r5
  408b4e:	bf08      	it	eq
  408b50:	ea90 0f02 	teqeq	r0, r2
  408b54:	bf1f      	itttt	ne
  408b56:	ea54 0c00 	orrsne.w	ip, r4, r0
  408b5a:	ea55 0c02 	orrsne.w	ip, r5, r2
  408b5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  408b62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408b66:	f000 80e2 	beq.w	408d2e <__adddf3+0x1ee>
  408b6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  408b6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  408b72:	bfb8      	it	lt
  408b74:	426d      	neglt	r5, r5
  408b76:	dd0c      	ble.n	408b92 <__adddf3+0x52>
  408b78:	442c      	add	r4, r5
  408b7a:	ea80 0202 	eor.w	r2, r0, r2
  408b7e:	ea81 0303 	eor.w	r3, r1, r3
  408b82:	ea82 0000 	eor.w	r0, r2, r0
  408b86:	ea83 0101 	eor.w	r1, r3, r1
  408b8a:	ea80 0202 	eor.w	r2, r0, r2
  408b8e:	ea81 0303 	eor.w	r3, r1, r3
  408b92:	2d36      	cmp	r5, #54	; 0x36
  408b94:	bf88      	it	hi
  408b96:	bd30      	pophi	{r4, r5, pc}
  408b98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  408b9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  408ba0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  408ba4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  408ba8:	d002      	beq.n	408bb0 <__adddf3+0x70>
  408baa:	4240      	negs	r0, r0
  408bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408bb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  408bb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  408bb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  408bbc:	d002      	beq.n	408bc4 <__adddf3+0x84>
  408bbe:	4252      	negs	r2, r2
  408bc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  408bc4:	ea94 0f05 	teq	r4, r5
  408bc8:	f000 80a7 	beq.w	408d1a <__adddf3+0x1da>
  408bcc:	f1a4 0401 	sub.w	r4, r4, #1
  408bd0:	f1d5 0e20 	rsbs	lr, r5, #32
  408bd4:	db0d      	blt.n	408bf2 <__adddf3+0xb2>
  408bd6:	fa02 fc0e 	lsl.w	ip, r2, lr
  408bda:	fa22 f205 	lsr.w	r2, r2, r5
  408bde:	1880      	adds	r0, r0, r2
  408be0:	f141 0100 	adc.w	r1, r1, #0
  408be4:	fa03 f20e 	lsl.w	r2, r3, lr
  408be8:	1880      	adds	r0, r0, r2
  408bea:	fa43 f305 	asr.w	r3, r3, r5
  408bee:	4159      	adcs	r1, r3
  408bf0:	e00e      	b.n	408c10 <__adddf3+0xd0>
  408bf2:	f1a5 0520 	sub.w	r5, r5, #32
  408bf6:	f10e 0e20 	add.w	lr, lr, #32
  408bfa:	2a01      	cmp	r2, #1
  408bfc:	fa03 fc0e 	lsl.w	ip, r3, lr
  408c00:	bf28      	it	cs
  408c02:	f04c 0c02 	orrcs.w	ip, ip, #2
  408c06:	fa43 f305 	asr.w	r3, r3, r5
  408c0a:	18c0      	adds	r0, r0, r3
  408c0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  408c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408c14:	d507      	bpl.n	408c26 <__adddf3+0xe6>
  408c16:	f04f 0e00 	mov.w	lr, #0
  408c1a:	f1dc 0c00 	rsbs	ip, ip, #0
  408c1e:	eb7e 0000 	sbcs.w	r0, lr, r0
  408c22:	eb6e 0101 	sbc.w	r1, lr, r1
  408c26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  408c2a:	d31b      	bcc.n	408c64 <__adddf3+0x124>
  408c2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  408c30:	d30c      	bcc.n	408c4c <__adddf3+0x10c>
  408c32:	0849      	lsrs	r1, r1, #1
  408c34:	ea5f 0030 	movs.w	r0, r0, rrx
  408c38:	ea4f 0c3c 	mov.w	ip, ip, rrx
  408c3c:	f104 0401 	add.w	r4, r4, #1
  408c40:	ea4f 5244 	mov.w	r2, r4, lsl #21
  408c44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  408c48:	f080 809a 	bcs.w	408d80 <__adddf3+0x240>
  408c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  408c50:	bf08      	it	eq
  408c52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  408c56:	f150 0000 	adcs.w	r0, r0, #0
  408c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408c5e:	ea41 0105 	orr.w	r1, r1, r5
  408c62:	bd30      	pop	{r4, r5, pc}
  408c64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  408c68:	4140      	adcs	r0, r0
  408c6a:	eb41 0101 	adc.w	r1, r1, r1
  408c6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  408c72:	f1a4 0401 	sub.w	r4, r4, #1
  408c76:	d1e9      	bne.n	408c4c <__adddf3+0x10c>
  408c78:	f091 0f00 	teq	r1, #0
  408c7c:	bf04      	itt	eq
  408c7e:	4601      	moveq	r1, r0
  408c80:	2000      	moveq	r0, #0
  408c82:	fab1 f381 	clz	r3, r1
  408c86:	bf08      	it	eq
  408c88:	3320      	addeq	r3, #32
  408c8a:	f1a3 030b 	sub.w	r3, r3, #11
  408c8e:	f1b3 0220 	subs.w	r2, r3, #32
  408c92:	da0c      	bge.n	408cae <__adddf3+0x16e>
  408c94:	320c      	adds	r2, #12
  408c96:	dd08      	ble.n	408caa <__adddf3+0x16a>
  408c98:	f102 0c14 	add.w	ip, r2, #20
  408c9c:	f1c2 020c 	rsb	r2, r2, #12
  408ca0:	fa01 f00c 	lsl.w	r0, r1, ip
  408ca4:	fa21 f102 	lsr.w	r1, r1, r2
  408ca8:	e00c      	b.n	408cc4 <__adddf3+0x184>
  408caa:	f102 0214 	add.w	r2, r2, #20
  408cae:	bfd8      	it	le
  408cb0:	f1c2 0c20 	rsble	ip, r2, #32
  408cb4:	fa01 f102 	lsl.w	r1, r1, r2
  408cb8:	fa20 fc0c 	lsr.w	ip, r0, ip
  408cbc:	bfdc      	itt	le
  408cbe:	ea41 010c 	orrle.w	r1, r1, ip
  408cc2:	4090      	lslle	r0, r2
  408cc4:	1ae4      	subs	r4, r4, r3
  408cc6:	bfa2      	ittt	ge
  408cc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  408ccc:	4329      	orrge	r1, r5
  408cce:	bd30      	popge	{r4, r5, pc}
  408cd0:	ea6f 0404 	mvn.w	r4, r4
  408cd4:	3c1f      	subs	r4, #31
  408cd6:	da1c      	bge.n	408d12 <__adddf3+0x1d2>
  408cd8:	340c      	adds	r4, #12
  408cda:	dc0e      	bgt.n	408cfa <__adddf3+0x1ba>
  408cdc:	f104 0414 	add.w	r4, r4, #20
  408ce0:	f1c4 0220 	rsb	r2, r4, #32
  408ce4:	fa20 f004 	lsr.w	r0, r0, r4
  408ce8:	fa01 f302 	lsl.w	r3, r1, r2
  408cec:	ea40 0003 	orr.w	r0, r0, r3
  408cf0:	fa21 f304 	lsr.w	r3, r1, r4
  408cf4:	ea45 0103 	orr.w	r1, r5, r3
  408cf8:	bd30      	pop	{r4, r5, pc}
  408cfa:	f1c4 040c 	rsb	r4, r4, #12
  408cfe:	f1c4 0220 	rsb	r2, r4, #32
  408d02:	fa20 f002 	lsr.w	r0, r0, r2
  408d06:	fa01 f304 	lsl.w	r3, r1, r4
  408d0a:	ea40 0003 	orr.w	r0, r0, r3
  408d0e:	4629      	mov	r1, r5
  408d10:	bd30      	pop	{r4, r5, pc}
  408d12:	fa21 f004 	lsr.w	r0, r1, r4
  408d16:	4629      	mov	r1, r5
  408d18:	bd30      	pop	{r4, r5, pc}
  408d1a:	f094 0f00 	teq	r4, #0
  408d1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  408d22:	bf06      	itte	eq
  408d24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  408d28:	3401      	addeq	r4, #1
  408d2a:	3d01      	subne	r5, #1
  408d2c:	e74e      	b.n	408bcc <__adddf3+0x8c>
  408d2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408d32:	bf18      	it	ne
  408d34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  408d38:	d029      	beq.n	408d8e <__adddf3+0x24e>
  408d3a:	ea94 0f05 	teq	r4, r5
  408d3e:	bf08      	it	eq
  408d40:	ea90 0f02 	teqeq	r0, r2
  408d44:	d005      	beq.n	408d52 <__adddf3+0x212>
  408d46:	ea54 0c00 	orrs.w	ip, r4, r0
  408d4a:	bf04      	itt	eq
  408d4c:	4619      	moveq	r1, r3
  408d4e:	4610      	moveq	r0, r2
  408d50:	bd30      	pop	{r4, r5, pc}
  408d52:	ea91 0f03 	teq	r1, r3
  408d56:	bf1e      	ittt	ne
  408d58:	2100      	movne	r1, #0
  408d5a:	2000      	movne	r0, #0
  408d5c:	bd30      	popne	{r4, r5, pc}
  408d5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  408d62:	d105      	bne.n	408d70 <__adddf3+0x230>
  408d64:	0040      	lsls	r0, r0, #1
  408d66:	4149      	adcs	r1, r1
  408d68:	bf28      	it	cs
  408d6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  408d6e:	bd30      	pop	{r4, r5, pc}
  408d70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  408d74:	bf3c      	itt	cc
  408d76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  408d7a:	bd30      	popcc	{r4, r5, pc}
  408d7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408d80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  408d84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  408d88:	f04f 0000 	mov.w	r0, #0
  408d8c:	bd30      	pop	{r4, r5, pc}
  408d8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  408d92:	bf1a      	itte	ne
  408d94:	4619      	movne	r1, r3
  408d96:	4610      	movne	r0, r2
  408d98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  408d9c:	bf1c      	itt	ne
  408d9e:	460b      	movne	r3, r1
  408da0:	4602      	movne	r2, r0
  408da2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  408da6:	bf06      	itte	eq
  408da8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  408dac:	ea91 0f03 	teqeq	r1, r3
  408db0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  408db4:	bd30      	pop	{r4, r5, pc}
  408db6:	bf00      	nop

00408db8 <__aeabi_ui2d>:
  408db8:	f090 0f00 	teq	r0, #0
  408dbc:	bf04      	itt	eq
  408dbe:	2100      	moveq	r1, #0
  408dc0:	4770      	bxeq	lr
  408dc2:	b530      	push	{r4, r5, lr}
  408dc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408dc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408dcc:	f04f 0500 	mov.w	r5, #0
  408dd0:	f04f 0100 	mov.w	r1, #0
  408dd4:	e750      	b.n	408c78 <__adddf3+0x138>
  408dd6:	bf00      	nop

00408dd8 <__aeabi_i2d>:
  408dd8:	f090 0f00 	teq	r0, #0
  408ddc:	bf04      	itt	eq
  408dde:	2100      	moveq	r1, #0
  408de0:	4770      	bxeq	lr
  408de2:	b530      	push	{r4, r5, lr}
  408de4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408de8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408dec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  408df0:	bf48      	it	mi
  408df2:	4240      	negmi	r0, r0
  408df4:	f04f 0100 	mov.w	r1, #0
  408df8:	e73e      	b.n	408c78 <__adddf3+0x138>
  408dfa:	bf00      	nop

00408dfc <__aeabi_f2d>:
  408dfc:	0042      	lsls	r2, r0, #1
  408dfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
  408e02:	ea4f 0131 	mov.w	r1, r1, rrx
  408e06:	ea4f 7002 	mov.w	r0, r2, lsl #28
  408e0a:	bf1f      	itttt	ne
  408e0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  408e10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408e14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  408e18:	4770      	bxne	lr
  408e1a:	f092 0f00 	teq	r2, #0
  408e1e:	bf14      	ite	ne
  408e20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  408e24:	4770      	bxeq	lr
  408e26:	b530      	push	{r4, r5, lr}
  408e28:	f44f 7460 	mov.w	r4, #896	; 0x380
  408e2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  408e30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408e34:	e720      	b.n	408c78 <__adddf3+0x138>
  408e36:	bf00      	nop

00408e38 <__aeabi_ul2d>:
  408e38:	ea50 0201 	orrs.w	r2, r0, r1
  408e3c:	bf08      	it	eq
  408e3e:	4770      	bxeq	lr
  408e40:	b530      	push	{r4, r5, lr}
  408e42:	f04f 0500 	mov.w	r5, #0
  408e46:	e00a      	b.n	408e5e <__aeabi_l2d+0x16>

00408e48 <__aeabi_l2d>:
  408e48:	ea50 0201 	orrs.w	r2, r0, r1
  408e4c:	bf08      	it	eq
  408e4e:	4770      	bxeq	lr
  408e50:	b530      	push	{r4, r5, lr}
  408e52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  408e56:	d502      	bpl.n	408e5e <__aeabi_l2d+0x16>
  408e58:	4240      	negs	r0, r0
  408e5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  408e5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  408e62:	f104 0432 	add.w	r4, r4, #50	; 0x32
  408e66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  408e6a:	f43f aedc 	beq.w	408c26 <__adddf3+0xe6>
  408e6e:	f04f 0203 	mov.w	r2, #3
  408e72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408e76:	bf18      	it	ne
  408e78:	3203      	addne	r2, #3
  408e7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  408e7e:	bf18      	it	ne
  408e80:	3203      	addne	r2, #3
  408e82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  408e86:	f1c2 0320 	rsb	r3, r2, #32
  408e8a:	fa00 fc03 	lsl.w	ip, r0, r3
  408e8e:	fa20 f002 	lsr.w	r0, r0, r2
  408e92:	fa01 fe03 	lsl.w	lr, r1, r3
  408e96:	ea40 000e 	orr.w	r0, r0, lr
  408e9a:	fa21 f102 	lsr.w	r1, r1, r2
  408e9e:	4414      	add	r4, r2
  408ea0:	e6c1      	b.n	408c26 <__adddf3+0xe6>
  408ea2:	bf00      	nop

00408ea4 <__aeabi_dmul>:
  408ea4:	b570      	push	{r4, r5, r6, lr}
  408ea6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  408eaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  408eae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  408eb2:	bf1d      	ittte	ne
  408eb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  408eb8:	ea94 0f0c 	teqne	r4, ip
  408ebc:	ea95 0f0c 	teqne	r5, ip
  408ec0:	f000 f8de 	bleq	409080 <__aeabi_dmul+0x1dc>
  408ec4:	442c      	add	r4, r5
  408ec6:	ea81 0603 	eor.w	r6, r1, r3
  408eca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  408ece:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  408ed2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  408ed6:	bf18      	it	ne
  408ed8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  408edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  408ee4:	d038      	beq.n	408f58 <__aeabi_dmul+0xb4>
  408ee6:	fba0 ce02 	umull	ip, lr, r0, r2
  408eea:	f04f 0500 	mov.w	r5, #0
  408eee:	fbe1 e502 	umlal	lr, r5, r1, r2
  408ef2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  408ef6:	fbe0 e503 	umlal	lr, r5, r0, r3
  408efa:	f04f 0600 	mov.w	r6, #0
  408efe:	fbe1 5603 	umlal	r5, r6, r1, r3
  408f02:	f09c 0f00 	teq	ip, #0
  408f06:	bf18      	it	ne
  408f08:	f04e 0e01 	orrne.w	lr, lr, #1
  408f0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  408f10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  408f14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  408f18:	d204      	bcs.n	408f24 <__aeabi_dmul+0x80>
  408f1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  408f1e:	416d      	adcs	r5, r5
  408f20:	eb46 0606 	adc.w	r6, r6, r6
  408f24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  408f28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  408f2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  408f30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  408f34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  408f38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  408f3c:	bf88      	it	hi
  408f3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  408f42:	d81e      	bhi.n	408f82 <__aeabi_dmul+0xde>
  408f44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  408f48:	bf08      	it	eq
  408f4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  408f4e:	f150 0000 	adcs.w	r0, r0, #0
  408f52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  408f56:	bd70      	pop	{r4, r5, r6, pc}
  408f58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  408f5c:	ea46 0101 	orr.w	r1, r6, r1
  408f60:	ea40 0002 	orr.w	r0, r0, r2
  408f64:	ea81 0103 	eor.w	r1, r1, r3
  408f68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  408f6c:	bfc2      	ittt	gt
  408f6e:	ebd4 050c 	rsbsgt	r5, r4, ip
  408f72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  408f76:	bd70      	popgt	{r4, r5, r6, pc}
  408f78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  408f7c:	f04f 0e00 	mov.w	lr, #0
  408f80:	3c01      	subs	r4, #1
  408f82:	f300 80ab 	bgt.w	4090dc <__aeabi_dmul+0x238>
  408f86:	f114 0f36 	cmn.w	r4, #54	; 0x36
  408f8a:	bfde      	ittt	le
  408f8c:	2000      	movle	r0, #0
  408f8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  408f92:	bd70      	pople	{r4, r5, r6, pc}
  408f94:	f1c4 0400 	rsb	r4, r4, #0
  408f98:	3c20      	subs	r4, #32
  408f9a:	da35      	bge.n	409008 <__aeabi_dmul+0x164>
  408f9c:	340c      	adds	r4, #12
  408f9e:	dc1b      	bgt.n	408fd8 <__aeabi_dmul+0x134>
  408fa0:	f104 0414 	add.w	r4, r4, #20
  408fa4:	f1c4 0520 	rsb	r5, r4, #32
  408fa8:	fa00 f305 	lsl.w	r3, r0, r5
  408fac:	fa20 f004 	lsr.w	r0, r0, r4
  408fb0:	fa01 f205 	lsl.w	r2, r1, r5
  408fb4:	ea40 0002 	orr.w	r0, r0, r2
  408fb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  408fbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  408fc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408fc4:	fa21 f604 	lsr.w	r6, r1, r4
  408fc8:	eb42 0106 	adc.w	r1, r2, r6
  408fcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  408fd0:	bf08      	it	eq
  408fd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  408fd6:	bd70      	pop	{r4, r5, r6, pc}
  408fd8:	f1c4 040c 	rsb	r4, r4, #12
  408fdc:	f1c4 0520 	rsb	r5, r4, #32
  408fe0:	fa00 f304 	lsl.w	r3, r0, r4
  408fe4:	fa20 f005 	lsr.w	r0, r0, r5
  408fe8:	fa01 f204 	lsl.w	r2, r1, r4
  408fec:	ea40 0002 	orr.w	r0, r0, r2
  408ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  408ff4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  408ff8:	f141 0100 	adc.w	r1, r1, #0
  408ffc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409000:	bf08      	it	eq
  409002:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409006:	bd70      	pop	{r4, r5, r6, pc}
  409008:	f1c4 0520 	rsb	r5, r4, #32
  40900c:	fa00 f205 	lsl.w	r2, r0, r5
  409010:	ea4e 0e02 	orr.w	lr, lr, r2
  409014:	fa20 f304 	lsr.w	r3, r0, r4
  409018:	fa01 f205 	lsl.w	r2, r1, r5
  40901c:	ea43 0302 	orr.w	r3, r3, r2
  409020:	fa21 f004 	lsr.w	r0, r1, r4
  409024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409028:	fa21 f204 	lsr.w	r2, r1, r4
  40902c:	ea20 0002 	bic.w	r0, r0, r2
  409030:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  409034:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409038:	bf08      	it	eq
  40903a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40903e:	bd70      	pop	{r4, r5, r6, pc}
  409040:	f094 0f00 	teq	r4, #0
  409044:	d10f      	bne.n	409066 <__aeabi_dmul+0x1c2>
  409046:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40904a:	0040      	lsls	r0, r0, #1
  40904c:	eb41 0101 	adc.w	r1, r1, r1
  409050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409054:	bf08      	it	eq
  409056:	3c01      	subeq	r4, #1
  409058:	d0f7      	beq.n	40904a <__aeabi_dmul+0x1a6>
  40905a:	ea41 0106 	orr.w	r1, r1, r6
  40905e:	f095 0f00 	teq	r5, #0
  409062:	bf18      	it	ne
  409064:	4770      	bxne	lr
  409066:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40906a:	0052      	lsls	r2, r2, #1
  40906c:	eb43 0303 	adc.w	r3, r3, r3
  409070:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409074:	bf08      	it	eq
  409076:	3d01      	subeq	r5, #1
  409078:	d0f7      	beq.n	40906a <__aeabi_dmul+0x1c6>
  40907a:	ea43 0306 	orr.w	r3, r3, r6
  40907e:	4770      	bx	lr
  409080:	ea94 0f0c 	teq	r4, ip
  409084:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409088:	bf18      	it	ne
  40908a:	ea95 0f0c 	teqne	r5, ip
  40908e:	d00c      	beq.n	4090aa <__aeabi_dmul+0x206>
  409090:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409094:	bf18      	it	ne
  409096:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40909a:	d1d1      	bne.n	409040 <__aeabi_dmul+0x19c>
  40909c:	ea81 0103 	eor.w	r1, r1, r3
  4090a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4090a4:	f04f 0000 	mov.w	r0, #0
  4090a8:	bd70      	pop	{r4, r5, r6, pc}
  4090aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4090ae:	bf06      	itte	eq
  4090b0:	4610      	moveq	r0, r2
  4090b2:	4619      	moveq	r1, r3
  4090b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4090b8:	d019      	beq.n	4090ee <__aeabi_dmul+0x24a>
  4090ba:	ea94 0f0c 	teq	r4, ip
  4090be:	d102      	bne.n	4090c6 <__aeabi_dmul+0x222>
  4090c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4090c4:	d113      	bne.n	4090ee <__aeabi_dmul+0x24a>
  4090c6:	ea95 0f0c 	teq	r5, ip
  4090ca:	d105      	bne.n	4090d8 <__aeabi_dmul+0x234>
  4090cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4090d0:	bf1c      	itt	ne
  4090d2:	4610      	movne	r0, r2
  4090d4:	4619      	movne	r1, r3
  4090d6:	d10a      	bne.n	4090ee <__aeabi_dmul+0x24a>
  4090d8:	ea81 0103 	eor.w	r1, r1, r3
  4090dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4090e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4090e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4090e8:	f04f 0000 	mov.w	r0, #0
  4090ec:	bd70      	pop	{r4, r5, r6, pc}
  4090ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4090f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4090f6:	bd70      	pop	{r4, r5, r6, pc}

004090f8 <__aeabi_ddiv>:
  4090f8:	b570      	push	{r4, r5, r6, lr}
  4090fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4090fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409102:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409106:	bf1d      	ittte	ne
  409108:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40910c:	ea94 0f0c 	teqne	r4, ip
  409110:	ea95 0f0c 	teqne	r5, ip
  409114:	f000 f8a7 	bleq	409266 <__aeabi_ddiv+0x16e>
  409118:	eba4 0405 	sub.w	r4, r4, r5
  40911c:	ea81 0e03 	eor.w	lr, r1, r3
  409120:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409124:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409128:	f000 8088 	beq.w	40923c <__aeabi_ddiv+0x144>
  40912c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409130:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  409134:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  409138:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40913c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  409140:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  409144:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  409148:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40914c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  409150:	429d      	cmp	r5, r3
  409152:	bf08      	it	eq
  409154:	4296      	cmpeq	r6, r2
  409156:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40915a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40915e:	d202      	bcs.n	409166 <__aeabi_ddiv+0x6e>
  409160:	085b      	lsrs	r3, r3, #1
  409162:	ea4f 0232 	mov.w	r2, r2, rrx
  409166:	1ab6      	subs	r6, r6, r2
  409168:	eb65 0503 	sbc.w	r5, r5, r3
  40916c:	085b      	lsrs	r3, r3, #1
  40916e:	ea4f 0232 	mov.w	r2, r2, rrx
  409172:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  409176:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40917a:	ebb6 0e02 	subs.w	lr, r6, r2
  40917e:	eb75 0e03 	sbcs.w	lr, r5, r3
  409182:	bf22      	ittt	cs
  409184:	1ab6      	subcs	r6, r6, r2
  409186:	4675      	movcs	r5, lr
  409188:	ea40 000c 	orrcs.w	r0, r0, ip
  40918c:	085b      	lsrs	r3, r3, #1
  40918e:	ea4f 0232 	mov.w	r2, r2, rrx
  409192:	ebb6 0e02 	subs.w	lr, r6, r2
  409196:	eb75 0e03 	sbcs.w	lr, r5, r3
  40919a:	bf22      	ittt	cs
  40919c:	1ab6      	subcs	r6, r6, r2
  40919e:	4675      	movcs	r5, lr
  4091a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4091a4:	085b      	lsrs	r3, r3, #1
  4091a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4091aa:	ebb6 0e02 	subs.w	lr, r6, r2
  4091ae:	eb75 0e03 	sbcs.w	lr, r5, r3
  4091b2:	bf22      	ittt	cs
  4091b4:	1ab6      	subcs	r6, r6, r2
  4091b6:	4675      	movcs	r5, lr
  4091b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4091bc:	085b      	lsrs	r3, r3, #1
  4091be:	ea4f 0232 	mov.w	r2, r2, rrx
  4091c2:	ebb6 0e02 	subs.w	lr, r6, r2
  4091c6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4091ca:	bf22      	ittt	cs
  4091cc:	1ab6      	subcs	r6, r6, r2
  4091ce:	4675      	movcs	r5, lr
  4091d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4091d4:	ea55 0e06 	orrs.w	lr, r5, r6
  4091d8:	d018      	beq.n	40920c <__aeabi_ddiv+0x114>
  4091da:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4091de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4091e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4091e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4091ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4091ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4091f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4091f6:	d1c0      	bne.n	40917a <__aeabi_ddiv+0x82>
  4091f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4091fc:	d10b      	bne.n	409216 <__aeabi_ddiv+0x11e>
  4091fe:	ea41 0100 	orr.w	r1, r1, r0
  409202:	f04f 0000 	mov.w	r0, #0
  409206:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40920a:	e7b6      	b.n	40917a <__aeabi_ddiv+0x82>
  40920c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409210:	bf04      	itt	eq
  409212:	4301      	orreq	r1, r0
  409214:	2000      	moveq	r0, #0
  409216:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40921a:	bf88      	it	hi
  40921c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409220:	f63f aeaf 	bhi.w	408f82 <__aeabi_dmul+0xde>
  409224:	ebb5 0c03 	subs.w	ip, r5, r3
  409228:	bf04      	itt	eq
  40922a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40922e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409232:	f150 0000 	adcs.w	r0, r0, #0
  409236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40923a:	bd70      	pop	{r4, r5, r6, pc}
  40923c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  409240:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  409244:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  409248:	bfc2      	ittt	gt
  40924a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40924e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409252:	bd70      	popgt	{r4, r5, r6, pc}
  409254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409258:	f04f 0e00 	mov.w	lr, #0
  40925c:	3c01      	subs	r4, #1
  40925e:	e690      	b.n	408f82 <__aeabi_dmul+0xde>
  409260:	ea45 0e06 	orr.w	lr, r5, r6
  409264:	e68d      	b.n	408f82 <__aeabi_dmul+0xde>
  409266:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40926a:	ea94 0f0c 	teq	r4, ip
  40926e:	bf08      	it	eq
  409270:	ea95 0f0c 	teqeq	r5, ip
  409274:	f43f af3b 	beq.w	4090ee <__aeabi_dmul+0x24a>
  409278:	ea94 0f0c 	teq	r4, ip
  40927c:	d10a      	bne.n	409294 <__aeabi_ddiv+0x19c>
  40927e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409282:	f47f af34 	bne.w	4090ee <__aeabi_dmul+0x24a>
  409286:	ea95 0f0c 	teq	r5, ip
  40928a:	f47f af25 	bne.w	4090d8 <__aeabi_dmul+0x234>
  40928e:	4610      	mov	r0, r2
  409290:	4619      	mov	r1, r3
  409292:	e72c      	b.n	4090ee <__aeabi_dmul+0x24a>
  409294:	ea95 0f0c 	teq	r5, ip
  409298:	d106      	bne.n	4092a8 <__aeabi_ddiv+0x1b0>
  40929a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40929e:	f43f aefd 	beq.w	40909c <__aeabi_dmul+0x1f8>
  4092a2:	4610      	mov	r0, r2
  4092a4:	4619      	mov	r1, r3
  4092a6:	e722      	b.n	4090ee <__aeabi_dmul+0x24a>
  4092a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4092ac:	bf18      	it	ne
  4092ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4092b2:	f47f aec5 	bne.w	409040 <__aeabi_dmul+0x19c>
  4092b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4092ba:	f47f af0d 	bne.w	4090d8 <__aeabi_dmul+0x234>
  4092be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4092c2:	f47f aeeb 	bne.w	40909c <__aeabi_dmul+0x1f8>
  4092c6:	e712      	b.n	4090ee <__aeabi_dmul+0x24a>

004092c8 <__gedf2>:
  4092c8:	f04f 3cff 	mov.w	ip, #4294967295
  4092cc:	e006      	b.n	4092dc <__cmpdf2+0x4>
  4092ce:	bf00      	nop

004092d0 <__ledf2>:
  4092d0:	f04f 0c01 	mov.w	ip, #1
  4092d4:	e002      	b.n	4092dc <__cmpdf2+0x4>
  4092d6:	bf00      	nop

004092d8 <__cmpdf2>:
  4092d8:	f04f 0c01 	mov.w	ip, #1
  4092dc:	f84d cd04 	str.w	ip, [sp, #-4]!
  4092e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4092e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4092e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4092ec:	bf18      	it	ne
  4092ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4092f2:	d01b      	beq.n	40932c <__cmpdf2+0x54>
  4092f4:	b001      	add	sp, #4
  4092f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4092fa:	bf0c      	ite	eq
  4092fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409300:	ea91 0f03 	teqne	r1, r3
  409304:	bf02      	ittt	eq
  409306:	ea90 0f02 	teqeq	r0, r2
  40930a:	2000      	moveq	r0, #0
  40930c:	4770      	bxeq	lr
  40930e:	f110 0f00 	cmn.w	r0, #0
  409312:	ea91 0f03 	teq	r1, r3
  409316:	bf58      	it	pl
  409318:	4299      	cmppl	r1, r3
  40931a:	bf08      	it	eq
  40931c:	4290      	cmpeq	r0, r2
  40931e:	bf2c      	ite	cs
  409320:	17d8      	asrcs	r0, r3, #31
  409322:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409326:	f040 0001 	orr.w	r0, r0, #1
  40932a:	4770      	bx	lr
  40932c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409334:	d102      	bne.n	40933c <__cmpdf2+0x64>
  409336:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40933a:	d107      	bne.n	40934c <__cmpdf2+0x74>
  40933c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409344:	d1d6      	bne.n	4092f4 <__cmpdf2+0x1c>
  409346:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40934a:	d0d3      	beq.n	4092f4 <__cmpdf2+0x1c>
  40934c:	f85d 0b04 	ldr.w	r0, [sp], #4
  409350:	4770      	bx	lr
  409352:	bf00      	nop

00409354 <__aeabi_cdrcmple>:
  409354:	4684      	mov	ip, r0
  409356:	4610      	mov	r0, r2
  409358:	4662      	mov	r2, ip
  40935a:	468c      	mov	ip, r1
  40935c:	4619      	mov	r1, r3
  40935e:	4663      	mov	r3, ip
  409360:	e000      	b.n	409364 <__aeabi_cdcmpeq>
  409362:	bf00      	nop

00409364 <__aeabi_cdcmpeq>:
  409364:	b501      	push	{r0, lr}
  409366:	f7ff ffb7 	bl	4092d8 <__cmpdf2>
  40936a:	2800      	cmp	r0, #0
  40936c:	bf48      	it	mi
  40936e:	f110 0f00 	cmnmi.w	r0, #0
  409372:	bd01      	pop	{r0, pc}

00409374 <__aeabi_dcmpeq>:
  409374:	f84d ed08 	str.w	lr, [sp, #-8]!
  409378:	f7ff fff4 	bl	409364 <__aeabi_cdcmpeq>
  40937c:	bf0c      	ite	eq
  40937e:	2001      	moveq	r0, #1
  409380:	2000      	movne	r0, #0
  409382:	f85d fb08 	ldr.w	pc, [sp], #8
  409386:	bf00      	nop

00409388 <__aeabi_dcmplt>:
  409388:	f84d ed08 	str.w	lr, [sp, #-8]!
  40938c:	f7ff ffea 	bl	409364 <__aeabi_cdcmpeq>
  409390:	bf34      	ite	cc
  409392:	2001      	movcc	r0, #1
  409394:	2000      	movcs	r0, #0
  409396:	f85d fb08 	ldr.w	pc, [sp], #8
  40939a:	bf00      	nop

0040939c <__aeabi_dcmple>:
  40939c:	f84d ed08 	str.w	lr, [sp, #-8]!
  4093a0:	f7ff ffe0 	bl	409364 <__aeabi_cdcmpeq>
  4093a4:	bf94      	ite	ls
  4093a6:	2001      	movls	r0, #1
  4093a8:	2000      	movhi	r0, #0
  4093aa:	f85d fb08 	ldr.w	pc, [sp], #8
  4093ae:	bf00      	nop

004093b0 <__aeabi_dcmpge>:
  4093b0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4093b4:	f7ff ffce 	bl	409354 <__aeabi_cdrcmple>
  4093b8:	bf94      	ite	ls
  4093ba:	2001      	movls	r0, #1
  4093bc:	2000      	movhi	r0, #0
  4093be:	f85d fb08 	ldr.w	pc, [sp], #8
  4093c2:	bf00      	nop

004093c4 <__aeabi_dcmpgt>:
  4093c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4093c8:	f7ff ffc4 	bl	409354 <__aeabi_cdrcmple>
  4093cc:	bf34      	ite	cc
  4093ce:	2001      	movcc	r0, #1
  4093d0:	2000      	movcs	r0, #0
  4093d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4093d6:	bf00      	nop

004093d8 <__aeabi_dcmpun>:
  4093d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4093dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4093e0:	d102      	bne.n	4093e8 <__aeabi_dcmpun+0x10>
  4093e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4093e6:	d10a      	bne.n	4093fe <__aeabi_dcmpun+0x26>
  4093e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4093ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4093f0:	d102      	bne.n	4093f8 <__aeabi_dcmpun+0x20>
  4093f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4093f6:	d102      	bne.n	4093fe <__aeabi_dcmpun+0x26>
  4093f8:	f04f 0000 	mov.w	r0, #0
  4093fc:	4770      	bx	lr
  4093fe:	f04f 0001 	mov.w	r0, #1
  409402:	4770      	bx	lr

00409404 <__aeabi_d2iz>:
  409404:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409408:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40940c:	d215      	bcs.n	40943a <__aeabi_d2iz+0x36>
  40940e:	d511      	bpl.n	409434 <__aeabi_d2iz+0x30>
  409410:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409414:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409418:	d912      	bls.n	409440 <__aeabi_d2iz+0x3c>
  40941a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40941e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409422:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  409426:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40942a:	fa23 f002 	lsr.w	r0, r3, r2
  40942e:	bf18      	it	ne
  409430:	4240      	negne	r0, r0
  409432:	4770      	bx	lr
  409434:	f04f 0000 	mov.w	r0, #0
  409438:	4770      	bx	lr
  40943a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40943e:	d105      	bne.n	40944c <__aeabi_d2iz+0x48>
  409440:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409444:	bf08      	it	eq
  409446:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40944a:	4770      	bx	lr
  40944c:	f04f 0000 	mov.w	r0, #0
  409450:	4770      	bx	lr
  409452:	bf00      	nop

00409454 <__aeabi_uldivmod>:
  409454:	b953      	cbnz	r3, 40946c <__aeabi_uldivmod+0x18>
  409456:	b94a      	cbnz	r2, 40946c <__aeabi_uldivmod+0x18>
  409458:	2900      	cmp	r1, #0
  40945a:	bf08      	it	eq
  40945c:	2800      	cmpeq	r0, #0
  40945e:	bf1c      	itt	ne
  409460:	f04f 31ff 	movne.w	r1, #4294967295
  409464:	f04f 30ff 	movne.w	r0, #4294967295
  409468:	f000 b97e 	b.w	409768 <__aeabi_idiv0>
  40946c:	f1ad 0c08 	sub.w	ip, sp, #8
  409470:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409474:	f000 f806 	bl	409484 <__udivmoddi4>
  409478:	f8dd e004 	ldr.w	lr, [sp, #4]
  40947c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409480:	b004      	add	sp, #16
  409482:	4770      	bx	lr

00409484 <__udivmoddi4>:
  409484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409488:	468c      	mov	ip, r1
  40948a:	460e      	mov	r6, r1
  40948c:	4604      	mov	r4, r0
  40948e:	9d08      	ldr	r5, [sp, #32]
  409490:	2b00      	cmp	r3, #0
  409492:	d150      	bne.n	409536 <__udivmoddi4+0xb2>
  409494:	428a      	cmp	r2, r1
  409496:	4617      	mov	r7, r2
  409498:	d96c      	bls.n	409574 <__udivmoddi4+0xf0>
  40949a:	fab2 fe82 	clz	lr, r2
  40949e:	f1be 0f00 	cmp.w	lr, #0
  4094a2:	d00b      	beq.n	4094bc <__udivmoddi4+0x38>
  4094a4:	f1ce 0420 	rsb	r4, lr, #32
  4094a8:	fa20 f404 	lsr.w	r4, r0, r4
  4094ac:	fa01 f60e 	lsl.w	r6, r1, lr
  4094b0:	ea44 0c06 	orr.w	ip, r4, r6
  4094b4:	fa02 f70e 	lsl.w	r7, r2, lr
  4094b8:	fa00 f40e 	lsl.w	r4, r0, lr
  4094bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4094c0:	0c22      	lsrs	r2, r4, #16
  4094c2:	fbbc f0f9 	udiv	r0, ip, r9
  4094c6:	fa1f f887 	uxth.w	r8, r7
  4094ca:	fb09 c610 	mls	r6, r9, r0, ip
  4094ce:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4094d2:	fb00 f308 	mul.w	r3, r0, r8
  4094d6:	42b3      	cmp	r3, r6
  4094d8:	d909      	bls.n	4094ee <__udivmoddi4+0x6a>
  4094da:	19f6      	adds	r6, r6, r7
  4094dc:	f100 32ff 	add.w	r2, r0, #4294967295
  4094e0:	f080 8122 	bcs.w	409728 <__udivmoddi4+0x2a4>
  4094e4:	42b3      	cmp	r3, r6
  4094e6:	f240 811f 	bls.w	409728 <__udivmoddi4+0x2a4>
  4094ea:	3802      	subs	r0, #2
  4094ec:	443e      	add	r6, r7
  4094ee:	1af6      	subs	r6, r6, r3
  4094f0:	b2a2      	uxth	r2, r4
  4094f2:	fbb6 f3f9 	udiv	r3, r6, r9
  4094f6:	fb09 6613 	mls	r6, r9, r3, r6
  4094fa:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4094fe:	fb03 f808 	mul.w	r8, r3, r8
  409502:	45a0      	cmp	r8, r4
  409504:	d909      	bls.n	40951a <__udivmoddi4+0x96>
  409506:	19e4      	adds	r4, r4, r7
  409508:	f103 32ff 	add.w	r2, r3, #4294967295
  40950c:	f080 810a 	bcs.w	409724 <__udivmoddi4+0x2a0>
  409510:	45a0      	cmp	r8, r4
  409512:	f240 8107 	bls.w	409724 <__udivmoddi4+0x2a0>
  409516:	3b02      	subs	r3, #2
  409518:	443c      	add	r4, r7
  40951a:	ebc8 0404 	rsb	r4, r8, r4
  40951e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  409522:	2100      	movs	r1, #0
  409524:	2d00      	cmp	r5, #0
  409526:	d062      	beq.n	4095ee <__udivmoddi4+0x16a>
  409528:	fa24 f40e 	lsr.w	r4, r4, lr
  40952c:	2300      	movs	r3, #0
  40952e:	602c      	str	r4, [r5, #0]
  409530:	606b      	str	r3, [r5, #4]
  409532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409536:	428b      	cmp	r3, r1
  409538:	d907      	bls.n	40954a <__udivmoddi4+0xc6>
  40953a:	2d00      	cmp	r5, #0
  40953c:	d055      	beq.n	4095ea <__udivmoddi4+0x166>
  40953e:	2100      	movs	r1, #0
  409540:	e885 0041 	stmia.w	r5, {r0, r6}
  409544:	4608      	mov	r0, r1
  409546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40954a:	fab3 f183 	clz	r1, r3
  40954e:	2900      	cmp	r1, #0
  409550:	f040 8090 	bne.w	409674 <__udivmoddi4+0x1f0>
  409554:	42b3      	cmp	r3, r6
  409556:	d302      	bcc.n	40955e <__udivmoddi4+0xda>
  409558:	4282      	cmp	r2, r0
  40955a:	f200 80f8 	bhi.w	40974e <__udivmoddi4+0x2ca>
  40955e:	1a84      	subs	r4, r0, r2
  409560:	eb66 0603 	sbc.w	r6, r6, r3
  409564:	2001      	movs	r0, #1
  409566:	46b4      	mov	ip, r6
  409568:	2d00      	cmp	r5, #0
  40956a:	d040      	beq.n	4095ee <__udivmoddi4+0x16a>
  40956c:	e885 1010 	stmia.w	r5, {r4, ip}
  409570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409574:	b912      	cbnz	r2, 40957c <__udivmoddi4+0xf8>
  409576:	2701      	movs	r7, #1
  409578:	fbb7 f7f2 	udiv	r7, r7, r2
  40957c:	fab7 fe87 	clz	lr, r7
  409580:	f1be 0f00 	cmp.w	lr, #0
  409584:	d135      	bne.n	4095f2 <__udivmoddi4+0x16e>
  409586:	1bf3      	subs	r3, r6, r7
  409588:	ea4f 4817 	mov.w	r8, r7, lsr #16
  40958c:	fa1f fc87 	uxth.w	ip, r7
  409590:	2101      	movs	r1, #1
  409592:	fbb3 f0f8 	udiv	r0, r3, r8
  409596:	0c22      	lsrs	r2, r4, #16
  409598:	fb08 3610 	mls	r6, r8, r0, r3
  40959c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4095a0:	fb0c f300 	mul.w	r3, ip, r0
  4095a4:	42b3      	cmp	r3, r6
  4095a6:	d907      	bls.n	4095b8 <__udivmoddi4+0x134>
  4095a8:	19f6      	adds	r6, r6, r7
  4095aa:	f100 32ff 	add.w	r2, r0, #4294967295
  4095ae:	d202      	bcs.n	4095b6 <__udivmoddi4+0x132>
  4095b0:	42b3      	cmp	r3, r6
  4095b2:	f200 80ce 	bhi.w	409752 <__udivmoddi4+0x2ce>
  4095b6:	4610      	mov	r0, r2
  4095b8:	1af6      	subs	r6, r6, r3
  4095ba:	b2a2      	uxth	r2, r4
  4095bc:	fbb6 f3f8 	udiv	r3, r6, r8
  4095c0:	fb08 6613 	mls	r6, r8, r3, r6
  4095c4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  4095c8:	fb0c fc03 	mul.w	ip, ip, r3
  4095cc:	45a4      	cmp	ip, r4
  4095ce:	d907      	bls.n	4095e0 <__udivmoddi4+0x15c>
  4095d0:	19e4      	adds	r4, r4, r7
  4095d2:	f103 32ff 	add.w	r2, r3, #4294967295
  4095d6:	d202      	bcs.n	4095de <__udivmoddi4+0x15a>
  4095d8:	45a4      	cmp	ip, r4
  4095da:	f200 80b5 	bhi.w	409748 <__udivmoddi4+0x2c4>
  4095de:	4613      	mov	r3, r2
  4095e0:	ebcc 0404 	rsb	r4, ip, r4
  4095e4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  4095e8:	e79c      	b.n	409524 <__udivmoddi4+0xa0>
  4095ea:	4629      	mov	r1, r5
  4095ec:	4628      	mov	r0, r5
  4095ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4095f2:	f1ce 0120 	rsb	r1, lr, #32
  4095f6:	fa06 f30e 	lsl.w	r3, r6, lr
  4095fa:	fa07 f70e 	lsl.w	r7, r7, lr
  4095fe:	fa20 f901 	lsr.w	r9, r0, r1
  409602:	ea4f 4817 	mov.w	r8, r7, lsr #16
  409606:	40ce      	lsrs	r6, r1
  409608:	ea49 0903 	orr.w	r9, r9, r3
  40960c:	fbb6 faf8 	udiv	sl, r6, r8
  409610:	ea4f 4419 	mov.w	r4, r9, lsr #16
  409614:	fb08 661a 	mls	r6, r8, sl, r6
  409618:	fa1f fc87 	uxth.w	ip, r7
  40961c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  409620:	fb0a f20c 	mul.w	r2, sl, ip
  409624:	429a      	cmp	r2, r3
  409626:	fa00 f40e 	lsl.w	r4, r0, lr
  40962a:	d90a      	bls.n	409642 <__udivmoddi4+0x1be>
  40962c:	19db      	adds	r3, r3, r7
  40962e:	f10a 31ff 	add.w	r1, sl, #4294967295
  409632:	f080 8087 	bcs.w	409744 <__udivmoddi4+0x2c0>
  409636:	429a      	cmp	r2, r3
  409638:	f240 8084 	bls.w	409744 <__udivmoddi4+0x2c0>
  40963c:	f1aa 0a02 	sub.w	sl, sl, #2
  409640:	443b      	add	r3, r7
  409642:	1a9b      	subs	r3, r3, r2
  409644:	fa1f f989 	uxth.w	r9, r9
  409648:	fbb3 f1f8 	udiv	r1, r3, r8
  40964c:	fb08 3311 	mls	r3, r8, r1, r3
  409650:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  409654:	fb01 f60c 	mul.w	r6, r1, ip
  409658:	429e      	cmp	r6, r3
  40965a:	d907      	bls.n	40966c <__udivmoddi4+0x1e8>
  40965c:	19db      	adds	r3, r3, r7
  40965e:	f101 32ff 	add.w	r2, r1, #4294967295
  409662:	d26b      	bcs.n	40973c <__udivmoddi4+0x2b8>
  409664:	429e      	cmp	r6, r3
  409666:	d969      	bls.n	40973c <__udivmoddi4+0x2b8>
  409668:	3902      	subs	r1, #2
  40966a:	443b      	add	r3, r7
  40966c:	1b9b      	subs	r3, r3, r6
  40966e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  409672:	e78e      	b.n	409592 <__udivmoddi4+0x10e>
  409674:	f1c1 0e20 	rsb	lr, r1, #32
  409678:	fa22 f40e 	lsr.w	r4, r2, lr
  40967c:	408b      	lsls	r3, r1
  40967e:	4323      	orrs	r3, r4
  409680:	fa20 f70e 	lsr.w	r7, r0, lr
  409684:	fa06 f401 	lsl.w	r4, r6, r1
  409688:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40968c:	fa26 f60e 	lsr.w	r6, r6, lr
  409690:	433c      	orrs	r4, r7
  409692:	fbb6 f9fc 	udiv	r9, r6, ip
  409696:	0c27      	lsrs	r7, r4, #16
  409698:	fb0c 6619 	mls	r6, ip, r9, r6
  40969c:	fa1f f883 	uxth.w	r8, r3
  4096a0:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  4096a4:	fb09 f708 	mul.w	r7, r9, r8
  4096a8:	42b7      	cmp	r7, r6
  4096aa:	fa02 f201 	lsl.w	r2, r2, r1
  4096ae:	fa00 fa01 	lsl.w	sl, r0, r1
  4096b2:	d908      	bls.n	4096c6 <__udivmoddi4+0x242>
  4096b4:	18f6      	adds	r6, r6, r3
  4096b6:	f109 30ff 	add.w	r0, r9, #4294967295
  4096ba:	d241      	bcs.n	409740 <__udivmoddi4+0x2bc>
  4096bc:	42b7      	cmp	r7, r6
  4096be:	d93f      	bls.n	409740 <__udivmoddi4+0x2bc>
  4096c0:	f1a9 0902 	sub.w	r9, r9, #2
  4096c4:	441e      	add	r6, r3
  4096c6:	1bf6      	subs	r6, r6, r7
  4096c8:	b2a0      	uxth	r0, r4
  4096ca:	fbb6 f4fc 	udiv	r4, r6, ip
  4096ce:	fb0c 6614 	mls	r6, ip, r4, r6
  4096d2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  4096d6:	fb04 f808 	mul.w	r8, r4, r8
  4096da:	45b8      	cmp	r8, r7
  4096dc:	d907      	bls.n	4096ee <__udivmoddi4+0x26a>
  4096de:	18ff      	adds	r7, r7, r3
  4096e0:	f104 30ff 	add.w	r0, r4, #4294967295
  4096e4:	d228      	bcs.n	409738 <__udivmoddi4+0x2b4>
  4096e6:	45b8      	cmp	r8, r7
  4096e8:	d926      	bls.n	409738 <__udivmoddi4+0x2b4>
  4096ea:	3c02      	subs	r4, #2
  4096ec:	441f      	add	r7, r3
  4096ee:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  4096f2:	ebc8 0707 	rsb	r7, r8, r7
  4096f6:	fba0 8902 	umull	r8, r9, r0, r2
  4096fa:	454f      	cmp	r7, r9
  4096fc:	4644      	mov	r4, r8
  4096fe:	464e      	mov	r6, r9
  409700:	d314      	bcc.n	40972c <__udivmoddi4+0x2a8>
  409702:	d029      	beq.n	409758 <__udivmoddi4+0x2d4>
  409704:	b365      	cbz	r5, 409760 <__udivmoddi4+0x2dc>
  409706:	ebba 0304 	subs.w	r3, sl, r4
  40970a:	eb67 0706 	sbc.w	r7, r7, r6
  40970e:	fa07 fe0e 	lsl.w	lr, r7, lr
  409712:	40cb      	lsrs	r3, r1
  409714:	40cf      	lsrs	r7, r1
  409716:	ea4e 0303 	orr.w	r3, lr, r3
  40971a:	e885 0088 	stmia.w	r5, {r3, r7}
  40971e:	2100      	movs	r1, #0
  409720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409724:	4613      	mov	r3, r2
  409726:	e6f8      	b.n	40951a <__udivmoddi4+0x96>
  409728:	4610      	mov	r0, r2
  40972a:	e6e0      	b.n	4094ee <__udivmoddi4+0x6a>
  40972c:	ebb8 0402 	subs.w	r4, r8, r2
  409730:	eb69 0603 	sbc.w	r6, r9, r3
  409734:	3801      	subs	r0, #1
  409736:	e7e5      	b.n	409704 <__udivmoddi4+0x280>
  409738:	4604      	mov	r4, r0
  40973a:	e7d8      	b.n	4096ee <__udivmoddi4+0x26a>
  40973c:	4611      	mov	r1, r2
  40973e:	e795      	b.n	40966c <__udivmoddi4+0x1e8>
  409740:	4681      	mov	r9, r0
  409742:	e7c0      	b.n	4096c6 <__udivmoddi4+0x242>
  409744:	468a      	mov	sl, r1
  409746:	e77c      	b.n	409642 <__udivmoddi4+0x1be>
  409748:	3b02      	subs	r3, #2
  40974a:	443c      	add	r4, r7
  40974c:	e748      	b.n	4095e0 <__udivmoddi4+0x15c>
  40974e:	4608      	mov	r0, r1
  409750:	e70a      	b.n	409568 <__udivmoddi4+0xe4>
  409752:	3802      	subs	r0, #2
  409754:	443e      	add	r6, r7
  409756:	e72f      	b.n	4095b8 <__udivmoddi4+0x134>
  409758:	45c2      	cmp	sl, r8
  40975a:	d3e7      	bcc.n	40972c <__udivmoddi4+0x2a8>
  40975c:	463e      	mov	r6, r7
  40975e:	e7d1      	b.n	409704 <__udivmoddi4+0x280>
  409760:	4629      	mov	r1, r5
  409762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409766:	bf00      	nop

00409768 <__aeabi_idiv0>:
  409768:	4770      	bx	lr
  40976a:	bf00      	nop
  40976c:	454c4449 	.word	0x454c4449
  409770:	00000000 	.word	0x00000000
  409774:	09632509 	.word	0x09632509
  409778:	25097525 	.word	0x25097525
  40977c:	75250975 	.word	0x75250975
  409780:	00000a0d 	.word	0x00000a0d
  409784:	51726d54 	.word	0x51726d54
  409788:	00000000 	.word	0x00000000
  40978c:	20726d54 	.word	0x20726d54
  409790:	00637653 	.word	0x00637653
  409794:	61686c6f 	.word	0x61686c6f
  409798:	73206f20 	.word	0x73206f20
  40979c:	75746174 	.word	0x75746174
  4097a0:	000a2073 	.word	0x000a2073
  4097a4:	61686c6f 	.word	0x61686c6f
  4097a8:	73206f20 	.word	0x73206f20
  4097ac:	75746174 	.word	0x75746174
  4097b0:	206e2073 	.word	0x206e2073
  4097b4:	0000000a 	.word	0x0000000a
  4097b8:	202d2d2d 	.word	0x202d2d2d
  4097bc:	6b736174 	.word	0x6b736174
  4097c0:	20232320 	.word	0x20232320
  4097c4:	00007525 	.word	0x00007525
  4097c8:	63617473 	.word	0x63617473
  4097cc:	766f206b 	.word	0x766f206b
  4097d0:	6c667265 	.word	0x6c667265
  4097d4:	2520776f 	.word	0x2520776f
  4097d8:	73252078 	.word	0x73252078
  4097dc:	00000a0d 	.word	0x00000a0d
  4097e0:	46202d2d 	.word	0x46202d2d
  4097e4:	72656572 	.word	0x72656572
  4097e8:	20736f74 	.word	0x20736f74
  4097ec:	6d617845 	.word	0x6d617845
  4097f0:	20656c70 	.word	0x20656c70
  4097f4:	0d0a2d2d 	.word	0x0d0a2d2d
  4097f8:	00000000 	.word	0x00000000
  4097fc:	454d4153 	.word	0x454d4153
  409800:	582d3037 	.word	0x582d3037
  409804:	00444c50 	.word	0x00444c50
  409808:	25202d2d 	.word	0x25202d2d
  40980c:	000d0a73 	.word	0x000d0a73
  409810:	353a3731 	.word	0x353a3731
  409814:	31353a36 	.word	0x31353a36
  409818:	00000000 	.word	0x00000000
  40981c:	2079614d 	.word	0x2079614d
  409820:	32203232 	.word	0x32203232
  409824:	00373130 	.word	0x00373130
  409828:	43202d2d 	.word	0x43202d2d
  40982c:	69706d6f 	.word	0x69706d6f
  409830:	3a64656c 	.word	0x3a64656c
  409834:	20732520 	.word	0x20732520
  409838:	2d207325 	.word	0x2d207325
  40983c:	000d0a2d 	.word	0x000d0a2d
  409840:	696e6f4d 	.word	0x696e6f4d
  409844:	00726f74 	.word	0x00726f74
  409848:	6c696146 	.word	0x6c696146
  40984c:	74206465 	.word	0x74206465
  409850:	7263206f 	.word	0x7263206f
  409854:	65746165 	.word	0x65746165
  409858:	6e6f4d20 	.word	0x6e6f4d20
  40985c:	726f7469 	.word	0x726f7469
  409860:	73617420 	.word	0x73617420
  409864:	000a0d6b 	.word	0x000a0d6b
  409868:	0064654c 	.word	0x0064654c
  40986c:	6c696146 	.word	0x6c696146
  409870:	74206465 	.word	0x74206465
  409874:	7263206f 	.word	0x7263206f
  409878:	65746165 	.word	0x65746165
  40987c:	73657420 	.word	0x73657420
  409880:	656c2074 	.word	0x656c2074
  409884:	61742064 	.word	0x61742064
  409888:	0a0d6b73 	.word	0x0a0d6b73
  40988c:	00000000 	.word	0x00000000
  409890:	3164654c 	.word	0x3164654c
  409894:	00000000 	.word	0x00000000
  409898:	3264654c 	.word	0x3264654c
  40989c:	00000000 	.word	0x00000000
  4098a0:	3364654c 	.word	0x3364654c
  4098a4:	00000000 	.word	0x00000000
  4098a8:	006e7462 	.word	0x006e7462
  4098ac:	00000043 	.word	0x00000043

004098b0 <_global_impure_ptr>:
  4098b0:	20400010                                ..@ 

004098b4 <zeroes.7035>:
  4098b4:	30303030 30303030 30303030 30303030     0000000000000000
  4098c4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  4098d4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  4098e4:	00000000 33323130 37363534 62613938     ....0123456789ab
  4098f4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  409904:	00000030                                0...

00409908 <blanks.7034>:
  409908:	20202020 20202020 20202020 20202020                     

00409918 <zeroes.6993>:
  409918:	30303030 30303030 30303030 30303030     0000000000000000

00409928 <blanks.6992>:
  409928:	20202020 20202020 20202020 20202020                     
  409938:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  409948:	49534f50 00000058 0000002e 00000000     POSIX...........

00409958 <__mprec_tens>:
  409958:	00000000 3ff00000 00000000 40240000     .......?......$@
  409968:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  409978:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  409988:	00000000 412e8480 00000000 416312d0     .......A......cA
  409998:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4099a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4099b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  4099c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  4099d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  4099e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  4099f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  409a08:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  409a18:	79d99db4 44ea7843                       ...yCx.D

00409a20 <__mprec_bigtens>:
  409a20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  409a30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  409a40:	7f73bf3c 75154fdd                       <.s..O.u

00409a48 <p05.5373>:
  409a48:	00000005 00000019 0000007d              ........}...

00409a54 <_init>:
  409a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409a56:	bf00      	nop
  409a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409a5a:	bc08      	pop	{r3}
  409a5c:	469e      	mov	lr, r3
  409a5e:	4770      	bx	lr

00409a60 <__init_array_start>:
  409a60:	004060e1 	.word	0x004060e1

00409a64 <__frame_dummy_init_array_entry>:
  409a64:	00400165                                e.@.

00409a68 <_fini>:
  409a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409a6a:	bf00      	nop
  409a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409a6e:	bc08      	pop	{r3}
  409a70:	469e      	mov	lr, r3
  409a72:	4770      	bx	lr

00409a74 <__fini_array_start>:
  409a74:	00400141 	.word	0x00400141
